
AVRASM ver. 2.2.6  c:\Users\pmg\Documents\Atmel Studio\7.0\bin_clock\bin_clock\main.asm Sat Jul 22 18:06:43 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m328PBdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m328PBdef.inc'
                                 
                                 ;
                                 
                                 
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;*
                                 ;* Number            : AVR000
                                 ;* File Name         : m328PBdef.inc
                                 ;* Title             : Register/Bit Definitions for the ATmega328PB
                                 ;* Created           : 2016-12-14 16:07
                                 ;* Version           : 1.00
                                 ;* Support e-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328PB
                                 ;*
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal
                                 ;* SRAM is also defined
                                 ;*
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PBDEF_INC_
                                 #define _M328PBDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device	ATmega328PB
                                 #pragma AVRPART ADMIN PART_NAME ATmega328PB
                                 .equ	SIGNATURE_000	= 0x1E
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x16
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED" are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	TWAMR1	= 0xDD ; MEMORY MAPPED
                                 .equ	TWCR1	= 0xDC ; MEMORY MAPPED
                                 .equ	TWDR1	= 0xDB ; MEMORY MAPPED
                                 .equ	TWAR1	= 0xDA ; MEMORY MAPPED
                                 .equ	TWSR1	= 0xD9 ; MEMORY MAPPED
                                 .equ	TWBR1	= 0xD8 ; MEMORY MAPPED
                                 .equ	UDR1	= 0xCE ; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xCD ; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xCC ; MEMORY MAPPED
                                 .equ	UCSR1D	= 0xCB ; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xCA ; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xC9 ; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xC8 ; MEMORY MAPPED
                                 .equ	UDR0	= 0xC6 ; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xC5 ; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xC4 ; MEMORY MAPPED
                                 .equ	UCSR0D	= 0xC3 ; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xC2 ; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xC1 ; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xC0 ; MEMORY MAPPED
                                 .equ	TWAMR0	= 0xBD ; MEMORY MAPPED
                                 .equ	TWCR0	= 0xBC ; MEMORY MAPPED
                                 .equ	TWDR0	= 0xBB ; MEMORY MAPPED
                                 .equ	TWAR0	= 0xBA ; MEMORY MAPPED
                                 .equ	TWSR0	= 0xB9 ; MEMORY MAPPED
                                 .equ	TWBR0	= 0xB8 ; MEMORY MAPPED
                                 .equ	ASSR	= 0xB6 ; MEMORY MAPPED
                                 .equ	OCR2B	= 0xB4 ; MEMORY MAPPED
                                 .equ	OCR2A	= 0xB3 ; MEMORY MAPPED
                                 .equ	TCNT2	= 0xB2 ; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xB1 ; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xB0 ; MEMORY MAPPED
                                 .equ	SPDR1	= 0xAE ; MEMORY MAPPED
                                 .equ	SPSR1	= 0xAD ; MEMORY MAPPED
                                 .equ	SPCR1	= 0xAC ; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xAB ; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xAA ; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xA9 ; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xA8 ; MEMORY MAPPED
                                 .equ	ICR4H	= 0xA7 ; MEMORY MAPPED
                                 .equ	ICR4L	= 0xA6 ; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xA5 ; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xA4 ; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xA2 ; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xA1 ; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xA0 ; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9B ; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9A ; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99 ; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98 ; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97 ; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96 ; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95 ; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94 ; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92 ; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91 ; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90 ; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8B ; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8A ; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89 ; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88 ; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87 ; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86 ; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85 ; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84 ; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82 ; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81 ; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80 ; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7F ; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7E ; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7C ; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7B ; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7A ; MEMORY MAPPED
                                 .equ	ADCH	= 0x79 ; MEMORY MAPPED
                                 .equ	ADCL	= 0x78 ; MEMORY MAPPED
                                 .equ	PCMSK3	= 0x73 ; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72 ; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71 ; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70 ; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6F ; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6E ; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6D ; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6C ; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6B ; MEMORY MAPPED
                                 .equ	EICRA	= 0x69 ; MEMORY MAPPED
                                 .equ	PCICR	= 0x68 ; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66 ; MEMORY MAPPED
                                 .equ	PRR1	= 0x65 ; MEMORY MAPPED
                                 .equ	PRR0	= 0x64 ; MEMORY MAPPED
                                 .equ	XFDCSR	= 0x62 ; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61 ; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60 ; MEMORY MAPPED
                                 .equ	SREG	= 0x3F ; 
                                 .equ	SPH	= 0x3E ; 
                                 .equ	SPL	= 0x3D ; 
                                 .equ	SPMCSR	= 0x37 ; 
                                 .equ	MCUCR	= 0x35 ; 
                                 .equ	MCUSR	= 0x34 ; 
                                 .equ	SMCR	= 0x33 ; 
                                 .equ	ACSRA	= 0x30 ; 
                                 .equ	ACSR	= 0x30 ; 
                                 .equ	ACSRB	= 0x2F ; 
                                 .equ	SPDR0	= 0x2E ; 
                                 .equ	SPSR0	= 0x2D ; 
                                 .equ	SPCR0	= 0x2C ; 
                                 .equ	GPIOR2	= 0x2B ; 
                                 .equ	GPIOR1	= 0x2A ; 
                                 .equ	OCR0B	= 0x28 ; 
                                 .equ	OCR0A	= 0x27 ; 
                                 .equ	TCNT0	= 0x26 ; 
                                 .equ	TCCR0B	= 0x25 ; 
                                 .equ	TCCR0A	= 0x24 ; 
                                 .equ	GTCCR	= 0x23 ; 
                                 .equ	EEARH	= 0x22 ; 
                                 .equ	EEARL	= 0x21 ; 
                                 .equ	EEDR	= 0x20 ; 
                                 .equ	EECR	= 0x1F ; 
                                 .equ	GPIOR0	= 0x1E ; 
                                 .equ	EIMSK	= 0x1D ; 
                                 .equ	EIFR	= 0x1C ; 
                                 .equ	PCIFR	= 0x1B ; 
                                 .equ	TIFR4	= 0x19 ; 
                                 .equ	TIFR3	= 0x18 ; 
                                 .equ	TIFR2	= 0x17 ; 
                                 .equ	TIFR1	= 0x16 ; 
                                 .equ	TIFR0	= 0x15 ; 
                                 .equ	PORTE	= 0x0E ; 
                                 .equ	DDRE	= 0x0D ; 
                                 .equ	PINE	= 0x0C ; 
                                 .equ	PORTD	= 0x0B ; 
                                 .equ	DDRD	= 0x0A ; 
                                 .equ	PIND	= 0x09 ; 
                                 .equ	PORTC	= 0x08 ; 
                                 .equ	DDRC	= 0x07 ; 
                                 .equ	PINC	= 0x06 ; 
                                 .equ	PORTB	= 0x05 ; 
                                 .equ	DDRB	= 0x04 ; 
                                 .equ	PINB	= 0x03 ; 
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 *****************
                                 ; UDR0 - USART I/O Data Register 0
                                 .equ	UDR00	= 0 ; USART I/O Data Register 0 Bit 0
                                 .equ	UDR01	= 1 ; USART I/O Data Register 0 Bit 1
                                 .equ	UDR02	= 2 ; USART I/O Data Register 0 Bit 2
                                 .equ	UDR03	= 3 ; USART I/O Data Register 0 Bit 3
                                 .equ	UDR04	= 4 ; USART I/O Data Register 0 Bit 4
                                 .equ	UDR05	= 5 ; USART I/O Data Register 0 Bit 5
                                 .equ	UDR06	= 6 ; USART I/O Data Register 0 Bit 6
                                 .equ	UDR07	= 7 ; USART I/O Data Register 0 Bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0 ; Multi-processor Communication Mode
                                 .equ	U2X0	= 1 ; Double the USART transmission speed
                                 .equ	UPE0	= 2 ; Parity Error
                                 .equ	DOR0	= 3 ; Data overRun
                                 .equ	FE0	= 4 ; Framing Error
                                 .equ	UDRE0	= 5 ; USART Data Register Empty
                                 .equ	TXC0	= 6 ; USART Transmitt Complete
                                 .equ	RXC0	= 7 ; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0 ; Transmit Data Bit 8
                                 .equ	RXB80	= 1 ; Receive Data Bit 8
                                 .equ	UCSZ02	= 2 ; Character Size
                                 .equ	TXEN0	= 3 ; Transmitter Enable
                                 .equ	RXEN0	= 4 ; Receiver Enable
                                 .equ	UDRIE0	= 5 ; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6 ; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7 ; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0 ; Clock Polarity
                                 .equ	UCSZ00	= 1 ; Character Size
                                 .equ	UCSZ01	= 2 ; Character Size
                                 .equ	USBS0	= 3 ; Stop Bit Select
                                 .equ	UPM00	= 4 ; Parity Mode Bits
                                 .equ	UPM01	= 5 ; Parity Mode Bits
                                 .equ	UMSEL00	= 6 ; USART Mode Select
                                 .equ	UMSEL01	= 7 ; USART Mode Select
                                 
                                 ; UCSR0D - USART Control and Status Register D
                                 .equ	SFDE	= 5 ; Start frame detection enable
                                 .equ	RXS	= 6 ; USART RX Start
                                 .equ	RXSIE	= 7 ; USART RX Start Interrupt Enable
                                 
                                 ; UBRR0 - USART Baud Rate Register Bytes
                                 .equ	UBRR0H0	= 0 ; USART Baud Rate Register Bytes High Bit 8
                                 .equ	UBRR0H1	= 1 ; USART Baud Rate Register Bytes High Bit 9
                                 .equ	UBRR0H2	= 2 ; USART Baud Rate Register Bytes High Bit 10
                                 .equ	UBRR0H3	= 3 ; USART Baud Rate Register Bytes High Bit 11
                                 
                                 .equ	UBRR0L0	= 0 ; USART Baud Rate Register Bytes Low Bit 0
                                 .equ	UBRR0L1	= 1 ; USART Baud Rate Register Bytes Low Bit 1
                                 .equ	UBRR0L2	= 2 ; USART Baud Rate Register Bytes Low Bit 2
                                 .equ	UBRR0L3	= 3 ; USART Baud Rate Register Bytes Low Bit 3
                                 .equ	UBRR0L4	= 4 ; USART Baud Rate Register Bytes Low Bit 4
                                 .equ	UBRR0L5	= 5 ; USART Baud Rate Register Bytes Low Bit 5
                                 .equ	UBRR0L6	= 6 ; USART Baud Rate Register Bytes Low Bit 6
                                 .equ	UBRR0L7	= 7 ; USART Baud Rate Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** USART1 *****************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0 ; USART I/O Data Register Bit 0
                                 .equ	UDR11	= 1 ; USART I/O Data Register Bit 1
                                 .equ	UDR12	= 2 ; USART I/O Data Register Bit 2
                                 .equ	UDR13	= 3 ; USART I/O Data Register Bit 3
                                 .equ	UDR14	= 4 ; USART I/O Data Register Bit 4
                                 .equ	UDR15	= 5 ; USART I/O Data Register Bit 5
                                 .equ	UDR16	= 6 ; USART I/O Data Register Bit 6
                                 .equ	UDR17	= 7 ; USART I/O Data Register Bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0 ; Multi-processor Communication Mode
                                 .equ	U2X1	= 1 ; Double the USART transmission speed
                                 .equ	UPE1	= 2 ; Parity Error
                                 .equ	DOR1	= 3 ; Data overRun
                                 .equ	FE1	= 4 ; Framing Error
                                 .equ	UDRE1	= 5 ; USART Data Register Empty
                                 .equ	TXC1	= 6 ; USART Transmitt Complete
                                 .equ	RXC1	= 7 ; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0 ; Transmit Data Bit 8
                                 .equ	RXB81	= 1 ; Receive Data Bit 8
                                 .equ	UCSZ12	= 2 ; Character Size
                                 .equ	TXEN1	= 3 ; Transmitter Enable
                                 .equ	RXEN1	= 4 ; Receiver Enable
                                 .equ	UDRIE1	= 5 ; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6 ; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7 ; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0 ; Clock Polarity
                                 .equ	UCSZ10	= 1 ; Character Size
                                 .equ	UCSZ11	= 2 ; Character Size
                                 .equ	USBS1	= 3 ; Stop Bit Select
                                 .equ	UPM10	= 4 ; Parity Mode Bits
                                 .equ	UPM11	= 5 ; Parity Mode Bits
                                 .equ	UMSEL10	= 6 ; USART Mode Select
                                 .equ	UMSEL11	= 7 ; USART Mode Select
                                 
                                 ; UCSR1D - USART Control and Status Register D
                                 .equ	SFDE1	= 5 ; Start frame detection enable
                                 .equ	RXS1	= 6 ; USART RX Start
                                 .equ	RXSIE1	= 7 ; USART RX Start Interrupt Enable
                                 
                                 ; UBRR1 - USART Baud Rate Register Bytes
                                 .equ	UBRR1H0	= 0 ; USART Baud Rate Register Bytes High Bit 8
                                 .equ	UBRR1H1	= 1 ; USART Baud Rate Register Bytes High Bit 9
                                 .equ	UBRR1H2	= 2 ; USART Baud Rate Register Bytes High Bit 10
                                 .equ	UBRR1H3	= 3 ; USART Baud Rate Register Bytes High Bit 11
                                 
                                 .equ	UBRR1L0	= 0 ; USART Baud Rate Register Bytes Low Bit 0
                                 .equ	UBRR1L1	= 1 ; USART Baud Rate Register Bytes Low Bit 1
                                 .equ	UBRR1L2	= 2 ; USART Baud Rate Register Bytes Low Bit 2
                                 .equ	UBRR1L3	= 3 ; USART Baud Rate Register Bytes Low Bit 3
                                 .equ	UBRR1L4	= 4 ; USART Baud Rate Register Bytes Low Bit 4
                                 .equ	UBRR1L5	= 5 ; USART Baud Rate Register Bytes Low Bit 5
                                 .equ	UBRR1L6	= 6 ; USART Baud Rate Register Bytes Low Bit 6
                                 .equ	UBRR1L7	= 7 ; USART Baud Rate Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** TWI0 *****************
                                 ; TWAMR0 - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1 ; 
                                 .equ	TWAM1	= 2 ; 
                                 .equ	TWAM2	= 3 ; 
                                 .equ	TWAM3	= 4 ; 
                                 .equ	TWAM4	= 5 ; 
                                 .equ	TWAM5	= 6 ; 
                                 .equ	TWAM6	= 7 ; 
                                 
                                 ; TWBR0 - TWI Bit Rate register
                                 .equ	TWBR00	= 0 ; TWI Bit Rate register Bit 0
                                 .equ	TWBR01	= 1 ; TWI Bit Rate register Bit 1
                                 .equ	TWBR02	= 2 ; TWI Bit Rate register Bit 2
                                 .equ	TWBR03	= 3 ; TWI Bit Rate register Bit 3
                                 .equ	TWBR04	= 4 ; TWI Bit Rate register Bit 4
                                 .equ	TWBR05	= 5 ; TWI Bit Rate register Bit 5
                                 .equ	TWBR06	= 6 ; TWI Bit Rate register Bit 6
                                 .equ	TWBR07	= 7 ; TWI Bit Rate register Bit 7
                                 
                                 ; TWCR0 - TWI Control Register
                                 .equ	TWIE	= 0 ; TWI Interrupt Enable
                                 .equ	TWEN	= 2 ; TWI Enable Bit
                                 .equ	TWWC	= 3 ; TWI Write Collition Flag
                                 .equ	TWSTO	= 4 ; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5 ; TWI Start Condition Bit
                                 .equ	TWEA	= 6 ; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7 ; TWI Interrupt Flag
                                 
                                 ; TWSR0 - TWI Status Register
                                 .equ	TWPS0	= 0 ; TWI Prescaler
                                 .equ	TWPS1	= 1 ; TWI Prescaler
                                 .equ	TWS3	= 3 ; TWI Status
                                 .equ	TWS4	= 4 ; TWI Status
                                 .equ	TWS5	= 5 ; TWI Status
                                 .equ	TWS6	= 6 ; TWI Status
                                 .equ	TWS7	= 7 ; TWI Status
                                 
                                 ; TWDR0 - TWI Data register
                                 .equ	TWDR00	= 0 ; TWI Data register Bit 0
                                 .equ	TWDR01	= 1 ; TWI Data register Bit 1
                                 .equ	TWDR02	= 2 ; TWI Data register Bit 2
                                 .equ	TWDR03	= 3 ; TWI Data register Bit 3
                                 .equ	TWDR04	= 4 ; TWI Data register Bit 4
                                 .equ	TWDR05	= 5 ; TWI Data register Bit 5
                                 .equ	TWDR06	= 6 ; TWI Data register Bit 6
                                 .equ	TWDR07	= 7 ; TWI Data register Bit 7
                                 
                                 ; TWAR0 - TWI (Slave) Address register
                                 .equ	TWGCE	= 0 ; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1 ; TWI (Slave) Address register Bits
                                 .equ	TWA1	= 2 ; TWI (Slave) Address register Bits
                                 .equ	TWA2	= 3 ; TWI (Slave) Address register Bits
                                 .equ	TWA3	= 4 ; TWI (Slave) Address register Bits
                                 .equ	TWA4	= 5 ; TWI (Slave) Address register Bits
                                 .equ	TWA5	= 6 ; TWI (Slave) Address register Bits
                                 .equ	TWA6	= 7 ; TWI (Slave) Address register Bits
                                 
                                 
                                 ; ***** TWI1 *****************
                                 ; TWAMR1 - TWI (Slave) Address Mask Register
                                 .equ	TWAM10	= 1 ; 
                                 .equ	TWAM11	= 2 ; 
                                 .equ	TWAM12	= 3 ; 
                                 .equ	TWAM13	= 4 ; 
                                 .equ	TWAM14	= 5 ; 
                                 .equ	TWAM15	= 6 ; 
                                 .equ	TWAM16	= 7 ; 
                                 
                                 ; TWBR1 - TWI Bit Rate register
                                 .equ	TWBR10	= 0 ; TWI Bit Rate register Bit 0
                                 .equ	TWBR11	= 1 ; TWI Bit Rate register Bit 1
                                 .equ	TWBR12	= 2 ; TWI Bit Rate register Bit 2
                                 .equ	TWBR13	= 3 ; TWI Bit Rate register Bit 3
                                 .equ	TWBR14	= 4 ; TWI Bit Rate register Bit 4
                                 .equ	TWBR15	= 5 ; TWI Bit Rate register Bit 5
                                 .equ	TWBR16	= 6 ; TWI Bit Rate register Bit 6
                                 .equ	TWBR17	= 7 ; TWI Bit Rate register Bit 7
                                 
                                 ; TWCR1 - TWI Control Register
                                 .equ	TWIE1	= 0 ; TWI Interrupt Enable
                                 .equ	TWEN1	= 2 ; TWI Enable Bit
                                 .equ	TWWC1	= 3 ; TWI Write Collition Flag
                                 .equ	TWSTO1	= 4 ; TWI Stop Condition Bit
                                 .equ	TWSTA1	= 5 ; TWI Start Condition Bit
                                 .equ	TWEA1	= 6 ; TWI Enable Acknowledge Bit
                                 .equ	TWINT1	= 7 ; TWI Interrupt Flag
                                 
                                 ; TWSR1 - TWI Status Register
                                 .equ	TWPS10	= 0 ; TWI Prescaler
                                 .equ	TWPS11	= 1 ; TWI Prescaler
                                 .equ	TWS13	= 3 ; TWI Status
                                 .equ	TWS14	= 4 ; TWI Status
                                 .equ	TWS15	= 5 ; TWI Status
                                 .equ	TWS16	= 6 ; TWI Status
                                 .equ	TWS17	= 7 ; TWI Status
                                 
                                 ; TWDR1 - TWI Data register
                                 .equ	TWDR10	= 0 ; TWI Data register Bit 0
                                 .equ	TWDR11	= 1 ; TWI Data register Bit 1
                                 .equ	TWDR12	= 2 ; TWI Data register Bit 2
                                 .equ	TWDR13	= 3 ; TWI Data register Bit 3
                                 .equ	TWDR14	= 4 ; TWI Data register Bit 4
                                 .equ	TWDR15	= 5 ; TWI Data register Bit 5
                                 .equ	TWDR16	= 6 ; TWI Data register Bit 6
                                 .equ	TWDR17	= 7 ; TWI Data register Bit 7
                                 
                                 ; TWAR1 - TWI (Slave) Address register
                                 .equ	TWAR10	= 0 ; TWI (Slave) Address register Bit 0
                                 .equ	TWAR11	= 1 ; TWI (Slave) Address register Bit 1
                                 .equ	TWAR12	= 2 ; TWI (Slave) Address register Bit 2
                                 .equ	TWAR13	= 3 ; TWI (Slave) Address register Bit 3
                                 .equ	TWAR14	= 4 ; TWI (Slave) Address register Bit 4
                                 .equ	TWAR15	= 5 ; TWI (Slave) Address register Bit 5
                                 .equ	TWAR16	= 6 ; TWI (Slave) Address register Bit 6
                                 .equ	TWAR17	= 7 ; TWI (Slave) Address register Bit 7
                                 
                                 
                                 ; ***** TC1 *****************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0 ; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1 ; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2 ; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5 ; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0 ; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1 ; Output Compare Flag 1A
                                 .equ	OCF1B	= 2 ; Output Compare Flag 1B
                                 .equ	ICF1	= 5 ; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0 ; Waveform Generation Mode
                                 .equ	WGM11	= 1 ; Waveform Generation Mode
                                 .equ	COM1B0	= 4 ; Compare Output Mode 1B, bits
                                 .equ	COM1B1	= 5 ; Compare Output Mode 1B, bits
                                 .equ	COM1A0	= 6 ; Compare Output Mode 1A, bits
                                 .equ	COM1A1	= 7 ; Compare Output Mode 1A, bits
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0 ; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1 ; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2 ; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3 ; Waveform Generation Mode
                                 .equ	WGM13	= 4 ; Waveform Generation Mode
                                 .equ	ICES1	= 6 ; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7 ; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6 ; 
                                 .equ	FOC1A	= 7 ; 
                                 
                                 ; TCNT1 - Timer/Counter1 Bytes
                                 .equ	TCNT1H0	= 0 ; Timer/Counter1 Bytes High Bit 8
                                 .equ	TCNT1H1	= 1 ; Timer/Counter1 Bytes High Bit 9
                                 .equ	TCNT1H2	= 2 ; Timer/Counter1 Bytes High Bit 10
                                 .equ	TCNT1H3	= 3 ; Timer/Counter1 Bytes High Bit 11
                                 .equ	TCNT1H4	= 4 ; Timer/Counter1 Bytes High Bit 12
                                 .equ	TCNT1H5	= 5 ; Timer/Counter1 Bytes High Bit 13
                                 .equ	TCNT1H6	= 6 ; Timer/Counter1 Bytes High Bit 14
                                 .equ	TCNT1H7	= 7 ; Timer/Counter1 Bytes High Bit 15
                                 
                                 .equ	TCNT1L0	= 0 ; Timer/Counter1 Bytes Low Bit 0
                                 .equ	TCNT1L1	= 1 ; Timer/Counter1 Bytes Low Bit 1
                                 .equ	TCNT1L2	= 2 ; Timer/Counter1 Bytes Low Bit 2
                                 .equ	TCNT1L3	= 3 ; Timer/Counter1 Bytes Low Bit 3
                                 .equ	TCNT1L4	= 4 ; Timer/Counter1 Bytes Low Bit 4
                                 .equ	TCNT1L5	= 5 ; Timer/Counter1 Bytes Low Bit 5
                                 .equ	TCNT1L6	= 6 ; Timer/Counter1 Bytes Low Bit 6
                                 .equ	TCNT1L7	= 7 ; Timer/Counter1 Bytes Low Bit 7
                                 
                                 ; OCR1A - Timer/Counter1 Output Compare Register Bytes
                                 .equ	OCR1AH0	= 0 ; Timer/Counter1 Output Compare Register Bytes High Bit 8
                                 .equ	OCR1AH1	= 1 ; Timer/Counter1 Output Compare Register Bytes High Bit 9
                                 .equ	OCR1AH2	= 2 ; Timer/Counter1 Output Compare Register Bytes High Bit 10
                                 .equ	OCR1AH3	= 3 ; Timer/Counter1 Output Compare Register Bytes High Bit 11
                                 .equ	OCR1AH4	= 4 ; Timer/Counter1 Output Compare Register Bytes High Bit 12
                                 .equ	OCR1AH5	= 5 ; Timer/Counter1 Output Compare Register Bytes High Bit 13
                                 .equ	OCR1AH6	= 6 ; Timer/Counter1 Output Compare Register Bytes High Bit 14
                                 .equ	OCR1AH7	= 7 ; Timer/Counter1 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR1AL0	= 0 ; Timer/Counter1 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR1AL1	= 1 ; Timer/Counter1 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR1AL2	= 2 ; Timer/Counter1 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR1AL3	= 3 ; Timer/Counter1 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR1AL4	= 4 ; Timer/Counter1 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR1AL5	= 5 ; Timer/Counter1 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR1AL6	= 6 ; Timer/Counter1 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR1AL7	= 7 ; Timer/Counter1 Output Compare Register Bytes Low Bit 7
                                 
                                 ; OCR1B - Timer/Counter1 Output Compare Register Bytes
                                 .equ	OCR1BH0	= 0 ; Timer/Counter1 Output Compare Register Bytes High Bit 8
                                 .equ	OCR1BH1	= 1 ; Timer/Counter1 Output Compare Register Bytes High Bit 9
                                 .equ	OCR1BH2	= 2 ; Timer/Counter1 Output Compare Register Bytes High Bit 10
                                 .equ	OCR1BH3	= 3 ; Timer/Counter1 Output Compare Register Bytes High Bit 11
                                 .equ	OCR1BH4	= 4 ; Timer/Counter1 Output Compare Register Bytes High Bit 12
                                 .equ	OCR1BH5	= 5 ; Timer/Counter1 Output Compare Register Bytes High Bit 13
                                 .equ	OCR1BH6	= 6 ; Timer/Counter1 Output Compare Register Bytes High Bit 14
                                 .equ	OCR1BH7	= 7 ; Timer/Counter1 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR1BL0	= 0 ; Timer/Counter1 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR1BL1	= 1 ; Timer/Counter1 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR1BL2	= 2 ; Timer/Counter1 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR1BL3	= 3 ; Timer/Counter1 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR1BL4	= 4 ; Timer/Counter1 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR1BL5	= 5 ; Timer/Counter1 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR1BL6	= 6 ; Timer/Counter1 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR1BL7	= 7 ; Timer/Counter1 Output Compare Register Bytes Low Bit 7
                                 
                                 ; ICR1 - Timer/Counter1 Input Capture Register Bytes
                                 .equ	ICR1H0	= 0 ; Timer/Counter1 Input Capture Register Bytes High Bit 8
                                 .equ	ICR1H1	= 1 ; Timer/Counter1 Input Capture Register Bytes High Bit 9
                                 .equ	ICR1H2	= 2 ; Timer/Counter1 Input Capture Register Bytes High Bit 10
                                 .equ	ICR1H3	= 3 ; Timer/Counter1 Input Capture Register Bytes High Bit 11
                                 .equ	ICR1H4	= 4 ; Timer/Counter1 Input Capture Register Bytes High Bit 12
                                 .equ	ICR1H5	= 5 ; Timer/Counter1 Input Capture Register Bytes High Bit 13
                                 .equ	ICR1H6	= 6 ; Timer/Counter1 Input Capture Register Bytes High Bit 14
                                 .equ	ICR1H7	= 7 ; Timer/Counter1 Input Capture Register Bytes High Bit 15
                                 
                                 .equ	ICR1L0	= 0 ; Timer/Counter1 Input Capture Register Bytes Low Bit 0
                                 .equ	ICR1L1	= 1 ; Timer/Counter1 Input Capture Register Bytes Low Bit 1
                                 .equ	ICR1L2	= 2 ; Timer/Counter1 Input Capture Register Bytes Low Bit 2
                                 .equ	ICR1L3	= 3 ; Timer/Counter1 Input Capture Register Bytes Low Bit 3
                                 .equ	ICR1L4	= 4 ; Timer/Counter1 Input Capture Register Bytes Low Bit 4
                                 .equ	ICR1L5	= 5 ; Timer/Counter1 Input Capture Register Bytes Low Bit 5
                                 .equ	ICR1L6	= 6 ; Timer/Counter1 Input Capture Register Bytes Low Bit 6
                                 .equ	ICR1L7	= 7 ; Timer/Counter1 Input Capture Register Bytes Low Bit 7
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0 ; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7 ; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TC3 *****************
                                 ; TIMSK3 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE3	= 0 ; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1 ; Timer/Counter3 Output Compare Match A Interrupt Enable
                                 .equ	OCIE3B	= 2 ; Timer/Counter3 Output Compare Match B Interrupt Enable
                                 .equ	ICIE3	= 5 ; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0 ; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1 ; Output Compare Flag 3A
                                 .equ	OCF3B	= 2 ; Output Compare Flag 3B
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0 ; Waveform Genration Mode
                                 .equ	WGM31	= 1 ; Waveform Genration Mode
                                 .equ	COM3B0	= 4 ; Compare Output Mode bits
                                 .equ	COM3B1	= 5 ; Compare Output Mode bits
                                 .equ	COM3A0	= 6 ; Compare Output Mode bits
                                 .equ	COM3A1	= 7 ; Compare Output Mode bits
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0 ; Clock Select bits
                                 .equ	CS31	= 1 ; Clock Select bits
                                 .equ	CS32	= 2 ; Clock Select bits
                                 .equ	WGM32	= 3 ; Waveform Generation Mode bit 2
                                 .equ	WGM33	= 4 ; Waveform Generation Mode bit 3
                                 .equ	ICES3	= 6 ; Input Capture Edge Select
                                 .equ	ICNC3	= 7 ; Input Capture Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3B	= 6 ; Force Output Compare for Channel B
                                 .equ	FOC3A	= 7 ; Force Output Compare for Channel A
                                 
                                 ; TCNT3 - Timer/Counter3 Bytes
                                 .equ	TCNT3H0	= 0 ; Timer/Counter3 Bytes High Bit 8
                                 .equ	TCNT3H1	= 1 ; Timer/Counter3 Bytes High Bit 9
                                 .equ	TCNT3H2	= 2 ; Timer/Counter3 Bytes High Bit 10
                                 .equ	TCNT3H3	= 3 ; Timer/Counter3 Bytes High Bit 11
                                 .equ	TCNT3H4	= 4 ; Timer/Counter3 Bytes High Bit 12
                                 .equ	TCNT3H5	= 5 ; Timer/Counter3 Bytes High Bit 13
                                 .equ	TCNT3H6	= 6 ; Timer/Counter3 Bytes High Bit 14
                                 .equ	TCNT3H7	= 7 ; Timer/Counter3 Bytes High Bit 15
                                 
                                 .equ	TCNT3L0	= 0 ; Timer/Counter3 Bytes Low Bit 0
                                 .equ	TCNT3L1	= 1 ; Timer/Counter3 Bytes Low Bit 1
                                 .equ	TCNT3L2	= 2 ; Timer/Counter3 Bytes Low Bit 2
                                 .equ	TCNT3L3	= 3 ; Timer/Counter3 Bytes Low Bit 3
                                 .equ	TCNT3L4	= 4 ; Timer/Counter3 Bytes Low Bit 4
                                 .equ	TCNT3L5	= 5 ; Timer/Counter3 Bytes Low Bit 5
                                 .equ	TCNT3L6	= 6 ; Timer/Counter3 Bytes Low Bit 6
                                 .equ	TCNT3L7	= 7 ; Timer/Counter3 Bytes Low Bit 7
                                 
                                 ; OCR3A - Timer/Counter3 Output Compare Register Bytes
                                 .equ	OCR3AH0	= 0 ; Timer/Counter3 Output Compare Register Bytes High Bit 8
                                 .equ	OCR3AH1	= 1 ; Timer/Counter3 Output Compare Register Bytes High Bit 9
                                 .equ	OCR3AH2	= 2 ; Timer/Counter3 Output Compare Register Bytes High Bit 10
                                 .equ	OCR3AH3	= 3 ; Timer/Counter3 Output Compare Register Bytes High Bit 11
                                 .equ	OCR3AH4	= 4 ; Timer/Counter3 Output Compare Register Bytes High Bit 12
                                 .equ	OCR3AH5	= 5 ; Timer/Counter3 Output Compare Register Bytes High Bit 13
                                 .equ	OCR3AH6	= 6 ; Timer/Counter3 Output Compare Register Bytes High Bit 14
                                 .equ	OCR3AH7	= 7 ; Timer/Counter3 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR3AL0	= 0 ; Timer/Counter3 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR3AL1	= 1 ; Timer/Counter3 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR3AL2	= 2 ; Timer/Counter3 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR3AL3	= 3 ; Timer/Counter3 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR3AL4	= 4 ; Timer/Counter3 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR3AL5	= 5 ; Timer/Counter3 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR3AL6	= 6 ; Timer/Counter3 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR3AL7	= 7 ; Timer/Counter3 Output Compare Register Bytes Low Bit 7
                                 
                                 ; OCR3B - Timer/Counter3 Output Compare Register Bytes
                                 .equ	OCR3BH0	= 0 ; Timer/Counter3 Output Compare Register Bytes High Bit 8
                                 .equ	OCR3BH1	= 1 ; Timer/Counter3 Output Compare Register Bytes High Bit 9
                                 .equ	OCR3BH2	= 2 ; Timer/Counter3 Output Compare Register Bytes High Bit 10
                                 .equ	OCR3BH3	= 3 ; Timer/Counter3 Output Compare Register Bytes High Bit 11
                                 .equ	OCR3BH4	= 4 ; Timer/Counter3 Output Compare Register Bytes High Bit 12
                                 .equ	OCR3BH5	= 5 ; Timer/Counter3 Output Compare Register Bytes High Bit 13
                                 .equ	OCR3BH6	= 6 ; Timer/Counter3 Output Compare Register Bytes High Bit 14
                                 .equ	OCR3BH7	= 7 ; Timer/Counter3 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR3BL0	= 0 ; Timer/Counter3 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR3BL1	= 1 ; Timer/Counter3 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR3BL2	= 2 ; Timer/Counter3 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR3BL3	= 3 ; Timer/Counter3 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR3BL4	= 4 ; Timer/Counter3 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR3BL5	= 5 ; Timer/Counter3 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR3BL6	= 6 ; Timer/Counter3 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR3BL7	= 7 ; Timer/Counter3 Output Compare Register Bytes Low Bit 7
                                 
                                 ; ICR3 - Timer/Counter3 Input Capture Register Bytes
                                 .equ	ICR3H0	= 0 ; Timer/Counter3 Input Capture Register Bytes High Bit 8
                                 .equ	ICR3H1	= 1 ; Timer/Counter3 Input Capture Register Bytes High Bit 9
                                 .equ	ICR3H2	= 2 ; Timer/Counter3 Input Capture Register Bytes High Bit 10
                                 .equ	ICR3H3	= 3 ; Timer/Counter3 Input Capture Register Bytes High Bit 11
                                 .equ	ICR3H4	= 4 ; Timer/Counter3 Input Capture Register Bytes High Bit 12
                                 .equ	ICR3H5	= 5 ; Timer/Counter3 Input Capture Register Bytes High Bit 13
                                 .equ	ICR3H6	= 6 ; Timer/Counter3 Input Capture Register Bytes High Bit 14
                                 .equ	ICR3H7	= 7 ; Timer/Counter3 Input Capture Register Bytes High Bit 15
                                 
                                 .equ	ICR3L0	= 0 ; Timer/Counter3 Input Capture Register Bytes Low Bit 0
                                 .equ	ICR3L1	= 1 ; Timer/Counter3 Input Capture Register Bytes Low Bit 1
                                 .equ	ICR3L2	= 2 ; Timer/Counter3 Input Capture Register Bytes Low Bit 2
                                 .equ	ICR3L3	= 3 ; Timer/Counter3 Input Capture Register Bytes Low Bit 3
                                 .equ	ICR3L4	= 4 ; Timer/Counter3 Input Capture Register Bytes Low Bit 4
                                 .equ	ICR3L5	= 5 ; Timer/Counter3 Input Capture Register Bytes Low Bit 5
                                 .equ	ICR3L6	= 6 ; Timer/Counter3 Input Capture Register Bytes Low Bit 6
                                 .equ	ICR3L7	= 7 ; Timer/Counter3 Input Capture Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** TC4 *****************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0 ; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1 ; Timer/Counter4 Output Compare Match A Interrupt Enable
                                 .equ	OCIE4B	= 2 ; Timer/Counter4 Output Compare Match B Interrupt Enable
                                 .equ	ICIE4	= 5 ; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0 ; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1 ; Output Compare Flag 4A
                                 .equ	OCF4B	= 2 ; Output Compare Flag 4B
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0 ; Waveform Genration Mode
                                 .equ	WGM41	= 1 ; Waveform Genration Mode
                                 .equ	COM4B0	= 4 ; Compare Output Mode bits
                                 .equ	COM4B1	= 5 ; Compare Output Mode bits
                                 .equ	COM4A0	= 6 ; Compare Output Mode bits
                                 .equ	COM4A1	= 7 ; Compare Output Mode bits
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0 ; Clock Select bits
                                 .equ	CS41	= 1 ; Clock Select bits
                                 .equ	CS42	= 2 ; Clock Select bits
                                 .equ	WGM42	= 3 ; Waveform Generation Mode bit 2
                                 .equ	WGM43	= 4 ; Waveform Generation Mode bit 3
                                 .equ	ICES4	= 6 ; Input Capture Edge Select
                                 .equ	ICNC4	= 7 ; Input Capture Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter4 Control Register C
                                 .equ	FOC4B	= 6 ; Force Output Compare for Channel B
                                 .equ	FOC4A	= 7 ; Force Output Compare for Channel A
                                 
                                 ; TCNT4 - Timer/Counter4 Bytes
                                 .equ	TCNT4H0	= 0 ; Timer/Counter4 Bytes High Bit 8
                                 .equ	TCNT4H1	= 1 ; Timer/Counter4 Bytes High Bit 9
                                 .equ	TCNT4H2	= 2 ; Timer/Counter4 Bytes High Bit 10
                                 .equ	TCNT4H3	= 3 ; Timer/Counter4 Bytes High Bit 11
                                 .equ	TCNT4H4	= 4 ; Timer/Counter4 Bytes High Bit 12
                                 .equ	TCNT4H5	= 5 ; Timer/Counter4 Bytes High Bit 13
                                 .equ	TCNT4H6	= 6 ; Timer/Counter4 Bytes High Bit 14
                                 .equ	TCNT4H7	= 7 ; Timer/Counter4 Bytes High Bit 15
                                 
                                 .equ	TCNT4L0	= 0 ; Timer/Counter4 Bytes Low Bit 0
                                 .equ	TCNT4L1	= 1 ; Timer/Counter4 Bytes Low Bit 1
                                 .equ	TCNT4L2	= 2 ; Timer/Counter4 Bytes Low Bit 2
                                 .equ	TCNT4L3	= 3 ; Timer/Counter4 Bytes Low Bit 3
                                 .equ	TCNT4L4	= 4 ; Timer/Counter4 Bytes Low Bit 4
                                 .equ	TCNT4L5	= 5 ; Timer/Counter4 Bytes Low Bit 5
                                 .equ	TCNT4L6	= 6 ; Timer/Counter4 Bytes Low Bit 6
                                 .equ	TCNT4L7	= 7 ; Timer/Counter4 Bytes Low Bit 7
                                 
                                 ; OCR4A - Timer/Counter4 Output Compare Register Bytes
                                 .equ	OCR4AH0	= 0 ; Timer/Counter4 Output Compare Register Bytes High Bit 8
                                 .equ	OCR4AH1	= 1 ; Timer/Counter4 Output Compare Register Bytes High Bit 9
                                 .equ	OCR4AH2	= 2 ; Timer/Counter4 Output Compare Register Bytes High Bit 10
                                 .equ	OCR4AH3	= 3 ; Timer/Counter4 Output Compare Register Bytes High Bit 11
                                 .equ	OCR4AH4	= 4 ; Timer/Counter4 Output Compare Register Bytes High Bit 12
                                 .equ	OCR4AH5	= 5 ; Timer/Counter4 Output Compare Register Bytes High Bit 13
                                 .equ	OCR4AH6	= 6 ; Timer/Counter4 Output Compare Register Bytes High Bit 14
                                 .equ	OCR4AH7	= 7 ; Timer/Counter4 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR4AL0	= 0 ; Timer/Counter4 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR4AL1	= 1 ; Timer/Counter4 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR4AL2	= 2 ; Timer/Counter4 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR4AL3	= 3 ; Timer/Counter4 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR4AL4	= 4 ; Timer/Counter4 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR4AL5	= 5 ; Timer/Counter4 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR4AL6	= 6 ; Timer/Counter4 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR4AL7	= 7 ; Timer/Counter4 Output Compare Register Bytes Low Bit 7
                                 
                                 ; OCR4B - Timer/Counter4 Output Compare Register Bytes
                                 .equ	OCR4BH0	= 0 ; Timer/Counter4 Output Compare Register Bytes High Bit 8
                                 .equ	OCR4BH1	= 1 ; Timer/Counter4 Output Compare Register Bytes High Bit 9
                                 .equ	OCR4BH2	= 2 ; Timer/Counter4 Output Compare Register Bytes High Bit 10
                                 .equ	OCR4BH3	= 3 ; Timer/Counter4 Output Compare Register Bytes High Bit 11
                                 .equ	OCR4BH4	= 4 ; Timer/Counter4 Output Compare Register Bytes High Bit 12
                                 .equ	OCR4BH5	= 5 ; Timer/Counter4 Output Compare Register Bytes High Bit 13
                                 .equ	OCR4BH6	= 6 ; Timer/Counter4 Output Compare Register Bytes High Bit 14
                                 .equ	OCR4BH7	= 7 ; Timer/Counter4 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR4BL0	= 0 ; Timer/Counter4 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR4BL1	= 1 ; Timer/Counter4 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR4BL2	= 2 ; Timer/Counter4 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR4BL3	= 3 ; Timer/Counter4 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR4BL4	= 4 ; Timer/Counter4 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR4BL5	= 5 ; Timer/Counter4 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR4BL6	= 6 ; Timer/Counter4 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR4BL7	= 7 ; Timer/Counter4 Output Compare Register Bytes Low Bit 7
                                 
                                 ; ICR4 - Timer/Counter4 Input Capture Register Bytes
                                 .equ	ICR4H0	= 0 ; Timer/Counter4 Input Capture Register Bytes High Bit 8
                                 .equ	ICR4H1	= 1 ; Timer/Counter4 Input Capture Register Bytes High Bit 9
                                 .equ	ICR4H2	= 2 ; Timer/Counter4 Input Capture Register Bytes High Bit 10
                                 .equ	ICR4H3	= 3 ; Timer/Counter4 Input Capture Register Bytes High Bit 11
                                 .equ	ICR4H4	= 4 ; Timer/Counter4 Input Capture Register Bytes High Bit 12
                                 .equ	ICR4H5	= 5 ; Timer/Counter4 Input Capture Register Bytes High Bit 13
                                 .equ	ICR4H6	= 6 ; Timer/Counter4 Input Capture Register Bytes High Bit 14
                                 .equ	ICR4H7	= 7 ; Timer/Counter4 Input Capture Register Bytes High Bit 15
                                 
                                 .equ	ICR4L0	= 0 ; Timer/Counter4 Input Capture Register Bytes Low Bit 0
                                 .equ	ICR4L1	= 1 ; Timer/Counter4 Input Capture Register Bytes Low Bit 1
                                 .equ	ICR4L2	= 2 ; Timer/Counter4 Input Capture Register Bytes Low Bit 2
                                 .equ	ICR4L3	= 3 ; Timer/Counter4 Input Capture Register Bytes Low Bit 3
                                 .equ	ICR4L4	= 4 ; Timer/Counter4 Input Capture Register Bytes Low Bit 4
                                 .equ	ICR4L5	= 5 ; Timer/Counter4 Input Capture Register Bytes Low Bit 5
                                 .equ	ICR4L6	= 6 ; Timer/Counter4 Input Capture Register Bytes Low Bit 6
                                 .equ	ICR4L7	= 7 ; Timer/Counter4 Input Capture Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** TC2 *****************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0 ; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2A	= 1 ; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2 ; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0 ; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1 ; Output Compare Flag 2A
                                 .equ	OCF2B	= 2 ; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0 ; Waveform Genration Mode
                                 .equ	WGM21	= 1 ; Waveform Genration Mode
                                 .equ	COM2B0	= 4 ; Compare Output Mode bits
                                 .equ	COM2B1	= 5 ; Compare Output Mode bits
                                 .equ	COM2A0	= 6 ; Compare Output Mode bits
                                 .equ	COM2A1	= 7 ; Compare Output Mode bits
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0 ; Clock Select bits
                                 .equ	CS21	= 1 ; Clock Select bits
                                 .equ	CS22	= 2 ; Clock Select bits
                                 .equ	WGM22	= 3 ; Waveform Generation Mode
                                 .equ	FOC2B	= 6 ; Force Output Compare B
                                 .equ	FOC2A	= 7 ; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT20	= 0 ; Timer/Counter2 Bit 0
                                 .equ	TCNT21	= 1 ; Timer/Counter2 Bit 1
                                 .equ	TCNT22	= 2 ; Timer/Counter2 Bit 2
                                 .equ	TCNT23	= 3 ; Timer/Counter2 Bit 3
                                 .equ	TCNT24	= 4 ; Timer/Counter2 Bit 4
                                 .equ	TCNT25	= 5 ; Timer/Counter2 Bit 5
                                 .equ	TCNT26	= 6 ; Timer/Counter2 Bit 6
                                 .equ	TCNT27	= 7 ; Timer/Counter2 Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B0	= 0 ; Timer/Counter2 Output Compare Register B Bit 0
                                 .equ	OCR2B1	= 1 ; Timer/Counter2 Output Compare Register B Bit 1
                                 .equ	OCR2B2	= 2 ; Timer/Counter2 Output Compare Register B Bit 2
                                 .equ	OCR2B3	= 3 ; Timer/Counter2 Output Compare Register B Bit 3
                                 .equ	OCR2B4	= 4 ; Timer/Counter2 Output Compare Register B Bit 4
                                 .equ	OCR2B5	= 5 ; Timer/Counter2 Output Compare Register B Bit 5
                                 .equ	OCR2B6	= 6 ; Timer/Counter2 Output Compare Register B Bit 6
                                 .equ	OCR2B7	= 7 ; Timer/Counter2 Output Compare Register B Bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A0	= 0 ; Timer/Counter2 Output Compare Register A Bit 0
                                 .equ	OCR2A1	= 1 ; Timer/Counter2 Output Compare Register A Bit 1
                                 .equ	OCR2A2	= 2 ; Timer/Counter2 Output Compare Register A Bit 2
                                 .equ	OCR2A3	= 3 ; Timer/Counter2 Output Compare Register A Bit 3
                                 .equ	OCR2A4	= 4 ; Timer/Counter2 Output Compare Register A Bit 4
                                 .equ	OCR2A5	= 5 ; Timer/Counter2 Output Compare Register A Bit 5
                                 .equ	OCR2A6	= 6 ; Timer/Counter2 Output Compare Register A Bit 6
                                 .equ	OCR2A7	= 7 ; Timer/Counter2 Output Compare Register A Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0 ; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1 ; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2 ; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3 ; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4 ; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5 ; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6 ; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1 ; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** ADC *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0 ; Analog Channel Selection Bits
                                 .equ	MUX1	= 1 ; Analog Channel Selection Bits
                                 .equ	MUX2	= 2 ; Analog Channel Selection Bits
                                 .equ	MUX3	= 3 ; Analog Channel Selection Bits
                                 .equ	ADLAR	= 5 ; Left Adjust Result
                                 .equ	REFS0	= 6 ; Reference Selection Bits
                                 .equ	REFS1	= 7 ; Reference Selection Bits
                                 
                                 ; ADC - ADC Data Register Bytes
                                 .equ	ADCH0	= 0 ; ADC Data Register Bytes High Bit 8
                                 .equ	ADCH1	= 1 ; ADC Data Register Bytes High Bit 9
                                 .equ	ADCH2	= 2 ; ADC Data Register Bytes High Bit 10
                                 .equ	ADCH3	= 3 ; ADC Data Register Bytes High Bit 11
                                 .equ	ADCH4	= 4 ; ADC Data Register Bytes High Bit 12
                                 .equ	ADCH5	= 5 ; ADC Data Register Bytes High Bit 13
                                 .equ	ADCH6	= 6 ; ADC Data Register Bytes High Bit 14
                                 .equ	ADCH7	= 7 ; ADC Data Register Bytes High Bit 15
                                 
                                 .equ	ADCL0	= 0 ; ADC Data Register Bytes Low Bit 0
                                 .equ	ADCL1	= 1 ; ADC Data Register Bytes Low Bit 1
                                 .equ	ADCL2	= 2 ; ADC Data Register Bytes Low Bit 2
                                 .equ	ADCL3	= 3 ; ADC Data Register Bytes Low Bit 3
                                 .equ	ADCL4	= 4 ; ADC Data Register Bytes Low Bit 4
                                 .equ	ADCL5	= 5 ; ADC Data Register Bytes Low Bit 5
                                 .equ	ADCL6	= 6 ; ADC Data Register Bytes Low Bit 6
                                 .equ	ADCL7	= 7 ; ADC Data Register Bytes Low Bit 7
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0 ; ADC Prescaler Select Bits
                                 .equ	ADPS1	= 1 ; ADC Prescaler Select Bits
                                 .equ	ADPS2	= 2 ; ADC Prescaler Select Bits
                                 .equ	ADIE	= 3 ; ADC Interrupt Enable
                                 .equ	ADIF	= 4 ; ADC Interrupt Flag
                                 .equ	ADATE	= 5 ; ADC Auto Trigger Enable
                                 .equ	ADSC	= 6 ; ADC Start Conversion
                                 .equ	ADEN	= 7 ; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0 ; ADC Auto Trigger Source bits
                                 .equ	ADTS1	= 1 ; ADC Auto Trigger Source bits
                                 .equ	ADTS2	= 2 ; ADC Auto Trigger Source bits
                                 .equ	ACME	= 6 ; 
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0 ; 
                                 .equ	ADC1D	= 1 ; 
                                 .equ	ADC2D	= 2 ; 
                                 .equ	ADC3D	= 3 ; 
                                 .equ	ADC4D	= 4 ; 
                                 .equ	ADC5D	= 5 ; 
                                 
                                 
                                 ; ***** AC *****************
                                 ; ACSRA - Analog Comparator Control And Status Register-A
                                 .equ	ACSRA0	= 0 ; Analog Comparator Control And Status Register-A Bit 0
                                 .equ	ACSRA1	= 1 ; Analog Comparator Control And Status Register-A Bit 1
                                 .equ	ACSRA2	= 2 ; Analog Comparator Control And Status Register-A Bit 2
                                 .equ	ACSRA3	= 3 ; Analog Comparator Control And Status Register-A Bit 3
                                 .equ	ACSRA4	= 4 ; Analog Comparator Control And Status Register-A Bit 4
                                 .equ	ACSRA5	= 5 ; Analog Comparator Control And Status Register-A Bit 5
                                 .equ	ACSRA6	= 6 ; Analog Comparator Control And Status Register-A Bit 6
                                 .equ	ACSRA7	= 7 ; Analog Comparator Control And Status Register-A Bit 7
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0 ; Analog Comparator Interrupt Mode Select bits
                                 .equ	ACIS1	= 1 ; Analog Comparator Interrupt Mode Select bits
                                 .equ	ACIC	= 2 ; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3 ; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4 ; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5 ; Analog Compare Output
                                 .equ	ACBG	= 6 ; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7 ; Analog Comparator Disable
                                 
                                 ; ACSRB - Analog Comparator Control And Status Register-B
                                 .equ	ACOE	= 0 ; Analog Comparator Output Enable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0 ; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1 ; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB *****************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0 ; Port B Data Register Bit 0
                                 .equ	PORTB1	= 1 ; Port B Data Register Bit 1
                                 .equ	PORTB2	= 2 ; Port B Data Register Bit 2
                                 .equ	PORTB3	= 3 ; Port B Data Register Bit 3
                                 .equ	PORTB4	= 4 ; Port B Data Register Bit 4
                                 .equ	PORTB5	= 5 ; Port B Data Register Bit 5
                                 .equ	PORTB6	= 6 ; Port B Data Register Bit 6
                                 .equ	PORTB7	= 7 ; Port B Data Register Bit 7
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDRB0	= 0 ; Port B Data Direction Register Bit 0
                                 .equ	DDRB1	= 1 ; Port B Data Direction Register Bit 1
                                 .equ	DDRB2	= 2 ; Port B Data Direction Register Bit 2
                                 .equ	DDRB3	= 3 ; Port B Data Direction Register Bit 3
                                 .equ	DDRB4	= 4 ; Port B Data Direction Register Bit 4
                                 .equ	DDRB5	= 5 ; Port B Data Direction Register Bit 5
                                 .equ	DDRB6	= 6 ; Port B Data Direction Register Bit 6
                                 .equ	DDRB7	= 7 ; Port B Data Direction Register Bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0 ; Port B Input Pins Bit 0
                                 .equ	PINB1	= 1 ; Port B Input Pins Bit 1
                                 .equ	PINB2	= 2 ; Port B Input Pins Bit 2
                                 .equ	PINB3	= 3 ; Port B Input Pins Bit 3
                                 .equ	PINB4	= 4 ; Port B Input Pins Bit 4
                                 .equ	PINB5	= 5 ; Port B Input Pins Bit 5
                                 .equ	PINB6	= 6 ; Port B Input Pins Bit 6
                                 .equ	PINB7	= 7 ; Port B Input Pins Bit 7
                                 
                                 
                                 ; ***** PORTC *****************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0 ; Port C Data Register Bit 0
                                 .equ	PORTC1	= 1 ; Port C Data Register Bit 1
                                 .equ	PORTC2	= 2 ; Port C Data Register Bit 2
                                 .equ	PORTC3	= 3 ; Port C Data Register Bit 3
                                 .equ	PORTC4	= 4 ; Port C Data Register Bit 4
                                 .equ	PORTC5	= 5 ; Port C Data Register Bit 5
                                 .equ	PORTC6	= 6 ; Port C Data Register Bit 6
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDRC0	= 0 ; Port C Data Direction Register Bit 0
                                 .equ	DDRC1	= 1 ; Port C Data Direction Register Bit 1
                                 .equ	DDRC2	= 2 ; Port C Data Direction Register Bit 2
                                 .equ	DDRC3	= 3 ; Port C Data Direction Register Bit 3
                                 .equ	DDRC4	= 4 ; Port C Data Direction Register Bit 4
                                 .equ	DDRC5	= 5 ; Port C Data Direction Register Bit 5
                                 .equ	DDRC6	= 6 ; Port C Data Direction Register Bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0 ; Port C Input Pins Bit 0
                                 .equ	PINC1	= 1 ; Port C Input Pins Bit 1
                                 .equ	PINC2	= 2 ; Port C Input Pins Bit 2
                                 .equ	PINC3	= 3 ; Port C Input Pins Bit 3
                                 .equ	PINC4	= 4 ; Port C Input Pins Bit 4
                                 .equ	PINC5	= 5 ; Port C Input Pins Bit 5
                                 .equ	PINC6	= 6 ; Port C Input Pins Bit 6
                                 
                                 
                                 ; ***** PORTD *****************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0 ; Port D Data Register Bit 0
                                 .equ	PORTD1	= 1 ; Port D Data Register Bit 1
                                 .equ	PORTD2	= 2 ; Port D Data Register Bit 2
                                 .equ	PORTD3	= 3 ; Port D Data Register Bit 3
                                 .equ	PORTD4	= 4 ; Port D Data Register Bit 4
                                 .equ	PORTD5	= 5 ; Port D Data Register Bit 5
                                 .equ	PORTD6	= 6 ; Port D Data Register Bit 6
                                 .equ	PORTD7	= 7 ; Port D Data Register Bit 7
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDRD0	= 0 ; Port D Data Direction Register Bit 0
                                 .equ	DDRD1	= 1 ; Port D Data Direction Register Bit 1
                                 .equ	DDRD2	= 2 ; Port D Data Direction Register Bit 2
                                 .equ	DDRD3	= 3 ; Port D Data Direction Register Bit 3
                                 .equ	DDRD4	= 4 ; Port D Data Direction Register Bit 4
                                 .equ	DDRD5	= 5 ; Port D Data Direction Register Bit 5
                                 .equ	DDRD6	= 6 ; Port D Data Direction Register Bit 6
                                 .equ	DDRD7	= 7 ; Port D Data Direction Register Bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0 ; Port D Input Pins Bit 0
                                 .equ	PIND1	= 1 ; Port D Input Pins Bit 1
                                 .equ	PIND2	= 2 ; Port D Input Pins Bit 2
                                 .equ	PIND3	= 3 ; Port D Input Pins Bit 3
                                 .equ	PIND4	= 4 ; Port D Input Pins Bit 4
                                 .equ	PIND5	= 5 ; Port D Input Pins Bit 5
                                 .equ	PIND6	= 6 ; Port D Input Pins Bit 6
                                 .equ	PIND7	= 7 ; Port D Input Pins Bit 7
                                 
                                 
                                 ; ***** PORTE *****************
                                 ; PORTE - Port E Data Register
                                 .equ	PORTE0	= 0 ; Port E Data Register Bit 0
                                 .equ	PORTE1	= 1 ; Port E Data Register Bit 1
                                 .equ	PORTE2	= 2 ; Port E Data Register Bit 2
                                 .equ	PORTE3	= 3 ; Port E Data Register Bit 3
                                 
                                 ; DDRE - Port E Data Direction Register
                                 .equ	DDRE0	= 0 ; Port E Data Direction Register Bit 0
                                 .equ	DDRE1	= 1 ; Port E Data Direction Register Bit 1
                                 .equ	DDRE2	= 2 ; Port E Data Direction Register Bit 2
                                 .equ	DDRE3	= 3 ; Port E Data Direction Register Bit 3
                                 
                                 ; PINE - Port E Input Pins
                                 .equ	PINE0	= 0 ; Port E Input Pins Bit 0
                                 .equ	PINE1	= 1 ; Port E Input Pins Bit 1
                                 .equ	PINE2	= 2 ; Port E Input Pins Bit 2
                                 .equ	PINE3	= 3 ; Port E Input Pins Bit 3
                                 
                                 
                                 ; ***** TC0 *****************
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B0	= 0 ; Timer/Counter0 Output Compare Register Bit 0
                                 .equ	OCR0B1	= 1 ; Timer/Counter0 Output Compare Register Bit 1
                                 .equ	OCR0B2	= 2 ; Timer/Counter0 Output Compare Register Bit 2
                                 .equ	OCR0B3	= 3 ; Timer/Counter0 Output Compare Register Bit 3
                                 .equ	OCR0B4	= 4 ; Timer/Counter0 Output Compare Register Bit 4
                                 .equ	OCR0B5	= 5 ; Timer/Counter0 Output Compare Register Bit 5
                                 .equ	OCR0B6	= 6 ; Timer/Counter0 Output Compare Register Bit 6
                                 .equ	OCR0B7	= 7 ; Timer/Counter0 Output Compare Register Bit 7
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A0	= 0 ; Timer/Counter0 Output Compare Register Bit 0
                                 .equ	OCR0A1	= 1 ; Timer/Counter0 Output Compare Register Bit 1
                                 .equ	OCR0A2	= 2 ; Timer/Counter0 Output Compare Register Bit 2
                                 .equ	OCR0A3	= 3 ; Timer/Counter0 Output Compare Register Bit 3
                                 .equ	OCR0A4	= 4 ; Timer/Counter0 Output Compare Register Bit 4
                                 .equ	OCR0A5	= 5 ; Timer/Counter0 Output Compare Register Bit 5
                                 .equ	OCR0A6	= 6 ; Timer/Counter0 Output Compare Register Bit 6
                                 .equ	OCR0A7	= 7 ; Timer/Counter0 Output Compare Register Bit 7
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT00	= 0 ; Timer/Counter0 Bit 0
                                 .equ	TCNT01	= 1 ; Timer/Counter0 Bit 1
                                 .equ	TCNT02	= 2 ; Timer/Counter0 Bit 2
                                 .equ	TCNT03	= 3 ; Timer/Counter0 Bit 3
                                 .equ	TCNT04	= 4 ; Timer/Counter0 Bit 4
                                 .equ	TCNT05	= 5 ; Timer/Counter0 Bit 5
                                 .equ	TCNT06	= 6 ; Timer/Counter0 Bit 6
                                 .equ	TCNT07	= 7 ; Timer/Counter0 Bit 7
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0 ; Clock Select
                                 .equ	CS01	= 1 ; Clock Select
                                 .equ	CS02	= 2 ; Clock Select
                                 .equ	WGM02	= 3 ; 
                                 .equ	FOC0B	= 6 ; Force Output Compare B
                                 .equ	FOC0A	= 7 ; Force Output Compare A
                                 
                                 ; TCCR0A - Timer/Counter Control Register A
                                 .equ	WGM00	= 0 ; Waveform Generation Mode
                                 .equ	WGM01	= 1 ; Waveform Generation Mode
                                 .equ	COM0B0	= 4 ; Compare Output Mode, Fast PWM
                                 .equ	COM0B1	= 5 ; Compare Output Mode, Fast PWM
                                 .equ	COM0A0	= 6 ; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7 ; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0 ; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1 ; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2 ; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0 ; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1 ; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2 ; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 
                                 
                                 ; ***** EXINT *****************
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0 ; External Interrupt Sense Control 0 Bits
                                 .equ	ISC01	= 1 ; External Interrupt Sense Control 0 Bits
                                 .equ	ISC10	= 2 ; External Interrupt Sense Control 1 Bits
                                 .equ	ISC11	= 3 ; External Interrupt Sense Control 1 Bits
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0 ; External Interrupt Request 1 Enable
                                 .equ	INT1	= 1 ; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0 ; External Interrupt Flags
                                 .equ	INTF1	= 1 ; External Interrupt Flags
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0 ; Pin Change Interrupt Enables
                                 .equ	PCIE1	= 1 ; Pin Change Interrupt Enables
                                 .equ	PCIE2	= 2 ; Pin Change Interrupt Enables
                                 .equ	PCIE3	= 3 ; Pin Change Interrupt Enables
                                 
                                 ; PCMSK3 - Pin Change Mask Register 3
                                 .equ	PCINT24	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT25	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT26	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT27	= 3 ; Pin Change Enable Masks
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT17	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT18	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT19	= 3 ; Pin Change Enable Masks
                                 .equ	PCINT20	= 4 ; Pin Change Enable Masks
                                 .equ	PCINT21	= 5 ; Pin Change Enable Masks
                                 .equ	PCINT22	= 6 ; Pin Change Enable Masks
                                 .equ	PCINT23	= 7 ; Pin Change Enable Masks
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT9	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT10	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT11	= 3 ; Pin Change Enable Masks
                                 .equ	PCINT12	= 4 ; Pin Change Enable Masks
                                 .equ	PCINT13	= 5 ; Pin Change Enable Masks
                                 .equ	PCINT14	= 6 ; Pin Change Enable Masks
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT1	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT2	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT3	= 3 ; Pin Change Enable Masks
                                 .equ	PCINT4	= 4 ; Pin Change Enable Masks
                                 .equ	PCINT5	= 5 ; Pin Change Enable Masks
                                 .equ	PCINT6	= 6 ; Pin Change Enable Masks
                                 .equ	PCINT7	= 7 ; Pin Change Enable Masks
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0 ; Pin Change Interrupt Flags
                                 .equ	PCIF1	= 1 ; Pin Change Interrupt Flags
                                 .equ	PCIF2	= 2 ; Pin Change Interrupt Flags
                                 .equ	PCIF3	= 3 ; Pin Change Interrupt Flags
                                 
                                 
                                 ; ***** SPI0 *****************
                                 ; SPDR0 - SPI Data Register
                                 .equ	SPDR00	= 0 ; SPI Data Register Bit 0
                                 .equ	SPDR01	= 1 ; SPI Data Register Bit 1
                                 .equ	SPDR02	= 2 ; SPI Data Register Bit 2
                                 .equ	SPDR03	= 3 ; SPI Data Register Bit 3
                                 .equ	SPDR04	= 4 ; SPI Data Register Bit 4
                                 .equ	SPDR05	= 5 ; SPI Data Register Bit 5
                                 .equ	SPDR06	= 6 ; SPI Data Register Bit 6
                                 .equ	SPDR07	= 7 ; SPI Data Register Bit 7
                                 
                                 ; SPSR0 - SPI Status Register
                                 .equ	SPI2X	= 0 ; Double SPI Speed Bit
                                 .equ	WCOL	= 6 ; Write Collision Flag
                                 .equ	SPIF	= 7 ; SPI Interrupt Flag
                                 
                                 ; SPCR0 - SPI Control Register
                                 .equ	SPR0	= 0 ; SPI Clock Rate Selects
                                 .equ	SPR1	= 1 ; SPI Clock Rate Selects
                                 .equ	CPHA	= 2 ; Clock Phase
                                 .equ	CPOL	= 3 ; Clock polarity
                                 .equ	MSTR	= 4 ; Master/Slave Select
                                 .equ	DORD	= 5 ; Data Order
                                 .equ	SPE	= 6 ; SPI Enable
                                 .equ	SPIE	= 7 ; SPI Interrupt Enable
                                 
                                 
                                 ; ***** SPI1 *****************
                                 ; SPDR1 - SPI Data Register
                                 .equ	SPDR10	= 0 ; SPI Data Register Bit 0
                                 .equ	SPDR11	= 1 ; SPI Data Register Bit 1
                                 .equ	SPDR12	= 2 ; SPI Data Register Bit 2
                                 .equ	SPDR13	= 3 ; SPI Data Register Bit 3
                                 .equ	SPDR14	= 4 ; SPI Data Register Bit 4
                                 .equ	SPDR15	= 5 ; SPI Data Register Bit 5
                                 .equ	SPDR16	= 6 ; SPI Data Register Bit 6
                                 .equ	SPDR17	= 7 ; SPI Data Register Bit 7
                                 
                                 ; SPSR1 - SPI Status Register
                                 .equ	SPI2X1	= 0 ; Double SPI Speed Bit
                                 .equ	WCOL1	= 6 ; Write Collision Flag
                                 .equ	SPIF1	= 7 ; SPI Interrupt Flag
                                 
                                 ; SPCR1 - SPI Control Register
                                 .equ	SPR10	= 0 ; SPI Clock Rate Selects
                                 .equ	SPR11	= 1 ; SPI Clock Rate Selects
                                 .equ	CPHA1	= 2 ; Clock Phase
                                 .equ	CPOL1	= 3 ; Clock polarity
                                 .equ	MSTR1	= 4 ; Master/Slave Select
                                 .equ	DORD1	= 5 ; Data Order
                                 .equ	SPE1	= 6 ; SPI Enable
                                 .equ	SPIE1	= 7 ; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WDT *****************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDE	= 3 ; Watch Dog Enable
                                 .equ	WDCE	= 4 ; Watchdog Change Enable
                                 .equ	WDP0	= 0 ; Watchdog Timer Prescaler Bits
                                 .equ	WDP1	= 1 ; Watchdog Timer Prescaler Bits
                                 .equ	WDP2	= 2 ; Watchdog Timer Prescaler Bits
                                 .equ	WDP3	= 5 ; Watchdog Timer Prescaler Bits
                                 .equ	WDIE	= 6 ; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7 ; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** PTC *****************
                                 ; ***** CPU *****************
                                 ; PRR0 - Power Reduction Register 0
                                 .equ	PRADC	= 0 ; Power Reduction ADC
                                 .equ	PRUSART0	= 1 ; Power Reduction USART0
                                 .equ	PRSPI0	= 2 ; Power Reduction Serial Peripheral Interface 1
                                 .equ	PRTIM1	= 3 ; Power Reduction Timer/Counter1
                                 .equ	PRUSART1	= 4 ; Power Reduction USART1
                                 .equ	PRTIM0	= 5 ; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6 ; Power Reduction Timer/Counter2
                                 .equ	PRTWI0	= 7 ; Power Reduction TWI0
                                 
                                 ; PRR1 - Power Reduction Register 1
                                 .equ	PRTIM3	= 0 ; Power Reduction Timer/Counter3
                                 .equ	PRSPI1	= 2 ; Power Reduction Serial Peripheral Interface 1
                                 .equ	PRTIM4	= 3 ; Power Reduction Timer/Counter4
                                 .equ	PRPTC	= 4 ; Power Reduction Peripheral Touch Controller
                                 .equ	PRTWI1	= 5 ; Power Reduction TWI1
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	OSCCAL0	= 0 ; Oscillator Calibration
                                 .equ	OSCCAL1	= 1 ; Oscillator Calibration
                                 .equ	OSCCAL2	= 2 ; Oscillator Calibration
                                 .equ	OSCCAL3	= 3 ; Oscillator Calibration
                                 .equ	OSCCAL4	= 4 ; Oscillator Calibration
                                 .equ	OSCCAL5	= 5 ; Oscillator Calibration
                                 .equ	OSCCAL6	= 6 ; Oscillator Calibration
                                 .equ	OSCCAL7	= 7 ; Oscillator Calibration
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0 ; Clock Prescaler Select Bits
                                 .equ	CLKPS1	= 1 ; Clock Prescaler Select Bits
                                 .equ	CLKPS2	= 2 ; Clock Prescaler Select Bits
                                 .equ	CLKPS3	= 3 ; Clock Prescaler Select Bits
                                 .equ	CLKPCE	= 7 ; Clock Prescaler Change Enable
                                 
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0 ; Carry Flag
                                 .equ	SREG_Z	= 1 ; Zero Flag
                                 .equ	SREG_N	= 2 ; Negative Flag
                                 .equ	SREG_V	= 3 ; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4 ; Sign Bit
                                 .equ	SREG_H	= 5 ; Half Carry Flag
                                 .equ	SREG_T	= 6 ; Bit Copy Storage
                                 .equ	SREG_I	= 7 ; Global Interrupt Enable
                                 
                                 ; SP - Stack Pointer
                                 .equ	SPH0	= 0 ; Stack Pointer High Bit 8
                                 .equ	SPH1	= 1 ; Stack Pointer High Bit 9
                                 .equ	SPH2	= 2 ; Stack Pointer High Bit 10
                                 .equ	SPH3	= 3 ; Stack Pointer High Bit 11
                                 
                                 .equ	SPL0	= 0 ; Stack Pointer Low Bit 0
                                 .equ	SPL1	= 1 ; Stack Pointer Low Bit 1
                                 .equ	SPL2	= 2 ; Stack Pointer Low Bit 2
                                 .equ	SPL3	= 3 ; Stack Pointer Low Bit 3
                                 .equ	SPL4	= 4 ; Stack Pointer Low Bit 4
                                 .equ	SPL5	= 5 ; Stack Pointer Low Bit 5
                                 .equ	SPL6	= 6 ; Stack Pointer Low Bit 6
                                 .equ	SPL7	= 7 ; Stack Pointer Low Bit 7
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ	SPMEN	= 0 ; Store Program Memory
                                 .equ	PGERS	= 1 ; Page Erase
                                 .equ	PGWRT	= 2 ; Page Write
                                 .equ	BLBSET	= 3 ; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4 ; Read-While-Write section read enable
                                 .equ	SIGRD	= 5 ; Signature Row Read
                                 .equ	RWWSB	= 6 ; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7 ; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0 ; 
                                 .equ	IVSEL	= 1 ; 
                                 .equ	PUD	= 4 ; 
                                 .equ	BODSE	= 5 ; BOD Sleep Enable
                                 .equ	BODS	= 6 ; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0 ; Power-on reset flag
                                 .equ	EXTRF	= 1 ; External Reset Flag
                                 .equ	BORF	= 2 ; Brown-out Reset Flag
                                 .equ	WDRF	= 3 ; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0 ; Sleep Enable
                                 .equ	SM0	= 1 ; Sleep Mode Select Bits
                                 .equ	SM1	= 2 ; Sleep Mode Select Bits
                                 .equ	SM2	= 3 ; Sleep Mode Select Bits
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0 ; General Purpose I/O Register 2 Bit 0
                                 .equ	GPIOR21	= 1 ; General Purpose I/O Register 2 Bit 1
                                 .equ	GPIOR22	= 2 ; General Purpose I/O Register 2 Bit 2
                                 .equ	GPIOR23	= 3 ; General Purpose I/O Register 2 Bit 3
                                 .equ	GPIOR24	= 4 ; General Purpose I/O Register 2 Bit 4
                                 .equ	GPIOR25	= 5 ; General Purpose I/O Register 2 Bit 5
                                 .equ	GPIOR26	= 6 ; General Purpose I/O Register 2 Bit 6
                                 .equ	GPIOR27	= 7 ; General Purpose I/O Register 2 Bit 7
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0 ; General Purpose I/O Register 1 Bit 0
                                 .equ	GPIOR11	= 1 ; General Purpose I/O Register 1 Bit 1
                                 .equ	GPIOR12	= 2 ; General Purpose I/O Register 1 Bit 2
                                 .equ	GPIOR13	= 3 ; General Purpose I/O Register 1 Bit 3
                                 .equ	GPIOR14	= 4 ; General Purpose I/O Register 1 Bit 4
                                 .equ	GPIOR15	= 5 ; General Purpose I/O Register 1 Bit 5
                                 .equ	GPIOR16	= 6 ; General Purpose I/O Register 1 Bit 6
                                 .equ	GPIOR17	= 7 ; General Purpose I/O Register 1 Bit 7
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0 ; General Purpose I/O Register 0 Bit 0
                                 .equ	GPIOR01	= 1 ; General Purpose I/O Register 0 Bit 1
                                 .equ	GPIOR02	= 2 ; General Purpose I/O Register 0 Bit 2
                                 .equ	GPIOR03	= 3 ; General Purpose I/O Register 0 Bit 3
                                 .equ	GPIOR04	= 4 ; General Purpose I/O Register 0 Bit 4
                                 .equ	GPIOR05	= 5 ; General Purpose I/O Register 0 Bit 5
                                 .equ	GPIOR06	= 6 ; General Purpose I/O Register 0 Bit 6
                                 .equ	GPIOR07	= 7 ; General Purpose I/O Register 0 Bit 7
                                 
                                 
                                 ; ***** EEPROM *****************
                                 ; EEAR - EEPROM Address Register Bytes
                                 .equ	EEARH0	= 0 ; EEPROM Address Register Bytes High Bit 8
                                 .equ	EEARH1	= 1 ; EEPROM Address Register Bytes High Bit 9
                                 
                                 .equ	EEARL0	= 0 ; EEPROM Address Register Bytes Low Bit 0
                                 .equ	EEARL1	= 1 ; EEPROM Address Register Bytes Low Bit 1
                                 .equ	EEARL2	= 2 ; EEPROM Address Register Bytes Low Bit 2
                                 .equ	EEARL3	= 3 ; EEPROM Address Register Bytes Low Bit 3
                                 .equ	EEARL4	= 4 ; EEPROM Address Register Bytes Low Bit 4
                                 .equ	EEARL5	= 5 ; EEPROM Address Register Bytes Low Bit 5
                                 .equ	EEARL6	= 6 ; EEPROM Address Register Bytes Low Bit 6
                                 .equ	EEARL7	= 7 ; EEPROM Address Register Bytes Low Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0 ; EEPROM Data Register Bit 0
                                 .equ	EEDR1	= 1 ; EEPROM Data Register Bit 1
                                 .equ	EEDR2	= 2 ; EEPROM Data Register Bit 2
                                 .equ	EEDR3	= 3 ; EEPROM Data Register Bit 3
                                 .equ	EEDR4	= 4 ; EEPROM Data Register Bit 4
                                 .equ	EEDR5	= 5 ; EEPROM Data Register Bit 5
                                 .equ	EEDR6	= 6 ; EEPROM Data Register Bit 6
                                 .equ	EEDR7	= 7 ; EEPROM Data Register Bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0 ; EEPROM Read Enable
                                 .equ	EEPE	= 1 ; EEPROM Write Enable
                                 .equ	EEMPE	= 2 ; EEPROM Master Write Enable
                                 .equ	EERIE	= 3 ; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4 ; EEPROM Programming Mode Bits
                                 .equ	EEPM1	= 5 ; EEPROM Programming Mode Bits
                                 
                                 
                                 ; ***** FUSE *****************
                                 ; EXTENDED - 
                                 .equ	BODLEVEL0	= 0 ; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1 ; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2 ; Brown-out Detector trigger level
                                 .equ	CFD	= 3 ; Clock Failure Detection
                                 
                                 ; HIGH - 
                                 .equ	BOOTRST	= 0 ; Boot Reset vector Enabled
                                 .equ	BOOTSZ0	= 1 ; Select boot size
                                 .equ	BOOTSZ1	= 2 ; Select boot size
                                 .equ	EESAVE	= 3 ; Preserve EEPROM through the Chip Erase cycle
                                 .equ	WDTON	= 4 ; Watch-dog Timer always on
                                 .equ	SPIEN	= 5 ; Serial program downloading (SPI) enabled
                                 .equ	DWEN	= 6 ; Debug Wire enable
                                 .equ	RSTDISBL	= 7 ; Reset Disabled (Enable PC6 as i/o pin)
                                 
                                 ; LOW - 
                                 .equ	SUT_CKSEL0	= 0 ; Select Clock Source
                                 .equ	SUT_CKSEL1	= 1 ; Select Clock Source
                                 .equ	SUT_CKSEL2	= 2 ; Select Clock Source
                                 .equ	SUT_CKSEL3	= 3 ; Select Clock Source
                                 .equ	SUT_CKSEL4	= 4 ; Select Clock Source
                                 .equ	SUT_CKSEL5	= 5 ; Select Clock Source
                                 .equ	CKOUT	= 6 ; Clock output on PORTB0
                                 .equ	CKDIV8	= 7 ; Divide clock by 8 internally
                                 
                                 
                                 ; ***** LOCKBIT *****************
                                 ; LOCKBIT - 
                                 .equ	LB1	= 0 ; Memory Lock
                                 .equ	LB2	= 1 ; Memory Lock
                                 .equ	BLB01	= 2 ; Boot Loader Protection Mode
                                 .equ	BLB02	= 3 ; Boot Loader Protection Mode
                                 .equ	BLB11	= 4 ; Boot Loader Protection Mode
                                 .equ	BLB12	= 5 ; Boot Loader Protection Mode
                                 
                                 
                                 ; ***** CFD *****************
                                 ; XFDCSR - XOSC Failure Detection Control and Status Register
                                 .equ	XFDIE	= 0 ; Failure Detection Interrupt Enable
                                 .equ	XFDIF	= 1 ; Failure Detection Interrupt Flag
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHSTART	= 0x0000 ; Note: Word address
                                 .equ	FLASHEND	= 0x3FFF ; Note: Word address
                                 .equ	FLASHPAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION1START	= 0x3F00 ; Note: Word address
                                 .equ	BOOTSECTION1END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION1PAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION2START	= 0x3E00 ; Note: Word address
                                 .equ	BOOTSECTION2END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION2PAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION3START	= 0x3C00 ; Note: Word address
                                 .equ	BOOTSECTION3END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION3PAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION4START	= 0x3800 ; Note: Word address
                                 .equ	BOOTSECTION4END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION4PAGESIZE	= 0x0080 ;
                                 
                                 .equ	IOEND	= 0x00FF
                                 
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08FF
                                 
                                 .equ	E2END	= 0x03FF
                                 .equ	EEPROMEND	= 0x03FF
                                 .equ	EEADRBITS	= 10
                                 
                                 .equ	XRAMEND	= 0x0000
                                 
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	PAGESIZE	= 0x0080 ;
                                 
                                 .equ	FIRSTBOOTSTART	= 0x7E00 ; Note: Word address
                                 .equ	FIRSTBOOTPAGESIZE	= 0x0080 ;
                                 .equ	FIRSTBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	SECONDBOOTSTART	= 0x7C00 ; Note: Word address
                                 .equ	SECONDBOOTPAGESIZE	= 0x0080 ;
                                 .equ	SECONDBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	THIRDBOOTSTART	= 0x7800 ; Note: Word address
                                 .equ	THIRDBOOTPAGESIZE	= 0x0080 ;
                                 .equ	THIRDBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	FOURTHBOOTSTART	= 0x7000 ; Note: Word address
                                 .equ	FOURTHBOOTPAGESIZE	= 0x0080 ;
                                 .equ	FOURTHBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	 SMALLBOOTSTART	= FIRSTBOOTSTART ;
                                 .equ	 LARGEBOOTSTART	= FOURTHBOOTSTART ;
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	 = 0x0002 ; External Interrupt Request 0
                                 .equ	INT1addr	 = 0x0004 ; External Interrupt Request 1
                                 .equ	PCINT0addr	 = 0x0006 ; Pin Change Interrupt Request 0
                                 .equ	PCINT1addr	 = 0x0008 ; Pin Change Interrupt Request 1
                                 .equ	PCINT2addr	 = 0x000A ; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	 = 0x000C ; Watchdog Time-out Interrupt
                                 .equ	TIMER2_COMPAaddr	 = 0x000E ; Timer/Counter2 Compare Match A
                                 .equ	TIMER2_COMPBaddr	 = 0x0010 ; Timer/Counter2 Compare Match B
                                 .equ	TIMER2_OVFaddr	 = 0x0012 ; Timer/Counter2 Overflow
                                 .equ	TIMER1_CAPTaddr	 = 0x0014 ; Timer/Counter1 Capture Event
                                 .equ	TIMER1_COMPAaddr	 = 0x0016 ; Timer/Counter1 Compare Match A
                                 .equ	TIMER1_COMPBaddr	 = 0x0018 ; Timer/Counter1 Compare Match B
                                 .equ	TIMER1_OVFaddr	 = 0x001A ; Timer/Counter1 Overflow
                                 .equ	TIMER0_COMPAaddr	 = 0x001C ; TimerCounter0 Compare Match A
                                 .equ	TIMER0_COMPBaddr	 = 0x001E ; TimerCounter0 Compare Match B
                                 .equ	TIMER0_OVFaddr	 = 0x0020 ; Timer/Couner0 Overflow
                                 .equ	SPI0_STCaddr	 = 0x0022 ; SPI Serial Transfer Complete
                                 .equ	USART0_RXaddr	 = 0x0024 ; USART0 Rx Complete
                                 .equ	USART0_UDREaddr	 = 0x0026 ; USART0, Data Register Empty
                                 .equ	USART0_TXaddr	 = 0x0028 ; USART0 Tx Complete
                                 .equ	ADCaddr	 = 0x002A ; ADC Conversion Complete
                                 .equ	EE_READYaddr	 = 0x002C ; EEPROM Ready
                                 .equ	ANALOG_COMPaddr	 = 0x002E ; Analog Comparator
                                 .equ	TWI0addr	 = 0x0030 ; Two-wire Serial Interface
                                 .equ	SPM_Readyaddr	 = 0x0032 ; Store Program Memory Read
                                 .equ	USART0_STARTaddr	 = 0x0034 ; USART0 Start frame detection
                                 .equ	PCINT3addr	 = 0x0036 ; Pin Change Interrupt Request 3
                                 .equ	USART1_RXaddr	 = 0x0038 ; USART1 Rx Complete
                                 .equ	USART1_UDREaddr	 = 0x003A ; USART1, Data Register Empty
                                 .equ	USART1_TXaddr	 = 0x003C ; USART1 Tx Complete
                                 .equ	USART1_STARTaddr	 = 0x003E ; USART1 Start frame detection
                                 .equ	TIMER3_CAPTaddr	 = 0x0040 ; Timer/Counter3 Capture Event
                                 .equ	TIMER3_COMPAaddr	 = 0x0042 ; Timer/Counter3 Compare Match A
                                 .equ	TIMER3_COMPBaddr	 = 0x0044 ; Timer/Counter3 Compare Match B
                                 .equ	TIMER3_OVFaddr	 = 0x0046 ; Timer/Counter3 Overflow
                                 .equ	CFDaddr	 = 0x0048 ; Clock failure detection interrupt
                                 .equ	PTC_EOCaddr	 = 0x004A ; PTC End of conversion
                                 .equ	PTC_WCOMPaddr	 = 0x004C ; PTC Window comparator mode
                                 .equ	SPI1_STCaddr	 = 0x004E ; SPI1 Serial Transfer Complete
                                 .equ	TWI1addr	 = 0x0050 ; TWI Transfer Complete
                                 .equ	TIMER4_CAPTaddr	 = 0x0052 ; Timer/Counter4 Capture Event
                                 .equ	TIMER4_COMPAaddr	 = 0x0054 ; Timer/Counter4 Compare Match A
                                 .equ	TIMER4_COMPBaddr	 = 0x0056 ; Timer/Counter4 Compare Match B
                                 .equ	TIMER4_OVFaddr	 = 0x0058 ; Timer/Counter4 Overflow
                                 
                                 .equ	INT_VECTORS_SIZE	= 90 ; size in words
                                 
                                 #endif /* _M328PBDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 
                                 
                                 ; bin_clock.asm
                                 ;
                                 ; Created: 20/07/2017 10:17:14
                                 ; Author : pmg
                                 ;
                                 
                                 
                                 .def RSEC = R2
                                 .def RMIN = R3
                                 .def RHR  = R4
                                 .def RDAY = R5
                                 .def RMTH = R6
                                 .def RYR  = R7
                                 
                                 .def RLINE = R19
                                 
                                 ; Interrupt Vector Table
                                 .ORG $000
000000 940c 00ee                 jmp RESET			; Reset Handler
000002 940c 0034                 jmp EXT_INT0		; IRQ0 Handler
000004 940c 0034                 jmp EXT_INT1		; IRQ1 Handler
000006 940c 0034                 jmp PC_INT0
000008 940c 0034                 jmp PC_INT1
00000a 940c 0034                 jmp PC_INT2
00000c 940c 0034                 jmp WDT
00000e 940c 0034                 jmp TIM2_COMPA		; Timer2 Compare Handler
000010 940c 0034                 jmp TIM2_COMPB
000012 940c 0034                 jmp TIM2_OVF		; Timer2 Overflow Handler
000014 940c 0034                 jmp TIM1_CAPT		; Timer1 Capture Handler
000016 940c 0035                 jmp TIM1_COMPA		; Timer1 CompareA Handler
000018 940c 0034                 jmp TIM1_COMPB		; Timer1 CompareB Handler
00001a 940c 0034                 jmp TIM1_OVF		; Timer1 Overflow Handler
00001c 940c 00a3                 jmp TIM0_COMPA
00001e 940c 0034                 jmp TIM0_COMPB
000020 940c 0034                 jmp TIM0_OVF		; Timer0 Overflow Handler
000022 940c 0034                 jmp SPI_STC			; SPI Transfer Complete Handler
000024 940c 0034                 jmp USART_RXC		; USART RX Complete Handler
000026 940c 0034                 jmp USART_UDRE		; UDR Empty Handler
000028 940c 0034                 jmp USART_TXC		; USART TX Complete Handler
00002a 940c 0034                 jmp ADCC			; ADC Conversion Complete Handler
00002c 940c 0034                 jmp EE_RDY			; EEPROM Ready Handler
00002e 940c 0034                 jmp ANA_COMP		; Analog Comparator Handler
000030 940c 0034                 jmp TWSI			; Two-wire Serial Interface Handler
000032 940c 0034                 jmp SPM_RDY		; Store Program Memory Ready Handler
                                 
                                 ; Unused interrupts
                                 EXT_INT0:
                                 EXT_INT1:
                                 PC_INT0:
                                 PC_INT1:
                                 PC_INT2:
                                 WDT:
                                 TIM2_COMPA:
                                 TIM2_COMPB:
                                 TIM2_OVF:
                                 TIM1_CAPT:
                                 TIM1_COMPB:
                                 TIM1_OVF:
                                 TIM0_COMPB:
                                 TIM0_OVF:
                                 SPI_STC:
                                 USART_RXC:
                                 USART_UDRE:
                                 USART_TXC:
                                 ADCC:
                                 EE_RDY:
                                 ANA_COMP:
                                 TWSI:
                                 SPM_RDY:
000034 9518                      reti
                                 
                                 
                                 ; =============== 1 second timer ===============
                                 TIM1_COMPA:
                                 
                                 ;increment lower digit of seconds
000035 2d02                      mov R16,RSEC
000036 700f                      andi R16,0x0F
000037 2d12                      mov R17,RSEC
000038 7f10                      andi R17,0xF0 ;split seconds into lower digit (R16) and upper (R17)
000039 3009                      cpi R16,9 ;if lower digit at 9
00003a f021                      breq inc_sech ;branch to tens increment
00003b 9503                      inc R16
00003c 2b01                      or R16,R17
00003d 2e20                      mov RSEC,R16
00003e 9518                      reti
                                 
                                 ;increment upper digit of seconds
                                 inc_sech:
00003f 3510                      cpi R17,0x50 ;if upper digit at 5
000040 f021                      breq inc_minl ;branch to minutes increment
000041 e100                      ldi R16,0x10
000042 0f10                      add R17,R16 ;otherwise increment the upper digit
000043 2e21                      mov RSEC,R17 ;and save the thing (R17 contains 0 for lower digit)
000044 9518                      reti
                                 
                                 
                                 ;increment lower digit of minutes
                                 inc_minl:
000045 2422                      clr RSEC ;move 0 to seconds
                                 
000046 2d03                      mov R16,RMIN
000047 700f                      andi R16,0x0F
000048 2d13                      mov R17,RMIN
000049 7f10                      andi R17,0xF0 ;split minutes into lower digit (R16) and upper (R17)
00004a 3009                      cpi R16,9 ;if lower digit at 9
00004b f021                      breq inc_minh ;branch to tens increment
00004c 9503                      inc R16
00004d 2b01                      or R16,R17
00004e 2e30                      mov RMIN,R16
00004f 9518                      reti
                                 
                                 ;increment upper digit of minutes
                                 inc_minh:
000050 3510                      cpi R17,0x50 ;if upper digit at 5
000051 f021                      breq inc_hrl ;branch to hours increment
000052 e100                      ldi R16,0x10
000053 0f10                      add R17,R16 ;otherwise increment the upper digit
000054 2e31                      mov RMIN,R17 ;and save the thing (R17 contains 0 for lower digit)
000055 9518                      reti
                                 
                                 
                                 ;increment lower digit of hours
                                 inc_hrl:
000056 2433                      clr RMIN ;move 0 to seconds
                                 
000057 2d04                      mov R16,RHR
000058 3203                      cpi R16,0x23 ;if 23 hours
000059 f069                      breq inc_dayl ;increment day
00005a 700f                      andi R16,0x0F
00005b 2d14                      mov R17,RHR
00005c 7f10                      andi R17,0xF0 ;split hours into lower digit (R16) and upper (R17)
00005d 3009                      cpi R16,9 ;if lower digit at 9
00005e f021                      breq inc_hrh ;branch to tens increment
00005f 9503                      inc R16
000060 2b01                      or R16,R17
000061 2e40                      mov RHR,R16
000062 9518                      reti
                                 
                                 ;increment upper digit of hours
                                 inc_hrh:
000063 e100                      ldi R16,0x10
000064 0f10                      add R17,R16 ;otherwise increment the upper digit
000065 2e41                      mov RHR,R17 ;and save the thing (R17 contains 0 for lower digit)
000066 9518                      reti
                                 
                                 
                                 ;increment lower digit of day
                                 inc_dayl:
000067 2444                      clr RHR ;clear hours
                                 ;TODO: days
                                 
                                 ;need a strategy here. First, let's see if month has 31 days
000068 2d06                      mov R16,RMTH
000069 3001                      cpi R16,0x01
00006a f0c1                      breq mth31
00006b 3003                      cpi R16,0x03
00006c f0b1                      breq mth31
00006d 3005                      cpi R16,0x05
00006e f0a1                      breq mth31
00006f 3007                      cpi R16,0x07
000070 f091                      breq mth31
000071 3008                      cpi R16,0x08
000072 f081                      breq mth31
000073 3100                      cpi R16,0x10
000074 f071                      breq mth31
000075 3102                      cpi R16,0x12
000076 f061                      breq mth31
                                 ;Or if it has 30
000077 3004                      cpi R16,0x04
000078 f071                      breq mth30
000079 3006                      cpi R16,0x06
00007a f061                      breq mth30
00007b 3009                      cpi R16,0x09
00007c f051                      breq mth30
00007d 3101                      cpi R16,0x11
00007e f041                      breq mth30
                                 ;otherwise it's february
                                 ;is it a leap year?
00007f 2d07                      mov R16,RYR
000080 7003                      andi R16,0b11 ;divisible by 4?
000081 f469                      brne mth28
000082 c008                      rjmp mth29
                                 
                                 mth31:
000083 2d05                      mov R16,RDAY
000084 3301                      cpi R16,0x31 ;if last day of month
000085 f0d1                      breq inc_mthl ;increment month
000086 c00c                      rjmp mth_cont
                                 
                                 mth30:
000087 2d05                      mov R16,RDAY
000088 3300                      cpi R16,0x30 ;if last day of month
000089 f0b1                      breq inc_mthl ;increment month
00008a c008                      rjmp mth_cont
                                 
                                 mth29:
00008b 2d05                      mov R16,RDAY
00008c 3209                      cpi R16,0x29 ;if last day of month
00008d f091                      breq inc_mthl ;increment month
00008e c004                      rjmp mth_cont
                                 
                                 mth28:
00008f 2d05                      mov R16,RDAY
000090 3208                      cpi R16,0x28 ;if last day of month
000091 f071                      breq inc_mthl ;increment month
000092 c000                      rjmp mth_cont
                                 
                                 mth_cont:
000093 700f                      andi R16,0x0F
000094 2d15                      mov R17,RDAY
000095 7f10                      andi R17,0xF0 ;split days into lower digit (R16) and upper (R17)
000096 3009                      cpi R16,9 ;if lower digit at 9
000097 f021                      breq inc_dayh ;branch to tens increment
000098 9503                      inc R16
000099 2b01                      or R16,R17
00009a 2e50                      mov RDAY,R16
00009b 9518                      reti
                                 
                                 ;increment upper digit of hours
                                 inc_dayh:
00009c e100                      ldi R16,0x10
00009d 0f10                      add R17,R16 ;otherwise increment the upper digit
00009e 2e51                      mov RDAY,R17 ;and save the thing (R17 contains 0 for lower digit)
00009f 9518                      reti
                                 
                                 ;increment month
                                 inc_mthl:
0000a0 e001                      ldi R16,0x01
0000a1 2e50                      mov RDAY,R16
                                 ;todo months
                                 
0000a2 9518                      reti
                                 
                                 ; =============== Refresh timer ===============
                                 TIM0_COMPA:
0000a3 9533                      inc RLINE
0000a4 3034                      cpi RLINE,4
0000a5 f409                      brne ref_nozero
0000a6 e030                      ldi RLINE,0
                                 ref_nozero:
0000a7 e000                      ldi R16,0
0000a8 2d14                      mov R17,RHR
0000a9 9512                      swap R17
0000aa 2f23                      mov R18,RLINE
                                 rot_hrh:
0000ab 2322                      tst R18
0000ac f019                      breq rot_hrl0
0000ad 9516                      lsr R17
0000ae 952a                      dec R18
0000af cffb                      rjmp rot_hrh
                                 rot_hrl0:
0000b0 fb10                      bst R17,0
0000b1 f900                      bld R16,0
0000b2 2d14                      mov R17,RHR
0000b3 2f23                      mov R18,RLINE
                                 rot_hrl:
0000b4 2322                      tst R18
0000b5 f019                      breq rot_minh0
0000b6 9516                      lsr R17
0000b7 952a                      dec R18
0000b8 cffb                      rjmp rot_hrl
                                 rot_minh0:
0000b9 fb10                      bst R17,0
0000ba f901                      bld R16,1
                                 
0000bb 2d13                      mov R17,RMIN
0000bc 9512                      swap R17
0000bd 2f23                      mov R18,RLINE
                                 rot_minh:
0000be 2322                      tst R18
0000bf f019                      breq rot_minl0
0000c0 9516                      lsr R17
0000c1 952a                      dec R18
0000c2 cffb                      rjmp rot_minh
                                 rot_minl0:
0000c3 fb10                      bst R17,0
0000c4 f902                      bld R16,2
0000c5 2d13                      mov R17,RMIN
0000c6 2f23                      mov R18,RLINE
                                 rot_minl:
0000c7 2322                      tst R18
0000c8 f019                      breq rot_sech0
0000c9 9516                      lsr R17
0000ca 952a                      dec R18
0000cb cffb                      rjmp rot_minl
                                 rot_sech0:
0000cc fb10                      bst R17,0
0000cd f903                      bld R16,3
                                 
0000ce 2d12                      mov R17,RSEC
0000cf 9512                      swap R17
0000d0 2f23                      mov R18,RLINE
                                 rot_sech:
0000d1 2322                      tst R18
0000d2 f019                      breq rot_secl0
0000d3 9516                      lsr R17
0000d4 952a                      dec R18
0000d5 cffb                      rjmp rot_sech
                                 rot_secl0:
0000d6 fb10                      bst R17,0
0000d7 f904                      bld R16,4
0000d8 2d12                      mov R17,RSEC
0000d9 2f23                      mov R18,RLINE
                                 rot_secl:
0000da 2322                      tst R18
0000db f019                      breq rot_end0
0000dc 9516                      lsr R17
0000dd 952a                      dec R18
0000de cffb                      rjmp rot_secl
                                 rot_end0:
0000df fb10                      bst R17,0
0000e0 f905                      bld R16,5
                                 
0000e1 e011                      ldi R17,1
0000e2 2f23                      mov R18,RLINE
                                 rot_line:
0000e3 2322                      tst R18
0000e4 f019                      breq rot_end
0000e5 0f11                      lsl R17
0000e6 952a                      dec R18
0000e7 cffb                      rjmp rot_line
                                 rot_end:
0000e8 6310                      ori R17,0b110000
                                 
0000e9 e32f                      ldi R18,0b111111
0000ea b928                      out PORTC,R18
0000eb b90b                      out PORTD,R16
0000ec b918                      out PORTC,R17
                                 
                                 ;we could also read the buttons while we're refreshing
                                 
                                 
0000ed 9518                      reti
                                 
                                 ; =============== Initialisation routine here ===============
                                 RESET:
                                 
                                 ;init stack pointer
0000ee ef0f                      LDI    R16, low(RAMEND)
0000ef bf0d                      OUT    SPL, R16
0000f0 e008                      LDI    R16, high(RAMEND)
0000f1 bf0e                      OUT    SPH, R16
                                 
                                 ;init sleep mode
0000f2 e001                      LDI R16,0b00000001 ;IDLE, sleep enabled
0000f3 bf03                      OUT SMCR,R16
                                 
                                 ;init clock
0000f4 e31d                      LDI R17,0x3D
0000f5 e008                      LDI R16,0x08
0000f6 9310 0089                 STS OCR1AH,R17
0000f8 9300 0088                 STS OCR1AL,R16
0000fa e002                      LDI R16,0b10
0000fb 9300 006f                 STS TIMSK1,R16
0000fd e00b                      LDI R16,0b00001011
0000fe 9300 0081                 STS TCCR1B,R16
                                 
                                 ;init refresh timer
000100 e033                      ldi RLINE,3
000101 ec08                      ldi R16,200
000102 bd07                      out OCR0A,R16
000103 e002                      ldi R16,0b010
000104 9300 006e                 sts TIMSK0,R16
000106 e002                      ldi R16,0b10
000107 bd04                      out TCCR0A,R16
000108 e002                      ldi R16,0b10
000109 bd05                      out TCCR0B,R16
                                 
                                 ;init pins
00010a e00f                      LDI R16,0b001111
00010b b907                      OUT DDRC,R16
00010c e30f                      LDI R16,0b111111
00010d b908                      OUT PORTC,R16
                                 
00010e ef0f                      LDI R16,0b11111111
00010f b90a                      OUT DDRD,R16
000110 e000                      LDI R16,0b00000000
000111 b90b                      OUT PORTD,R16
                                 
                                 
                                 
                                 ;enable interrupts
000112 9478                      sei
                                 
                                 
                                 ; =============== Sleeper loop ===============
                                 LOOP:
000113 9588                      sleep


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328PB" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   0 r1 :   0 r2 :   7 r3 :   7 r4 :   7 
r5 :   8 r6 :   1 r7 :   1 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  92 r17:  49 r18:  23 r19:  11 r20:   0 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   0 r31:   0 
Registers used: 10 out of 35 (28.6%)

"ATmega328PB" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   4 adiw  :   0 and   :   0 
andi  :   9 asr   :   0 bclr  :   0 bld   :   6 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  29 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   2 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   6 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   3 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  23 cpse  :   0 dec   :   7 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   5 jmp   :  26 
ld    :   0 ldd   :   0 ldi   :  25 lds   :   0 lpm   :   0 lsl   :   1 
lsr   :   6 mov   :  35 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   4 ori   :   1 out   :  13 pop   :   0 
push  :   0 rcall :   0 ret   :   0 reti  :  11 rjmp  :  13 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   1 spm   :   0 st    :   0 std   :   0 sts   :   5 
sub   :   0 subi  :   0 swap  :   3 tst   :   7 wdr   :   0 
Instructions used: 25 out of 113 (22.1%)

"ATmega328PB" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00022a    554      0    554   32768   1.7%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
