
uChronos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003f0  00000484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000df  00800102  00800102  00000486  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000486  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e78  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a37  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000833  00000000  00000000  00001e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  000026b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047a  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e4  00000000  00000000  00002cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002f9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	41 c1       	rjmp	.+642    	; 0x292 <__vector_7>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 ef       	ldi	r30, 0xF0	; 240
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a1 3e       	cpi	r26, 0xE1	; 225
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	bb d0       	rcall	.+374    	; 0x1de <main>
  68:	c1 c1       	rjmp	.+898    	; 0x3ec <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <bin2bcd>:
#include <avr/io.h>
#include "bin_utils.h"

uint8_t bin2bcd(uint8_t bin)
{
	return (bin%10)|(bin/10)<<4;
  6c:	9d ec       	ldi	r25, 0xCD	; 205
  6e:	89 9f       	mul	r24, r25
  70:	91 2d       	mov	r25, r1
  72:	11 24       	eor	r1, r1
  74:	96 95       	lsr	r25
  76:	96 95       	lsr	r25
  78:	96 95       	lsr	r25
  7a:	20 e1       	ldi	r18, 0x10	; 16
  7c:	92 9f       	mul	r25, r18
  7e:	a0 01       	movw	r20, r0
  80:	11 24       	eor	r1, r1
  82:	99 0f       	add	r25, r25
  84:	29 2f       	mov	r18, r25
  86:	22 0f       	add	r18, r18
  88:	22 0f       	add	r18, r18
  8a:	92 0f       	add	r25, r18
  8c:	89 1b       	sub	r24, r25
  8e:	84 2b       	or	r24, r20
  90:	08 95       	ret

00000092 <btn_read>:

uint8_t btn_mem[1]={0};

void btn_read()
{
	uint8_t btns=~PINB & 0b111;
  92:	83 b1       	in	r24, 0x03	; 3
  94:	80 95       	com	r24
  96:	98 2f       	mov	r25, r24
  98:	97 70       	andi	r25, 0x07	; 7
	uint8_t p=btns^btn_mem[0];
  9a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  9e:	89 27       	eor	r24, r25
	if(p)
  a0:	09 f4       	brne	.+2      	; 0xa4 <btn_read+0x12>
  a2:	59 c0       	rjmp	.+178    	; 0x156 <btn_read+0xc4>
	{
		uint8_t i;
		for(i=0;!(p&(1<<i));i++);
  a4:	68 2f       	mov	r22, r24
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	80 fd       	sbrc	r24, 0
  aa:	0e c0       	rjmp	.+28     	; 0xc8 <btn_read+0x36>
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	48 2f       	mov	r20, r24
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	9b 01       	movw	r18, r22
  b6:	08 2e       	mov	r0, r24
  b8:	02 c0       	rjmp	.+4      	; 0xbe <btn_read+0x2c>
  ba:	35 95       	asr	r19
  bc:	27 95       	ror	r18
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <btn_read+0x28>
  c2:	20 ff       	sbrs	r18, 0
  c4:	f4 cf       	rjmp	.-24     	; 0xae <btn_read+0x1c>
  c6:	02 c0       	rjmp	.+4      	; 0xcc <btn_read+0x3a>
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	50 e0       	ldi	r21, 0x00	; 0
		btn_mem[0]=btns;
  cc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
		
		
		if(btn_mem[0]&(1<<i))
  d0:	89 2f       	mov	r24, r25
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	04 2e       	mov	r0, r20
  d6:	02 c0       	rjmp	.+4      	; 0xdc <btn_read+0x4a>
  d8:	95 95       	asr	r25
  da:	87 95       	ror	r24
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <btn_read+0x46>
  e0:	80 ff       	sbrs	r24, 0
  e2:	1d c0       	rjmp	.+58     	; 0x11e <btn_read+0x8c>
		{
			states[state].btn_down_fcn[i](states[state].btn_down_arg[i]);
  e4:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <state>
  e8:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <state+0x1>
  ec:	6d e0       	ldi	r22, 0x0D	; 13
  ee:	62 9f       	mul	r22, r18
  f0:	c0 01       	movw	r24, r0
  f2:	63 9f       	mul	r22, r19
  f4:	90 0d       	add	r25, r0
  f6:	11 24       	eor	r1, r1
  f8:	48 0f       	add	r20, r24
  fa:	59 1f       	adc	r21, r25
  fc:	da 01       	movw	r26, r20
  fe:	aa 0f       	add	r26, r26
 100:	bb 1f       	adc	r27, r27
 102:	a7 5e       	subi	r26, 0xE7	; 231
 104:	be 4f       	sbci	r27, 0xFE	; 254
 106:	44 0f       	add	r20, r20
 108:	55 1f       	adc	r21, r21
 10a:	fa 01       	movw	r30, r20
 10c:	ed 5e       	subi	r30, 0xED	; 237
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	01 90       	ld	r0, Z+
 112:	f0 81       	ld	r31, Z
 114:	e0 2d       	mov	r30, r0
 116:	8d 91       	ld	r24, X+
 118:	9c 91       	ld	r25, X
 11a:	09 95       	icall
 11c:	08 95       	ret
		}
		else
		{
			states[state].btn_up_fcn[i](states[state].btn_up_arg[i]);
 11e:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <state>
 122:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <state+0x1>
 126:	6d e0       	ldi	r22, 0x0D	; 13
 128:	62 9f       	mul	r22, r18
 12a:	c0 01       	movw	r24, r0
 12c:	63 9f       	mul	r22, r19
 12e:	90 0d       	add	r25, r0
 130:	11 24       	eor	r1, r1
 132:	48 0f       	add	r20, r24
 134:	59 1f       	adc	r21, r25
 136:	da 01       	movw	r26, r20
 138:	aa 0f       	add	r26, r26
 13a:	bb 1f       	adc	r27, r27
 13c:	ab 5d       	subi	r26, 0xDB	; 219
 13e:	be 4f       	sbci	r27, 0xFE	; 254
 140:	44 0f       	add	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	fa 01       	movw	r30, r20
 146:	e1 5e       	subi	r30, 0xE1	; 225
 148:	fe 4f       	sbci	r31, 0xFE	; 254
 14a:	01 90       	ld	r0, Z+
 14c:	f0 81       	ld	r31, Z
 14e:	e0 2d       	mov	r30, r0
 150:	8d 91       	ld	r24, X+
 152:	9c 91       	ld	r25, X
 154:	09 95       	icall
 156:	08 95       	ret

00000158 <disp_clear>:
		if(mask&(1<<i)) disp_mem[i]=0xff;
	}
}

void disp_clear(uint8_t mask)
{
 158:	e3 e0       	ldi	r30, 0x03	; 3
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i=0;i<6;i++)
	{
		if(mask&(1<<i)) disp_mem[i]=0x00;
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	ac 01       	movw	r20, r24
 164:	02 2e       	mov	r0, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <disp_clear+0x14>
 168:	55 95       	asr	r21
 16a:	47 95       	ror	r20
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <disp_clear+0x10>
 170:	40 fd       	sbrc	r20, 0
 172:	10 82       	st	Z, r1
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	3f 4f       	sbci	r19, 0xFF	; 255
 178:	31 96       	adiw	r30, 0x01	; 1
	}
}

void disp_clear(uint8_t mask)
{
	for (uint8_t i=0;i<6;i++)
 17a:	26 30       	cpi	r18, 0x06	; 6
 17c:	31 05       	cpc	r19, r1
 17e:	89 f7       	brne	.-30     	; 0x162 <disp_clear+0xa>
	{
		if(mask&(1<<i)) disp_mem[i]=0x00;
	}
}
 180:	08 95       	ret

00000182 <disp_time>:

void disp_time(uint8_t mask)
{
 182:	cf 93       	push	r28
 184:	c8 2f       	mov	r28, r24
	if(mask&(1<<0)) disp_mem[5]=bin2bcd(t_s);
 186:	80 ff       	sbrs	r24, 0
 188:	05 c0       	rjmp	.+10     	; 0x194 <disp_time+0x12>
 18a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <t_s>
 18e:	6e df       	rcall	.-292    	; 0x6c <bin2bcd>
 190:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <disp_mem+0x5>
	if(mask&(1<<1)) disp_mem[4]=bin2bcd(t_min);
 194:	c1 ff       	sbrs	r28, 1
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <disp_time+0x20>
 198:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <t_min>
 19c:	67 df       	rcall	.-306    	; 0x6c <bin2bcd>
 19e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <disp_mem+0x4>
	if(mask&(1<<2)) disp_mem[3]=bin2bcd(t_h);
 1a2:	c2 ff       	sbrs	r28, 2
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <disp_time+0x2e>
 1a6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <t_h>
 1aa:	60 df       	rcall	.-320    	; 0x6c <bin2bcd>
 1ac:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <disp_mem+0x3>
	if(mask&(1<<3)) disp_mem[2]=bin2bcd(t_d);
 1b0:	c3 ff       	sbrs	r28, 3
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <disp_time+0x3c>
 1b4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <t_d>
 1b8:	59 df       	rcall	.-334    	; 0x6c <bin2bcd>
 1ba:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <disp_mem+0x2>
	if(mask&(1<<4)) disp_mem[1]=bin2bcd(t_mth);
 1be:	c4 ff       	sbrs	r28, 4
 1c0:	05 c0       	rjmp	.+10     	; 0x1cc <disp_time+0x4a>
 1c2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <t_mth>
 1c6:	52 df       	rcall	.-348    	; 0x6c <bin2bcd>
 1c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <disp_mem+0x1>
	if(mask&(1<<5)) disp_mem[0]=bin2bcd(t_y);
 1cc:	c5 ff       	sbrs	r28, 5
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <disp_time+0x58>
 1d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <t_y>
 1d4:	4b df       	rcall	.-362    	; 0x6c <bin2bcd>
 1d6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <disp_mem>
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <main>:


int main(void)
{
	/* Initialise ports immediately (fixed in v0.4) */
	PORTC=0b00111111; /* Shut down displays...  */
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	88 b9       	out	0x08, r24	; 8
	DDRC =0b00111111; /* ...before being output */
 1e2:	87 b9       	out	0x07, r24	; 7
	
	
	PORTD=0b00000000;
 1e4:	1b b8       	out	0x0b, r1	; 11
	DDRD =0b11111111;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	8a b9       	out	0x0a, r24	; 10
	
	PORTB=0b11111111;
 1ea:	85 b9       	out	0x05, r24	; 5
	DDRB =0b11111111;
 1ec:	84 b9       	out	0x04, r24	; 4
	
	//Default display memory
	disp_clear(0b00111111);
 1ee:	8f e3       	ldi	r24, 0x3F	; 63
 1f0:	b3 df       	rcall	.-154    	; 0x158 <disp_clear>
	
	//Default time
	t_y=17;
 1f2:	81 e1       	ldi	r24, 0x11	; 17
 1f4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <t_y>
	t_mth=9;
 1f8:	89 e0       	ldi	r24, 0x09	; 9
 1fa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <t_mth>
	t_d=29;
 1fe:	8d e1       	ldi	r24, 0x1D	; 29
 200:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <t_d>
	t_h=2;
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <t_h>
	t_min=27;
 20a:	8b e1       	ldi	r24, 0x1B	; 27
 20c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <t_min>
	t_s=24;
 210:	88 e1       	ldi	r24, 0x18	; 24
 212:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <t_s>
	
	SMCR=SMCR|1<<SE;
 216:	83 b7       	in	r24, 0x33	; 51
 218:	81 60       	ori	r24, 0x01	; 1
 21a:	83 bf       	out	0x33, r24	; 51
		TCCR2B=TCCR2B|1<<CS22|1<<CS21|1<<CS20;
		
	}
	else
	{
		OCR2A=220;
 21c:	8c ed       	ldi	r24, 0xDC	; 220
 21e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__EEPROM_REGION_LENGTH__+0x7f00b3>
		TIMSK2=TIMSK2|1<<OCIE2A;
 222:	e0 e7       	ldi	r30, 0x70	; 112
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	82 60       	ori	r24, 0x02	; 2
 22a:	80 83       	st	Z, r24
		TCCR2A=TCCR2A|1<<WGM21;
 22c:	e0 eb       	ldi	r30, 0xB0	; 176
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	82 60       	ori	r24, 0x02	; 2
 234:	80 83       	st	Z, r24
		TCCR2B=TCCR2B|1<<CS22|1<<CS21|1<<CS20;
 236:	e1 eb       	ldi	r30, 0xB1	; 177
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	87 60       	ori	r24, 0x07	; 7
 23e:	80 83       	st	Z, r24
	}
	
	
	//All is ready, let's go!
	init_states();
 240:	8c d0       	rcall	.+280    	; 0x35a <init_states>
	state_goto(1);
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	6d d0       	rcall	.+218    	; 0x322 <state_goto>
	sei();
 248:	78 94       	sei
    while (1) 
    {
		
		for(int c=0;c<6;c++)
		{
			PORTC=0b00111111&~(1<<c);
 24a:	c1 e0       	ldi	r28, 0x01	; 1
 24c:	d0 e0       	ldi	r29, 0x00	; 0
			PORTD=disp_mem[c];
			
			//PORTD=cntr&&0xff;
			for(uint16_t i=5*4;--i;);
			PORTD=0b00000000;
			PORTC=0b00111111;
 24e:	1f e3       	ldi	r17, 0x3F	; 63
 250:	e3 e0       	ldi	r30, 0x03	; 3
 252:	f1 e0       	ldi	r31, 0x01	; 1
	sei();
	
    while (1) 
    {
		
		for(int c=0;c<6;c++)
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTC=0b00111111&~(1<<c);
 258:	ce 01       	movw	r24, r28
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <main+0x84>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <main+0x80>
 266:	80 95       	com	r24
 268:	8f 73       	andi	r24, 0x3F	; 63
 26a:	88 b9       	out	0x08, r24	; 8
			//PORTD=(cntr>>(8*(5-c)))&0xff;
			PORTD=disp_mem[c];
 26c:	81 91       	ld	r24, Z+
 26e:	8b b9       	out	0x0b, r24	; 11
			
			//PORTD=cntr&&0xff;
			for(uint16_t i=5*4;--i;);
 270:	84 e1       	ldi	r24, 0x14	; 20
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <main+0x96>
			PORTD=0b00000000;
 278:	1b b8       	out	0x0b, r1	; 11
			PORTC=0b00111111;
 27a:	18 b9       	out	0x08, r17	; 8
			for(uint16_t i=5*4*1;--i;);
 27c:	84 e1       	ldi	r24, 0x14	; 20
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <main+0xa2>
	sei();
	
    while (1) 
    {
		
		for(int c=0;c<6;c++)
 284:	2f 5f       	subi	r18, 0xFF	; 255
 286:	3f 4f       	sbci	r19, 0xFF	; 255
 288:	26 30       	cpi	r18, 0x06	; 6
 28a:	31 05       	cpc	r19, r1
 28c:	29 f7       	brne	.-54     	; 0x258 <main+0x7a>
			PORTC=0b00111111;
			for(uint16_t i=5*4*1;--i;);
			
			
		}
		btn_read();
 28e:	01 df       	rcall	.-510    	; 0x92 <btn_read>
		
		
		
		
/* main() must never end! */
    }
 290:	df cf       	rjmp	.-66     	; 0x250 <main+0x72>

00000292 <__vector_7>:




ISR(TIMER2_COMPA_vect)
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	if(++t_s==60)
 2b4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <t_s>
 2b8:	8f 5f       	subi	r24, 0xFF	; 255
 2ba:	8c 33       	cpi	r24, 0x3C	; 60
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <__vector_7+0x32>
 2be:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <t_s>
 2c2:	16 c0       	rjmp	.+44     	; 0x2f0 <__vector_7+0x5e>
	{
		t_s=0;
 2c4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <t_s>
		if(++t_min==60)
 2c8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <t_min>
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	8c 33       	cpi	r24, 0x3C	; 60
 2d0:	19 f0       	breq	.+6      	; 0x2d8 <__vector_7+0x46>
 2d2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <t_min>
 2d6:	0c c0       	rjmp	.+24     	; 0x2f0 <__vector_7+0x5e>
		{
			t_min=0;
 2d8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <t_min>
			if(++t_h==24)
 2dc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <t_h>
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	88 31       	cpi	r24, 0x18	; 24
 2e4:	19 f0       	breq	.+6      	; 0x2ec <__vector_7+0x5a>
 2e6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <t_h>
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <__vector_7+0x5e>
			{
				t_h=0;
 2ec:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <t_h>
				
			}
		}
	}

	disp_time(time_mask);
 2f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2f4:	46 df       	rcall	.-372    	; 0x182 <disp_time>
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <init2>:
	disp_clear(0b00111111);
	time_mask=0b110;
}
void init2()
{
	time_mask=0b111111;
 318:	8f e3       	ldi	r24, 0x3F	; 63
 31a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 31e:	08 95       	ret

00000320 <do_nothing>:
}


void do_nothing(uint16_t arg)
{
 320:	08 95       	ret

00000322 <state_goto>:
	
}

void state_goto(uint16_t arg)
{
	state=arg;
 322:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <state+0x1>
 326:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
	states[state].init();
 32a:	2a e1       	ldi	r18, 0x1A	; 26
 32c:	28 9f       	mul	r18, r24
 32e:	f0 01       	movw	r30, r0
 330:	29 9f       	mul	r18, r25
 332:	f0 0d       	add	r31, r0
 334:	11 24       	eor	r1, r1
 336:	ef 5e       	subi	r30, 0xEF	; 239
 338:	fe 4f       	sbci	r31, 0xFE	; 254
 33a:	01 90       	ld	r0, Z+
 33c:	f0 81       	ld	r31, Z
 33e:	e0 2d       	mov	r30, r0
 340:	09 95       	icall
 342:	08 95       	ret

00000344 <init0>:


/* Init function for state 0 (power saver)*/
void init0()
{
	disp_clear(0b00111111);
 344:	8f e3       	ldi	r24, 0x3F	; 63
 346:	08 df       	rcall	.-496    	; 0x158 <disp_clear>
	time_mask=0;
 348:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 34c:	08 95       	ret

0000034e <init1>:
}
void init1()
{
	disp_clear(0b00111111);
 34e:	8f e3       	ldi	r24, 0x3F	; 63
 350:	03 df       	rcall	.-506    	; 0x158 <disp_clear>
	time_mask=0b110;
 352:	86 e0       	ldi	r24, 0x06	; 6
 354:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 358:	08 95       	ret

0000035a <init_states>:
	states[state].init();
}

void init_states()
{
	states[0].init=&init0;
 35a:	e1 e1       	ldi	r30, 0x11	; 17
 35c:	f1 e0       	ldi	r31, 0x01	; 1
 35e:	82 ea       	ldi	r24, 0xA2	; 162
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	91 83       	std	Z+1, r25	; 0x01
 364:	80 83       	st	Z, r24
	
	states[0].btn_down_fcn[0]=&do_nothing;
 366:	80 e9       	ldi	r24, 0x90	; 144
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	93 83       	std	Z+3, r25	; 0x03
 36c:	82 83       	std	Z+2, r24	; 0x02
	states[0].btn_down_fcn[1]=&do_nothing;
 36e:	95 83       	std	Z+5, r25	; 0x05
 370:	84 83       	std	Z+4, r24	; 0x04
	states[0].btn_down_fcn[2]=&state_goto;
 372:	21 e9       	ldi	r18, 0x91	; 145
 374:	31 e0       	ldi	r19, 0x01	; 1
 376:	37 83       	std	Z+7, r19	; 0x07
 378:	26 83       	std	Z+6, r18	; 0x06
	states[0].btn_down_arg[2]=1;
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	55 87       	std	Z+13, r21	; 0x0d
 380:	44 87       	std	Z+12, r20	; 0x0c
	
	states[0].btn_up_fcn[0]=&do_nothing;
 382:	97 87       	std	Z+15, r25	; 0x0f
 384:	86 87       	std	Z+14, r24	; 0x0e
	states[0].btn_up_fcn[1]=&do_nothing;
 386:	91 8b       	std	Z+17, r25	; 0x11
 388:	80 8b       	std	Z+16, r24	; 0x10
	states[0].btn_up_fcn[2]=&do_nothing;
 38a:	93 8b       	std	Z+19, r25	; 0x13
 38c:	82 8b       	std	Z+18, r24	; 0x12
	
	
	states[1].init=&init1;
 38e:	67 ea       	ldi	r22, 0xA7	; 167
 390:	71 e0       	ldi	r23, 0x01	; 1
 392:	73 8f       	std	Z+27, r23	; 0x1b
 394:	62 8f       	std	Z+26, r22	; 0x1a
	
	states[1].btn_down_fcn[0]=&state_goto;
 396:	35 8f       	std	Z+29, r19	; 0x1d
 398:	24 8f       	std	Z+28, r18	; 0x1c
	states[1].btn_down_arg[0]=0;
 39a:	13 a2       	std	Z+35, r1	; 0x23
 39c:	12 a2       	std	Z+34, r1	; 0x22
	states[1].btn_down_fcn[1]=&do_nothing;
 39e:	97 8f       	std	Z+31, r25	; 0x1f
 3a0:	86 8f       	std	Z+30, r24	; 0x1e
	states[1].btn_down_fcn[2]=&state_goto;
 3a2:	31 a3       	std	Z+33, r19	; 0x21
 3a4:	20 a3       	std	Z+32, r18	; 0x20
	states[1].btn_down_arg[2]=2;
 3a6:	62 e0       	ldi	r22, 0x02	; 2
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	77 a3       	std	Z+39, r23	; 0x27
 3ac:	66 a3       	std	Z+38, r22	; 0x26
	
	states[1].btn_up_fcn[0]=&do_nothing;
 3ae:	91 a7       	std	Z+41, r25	; 0x29
 3b0:	80 a7       	std	Z+40, r24	; 0x28
	states[1].btn_up_fcn[1]=&do_nothing;
 3b2:	93 a7       	std	Z+43, r25	; 0x2b
 3b4:	82 a7       	std	Z+42, r24	; 0x2a
	states[1].btn_up_fcn[2]=&do_nothing;
 3b6:	95 a7       	std	Z+45, r25	; 0x2d
 3b8:	84 a7       	std	Z+44, r24	; 0x2c
	
	
	states[2].init=&init2;
 3ba:	6c e8       	ldi	r22, 0x8C	; 140
 3bc:	71 e0       	ldi	r23, 0x01	; 1
 3be:	75 ab       	std	Z+53, r23	; 0x35
 3c0:	64 ab       	std	Z+52, r22	; 0x34
	
	states[2].btn_down_fcn[0]=&state_goto;
 3c2:	37 ab       	std	Z+55, r19	; 0x37
 3c4:	26 ab       	std	Z+54, r18	; 0x36
	states[2].btn_down_arg[0]=1;
 3c6:	55 af       	std	Z+61, r21	; 0x3d
 3c8:	44 af       	std	Z+60, r20	; 0x3c
	states[2].btn_down_fcn[1]=&do_nothing;
 3ca:	91 af       	std	Z+57, r25	; 0x39
 3cc:	80 af       	std	Z+56, r24	; 0x38
	states[2].btn_down_fcn[2]=&do_nothing;
 3ce:	93 af       	std	Z+59, r25	; 0x3b
 3d0:	82 af       	std	Z+58, r24	; 0x3a
	
	states[2].btn_up_fcn[0]=&do_nothing;
 3d2:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <states+0x43>
 3d6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <states+0x42>
	states[2].btn_up_fcn[1]=&do_nothing;
 3da:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <states+0x45>
 3de:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <states+0x44>
	states[2].btn_up_fcn[2]=&do_nothing;
 3e2:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <states+0x47>
 3e6:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <states+0x46>
 3ea:	08 95       	ret

000003ec <_exit>:
 3ec:	f8 94       	cli

000003ee <__stop_program>:
 3ee:	ff cf       	rjmp	.-2      	; 0x3ee <__stop_program>
