
uChronos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  0000028a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f4  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000802  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d3  00000000  00000000  00001566  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c3  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000278  00000000  00000000  00001eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002163  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	bf c0       	rjmp	.+382    	; 0x18e <__vector_7>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ac 30       	cpi	r26, 0x0C	; 12
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	4c d0       	rcall	.+152    	; 0xea <main>
  52:	df c0       	rjmp	.+446    	; 0x212 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <bin2bcd>:
#include <avr/io.h>
#include "bin_utils.h"

uint8_t bin2bcd(uint8_t bin)
{
	return (bin%10)|(bin/10)<<4;
  56:	9d ec       	ldi	r25, 0xCD	; 205
  58:	89 9f       	mul	r24, r25
  5a:	91 2d       	mov	r25, r1
  5c:	11 24       	eor	r1, r1
  5e:	96 95       	lsr	r25
  60:	96 95       	lsr	r25
  62:	96 95       	lsr	r25
  64:	20 e1       	ldi	r18, 0x10	; 16
  66:	92 9f       	mul	r25, r18
  68:	a0 01       	movw	r20, r0
  6a:	11 24       	eor	r1, r1
  6c:	99 0f       	add	r25, r25
  6e:	29 2f       	mov	r18, r25
  70:	22 0f       	add	r18, r18
  72:	22 0f       	add	r18, r18
  74:	92 0f       	add	r25, r18
  76:	89 1b       	sub	r24, r25
  78:	84 2b       	or	r24, r20
  7a:	08 95       	ret

0000007c <clear_disp>:

void clear_disp()
{
	for (uint8_t i=0;i<6;i++)
	{
		disp_mem[i]=0x00;
  7c:	e0 e0       	ldi	r30, 0x00	; 0
  7e:	f1 e0       	ldi	r31, 0x01	; 1
  80:	10 82       	st	Z, r1
  82:	11 82       	std	Z+1, r1	; 0x01
  84:	12 82       	std	Z+2, r1	; 0x02
  86:	13 82       	std	Z+3, r1	; 0x03
  88:	14 82       	std	Z+4, r1	; 0x04
  8a:	15 82       	std	Z+5, r1	; 0x05
  8c:	08 95       	ret

0000008e <disp_time>:
	}
}

void disp_time(uint8_t mask)
{
  8e:	cf 93       	push	r28
  90:	c8 2f       	mov	r28, r24
	if(mask&(1<<0)) disp_mem[5]=bin2bcd(t_s);
  92:	80 ff       	sbrs	r24, 0
  94:	05 c0       	rjmp	.+10     	; 0xa0 <disp_time+0x12>
  96:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <t_s>
  9a:	dd df       	rcall	.-70     	; 0x56 <bin2bcd>
  9c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_edata+0x5>
	if(mask&(1<<1)) disp_mem[4]=bin2bcd(t_min);
  a0:	c1 ff       	sbrs	r28, 1
  a2:	05 c0       	rjmp	.+10     	; 0xae <disp_time+0x20>
  a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <t_min>
  a8:	d6 df       	rcall	.-84     	; 0x56 <bin2bcd>
  aa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_edata+0x4>
	if(mask&(1<<2)) disp_mem[3]=bin2bcd(t_h);
  ae:	c2 ff       	sbrs	r28, 2
  b0:	05 c0       	rjmp	.+10     	; 0xbc <disp_time+0x2e>
  b2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <t_h>
  b6:	cf df       	rcall	.-98     	; 0x56 <bin2bcd>
  b8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>
	if(mask&(1<<3)) disp_mem[2]=bin2bcd(t_d);
  bc:	c3 ff       	sbrs	r28, 3
  be:	05 c0       	rjmp	.+10     	; 0xca <disp_time+0x3c>
  c0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <t_d>
  c4:	c8 df       	rcall	.-112    	; 0x56 <bin2bcd>
  c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
	if(mask&(1<<4)) disp_mem[1]=bin2bcd(t_mth);
  ca:	c4 ff       	sbrs	r28, 4
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <disp_time+0x4a>
  ce:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <t_mth>
  d2:	c1 df       	rcall	.-126    	; 0x56 <bin2bcd>
  d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_edata+0x1>
	if(mask&(1<<5)) disp_mem[0]=bin2bcd(t_y);
  d8:	c5 ff       	sbrs	r28, 5
  da:	05 c0       	rjmp	.+10     	; 0xe6 <disp_time+0x58>
  dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <t_y>
  e0:	ba df       	rcall	.-140    	; 0x56 <bin2bcd>
  e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <main>:


int main(void)
{
	/* Initialise ports immediately (fixed in v0.4) */
	PORTC=0b00111111; /* Shut down displays...  */
  ea:	8f e3       	ldi	r24, 0x3F	; 63
  ec:	88 b9       	out	0x08, r24	; 8
	DDRC =0b00111111; /* ...before being output */
  ee:	87 b9       	out	0x07, r24	; 7
	
	
	PORTD=0b00000000;
  f0:	1b b8       	out	0x0b, r1	; 11
	DDRD =0b11111111;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	8a b9       	out	0x0a, r24	; 10
	
	//Default display memory
	clear_disp();
  f6:	c2 df       	rcall	.-124    	; 0x7c <clear_disp>
	
	//Default time
	t_y=17;
  f8:	81 e1       	ldi	r24, 0x11	; 17
  fa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <t_y>
	t_mth=9;
  fe:	89 e0       	ldi	r24, 0x09	; 9
 100:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <t_mth>
	t_d=29;
 104:	8d e1       	ldi	r24, 0x1D	; 29
 106:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <t_d>
	t_h=2;
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <t_h>
	t_min=27;
 110:	8b e1       	ldi	r24, 0x1B	; 27
 112:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <t_min>
	t_s=24;
 116:	88 e1       	ldi	r24, 0x18	; 24
 118:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <t_s>
	
	SMCR=SMCR|1<<SE;
 11c:	83 b7       	in	r24, 0x33	; 51
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	83 bf       	out	0x33, r24	; 51
		TCCR2B=TCCR2B|1<<CS22|1<<CS21|1<<CS20;
		
	}
	else
	{
		OCR2A=220;
 122:	8c ed       	ldi	r24, 0xDC	; 220
 124:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__EEPROM_REGION_LENGTH__+0x7f00b3>
		TIMSK2=TIMSK2|1<<OCIE2A;
 128:	e0 e7       	ldi	r30, 0x70	; 112
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	80 83       	st	Z, r24
		TCCR2A=TCCR2A|1<<WGM21;
 132:	e0 eb       	ldi	r30, 0xB0	; 176
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	80 83       	st	Z, r24
		TCCR2B=TCCR2B|1<<CS22|1<<CS21|1<<CS20;
 13c:	e1 eb       	ldi	r30, 0xB1	; 177
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	87 60       	ori	r24, 0x07	; 7
 144:	80 83       	st	Z, r24
	}
	
	
	//All is ready, let's go!
	sei();
 146:	78 94       	sei
	
    while (1) 
    {
		for(int c=0;c<6;c++)
		{
			PORTC=0b00111111&~(1<<c);
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	70 e0       	ldi	r23, 0x00	; 0
			PORTD=disp_mem[c];
			
			//PORTD=cntr&&0xff;
			for(uint16_t i=5*4;--i;);
			PORTD=0b00000000;
			PORTC=0b00111111;
 14c:	4f e3       	ldi	r20, 0x3F	; 63
 14e:	e0 e0       	ldi	r30, 0x00	; 0
 150:	f1 e0       	ldi	r31, 0x01	; 1
	//All is ready, let's go!
	sei();
	
    while (1) 
    {
		for(int c=0;c<6;c++)
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTC=0b00111111&~(1<<c);
 156:	cb 01       	movw	r24, r22
 158:	02 2e       	mov	r0, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <main+0x76>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <main+0x72>
 164:	80 95       	com	r24
 166:	8f 73       	andi	r24, 0x3F	; 63
 168:	88 b9       	out	0x08, r24	; 8
			//PORTD=(cntr>>(8*(5-c)))&0xff;
			PORTD=disp_mem[c];
 16a:	81 91       	ld	r24, Z+
 16c:	8b b9       	out	0x0b, r24	; 11
			
			//PORTD=cntr&&0xff;
			for(uint16_t i=5*4;--i;);
 16e:	84 e1       	ldi	r24, 0x14	; 20
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0x88>
			PORTD=0b00000000;
 176:	1b b8       	out	0x0b, r1	; 11
			PORTC=0b00111111;
 178:	48 b9       	out	0x08, r20	; 8
			for(uint16_t i=5*4*1;--i;);
 17a:	84 e1       	ldi	r24, 0x14	; 20
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0x94>
	//All is ready, let's go!
	sei();
	
    while (1) 
    {
		for(int c=0;c<6;c++)
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	26 30       	cpi	r18, 0x06	; 6
 188:	31 05       	cpc	r19, r1
 18a:	29 f7       	brne	.-54     	; 0x156 <main+0x6c>
 18c:	e0 cf       	rjmp	.-64     	; 0x14e <main+0x64>

0000018e <__vector_7>:




ISR(TIMER2_COMPA_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	if(++t_s==60)
 1b0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <t_s>
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	8c 33       	cpi	r24, 0x3C	; 60
 1b8:	19 f0       	breq	.+6      	; 0x1c0 <__vector_7+0x32>
 1ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <t_s>
 1be:	16 c0       	rjmp	.+44     	; 0x1ec <__vector_7+0x5e>
	{
		t_s=0;
 1c0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <t_s>
		if(++t_min==60)
 1c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <t_min>
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	8c 33       	cpi	r24, 0x3C	; 60
 1cc:	19 f0       	breq	.+6      	; 0x1d4 <__vector_7+0x46>
 1ce:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <t_min>
 1d2:	0c c0       	rjmp	.+24     	; 0x1ec <__vector_7+0x5e>
		{
			t_min=0;
 1d4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <t_min>
			if(++t_h==24)
 1d8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <t_h>
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	88 31       	cpi	r24, 0x18	; 24
 1e0:	19 f0       	breq	.+6      	; 0x1e8 <__vector_7+0x5a>
 1e2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <t_h>
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__vector_7+0x5e>
			{
				t_h=0;
 1e8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <t_h>
				
			}
		}
}
disp_time((uint8_t)0b000111);
 1ec:	87 e0       	ldi	r24, 0x07	; 7
 1ee:	4f df       	rcall	.-354    	; 0x8e <disp_time>
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
