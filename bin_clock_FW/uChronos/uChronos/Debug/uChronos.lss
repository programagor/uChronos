
uChronos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000532  000005c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000532  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014e  00800116  00800116  000005dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a6  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a95  00000000  00000000  000017fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e4  00000000  00000000  00002293  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00002c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c4  00000000  00000000  00002e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000409  00000000  00000000  0000332c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	26 c0       	rjmp	.+76     	; 0x4e <__ctors_end>
   2:	40 c0       	rjmp	.+128    	; 0x84 <__bad_interrupt>
   4:	3f c0       	rjmp	.+126    	; 0x84 <__bad_interrupt>
   6:	3e c0       	rjmp	.+124    	; 0x84 <__bad_interrupt>
   8:	3d c0       	rjmp	.+122    	; 0x84 <__bad_interrupt>
   a:	3c c0       	rjmp	.+120    	; 0x84 <__bad_interrupt>
   c:	3b c0       	rjmp	.+118    	; 0x84 <__bad_interrupt>
   e:	7c c1       	rjmp	.+760    	; 0x308 <__vector_7>
  10:	39 c0       	rjmp	.+114    	; 0x84 <__bad_interrupt>
  12:	38 c0       	rjmp	.+112    	; 0x84 <__bad_interrupt>
  14:	37 c0       	rjmp	.+110    	; 0x84 <__bad_interrupt>
  16:	36 c0       	rjmp	.+108    	; 0x84 <__bad_interrupt>
  18:	35 c0       	rjmp	.+106    	; 0x84 <__bad_interrupt>
  1a:	34 c0       	rjmp	.+104    	; 0x84 <__bad_interrupt>
  1c:	33 c0       	rjmp	.+102    	; 0x84 <__bad_interrupt>
  1e:	32 c0       	rjmp	.+100    	; 0x84 <__bad_interrupt>
  20:	31 c0       	rjmp	.+98     	; 0x84 <__bad_interrupt>
  22:	30 c0       	rjmp	.+96     	; 0x84 <__bad_interrupt>
  24:	2f c0       	rjmp	.+94     	; 0x84 <__bad_interrupt>
  26:	2e c0       	rjmp	.+92     	; 0x84 <__bad_interrupt>
  28:	2d c0       	rjmp	.+90     	; 0x84 <__bad_interrupt>
  2a:	2c c0       	rjmp	.+88     	; 0x84 <__bad_interrupt>
  2c:	2b c0       	rjmp	.+86     	; 0x84 <__bad_interrupt>
  2e:	2a c0       	rjmp	.+84     	; 0x84 <__bad_interrupt>
  30:	29 c0       	rjmp	.+82     	; 0x84 <__bad_interrupt>
  32:	28 c0       	rjmp	.+80     	; 0x84 <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	80 c0       	rjmp	.+256    	; 0x136 <btn_read+0x8a>
  36:	88 8c       	ldd	r8, Y+24	; 0x18
  38:	84 c8       	rjmp	.-3832   	; 0xfffff142 <__eeprom_end+0xff7ef142>
  3a:	cc c4       	rjmp	.+2456   	; 0x9d4 <__data_load_end+0x48c>
  3c:	48 4c       	sbci	r20, 0xC8	; 200
  3e:	a0 e0       	ldi	r26, 0x00	; 0
  40:	a8 ac       	ldd	r10, Y+56	; 0x38
  42:	a4 e8       	ldi	r26, 0x84	; 132
  44:	ec e4       	ldi	r30, 0x4C	; 76
  46:	68 6c       	ori	r22, 0xC8	; 200
  48:	a2 e2       	ldi	r26, 0x22	; 34
  4a:	4e aa       	std	Y+54, r4	; 0x36
  4c:	ae a6       	std	Y+46, r10	; 0x2e

0000004e <__ctors_end>:
  4e:	11 24       	eor	r1, r1
  50:	1f be       	out	0x3f, r1	; 63
  52:	cf ef       	ldi	r28, 0xFF	; 255
  54:	d2 e0       	ldi	r29, 0x02	; 2
  56:	de bf       	out	0x3e, r29	; 62
  58:	cd bf       	out	0x3d, r28	; 61

0000005a <__do_copy_data>:
  5a:	11 e0       	ldi	r17, 0x01	; 1
  5c:	a0 e0       	ldi	r26, 0x00	; 0
  5e:	b1 e0       	ldi	r27, 0x01	; 1
  60:	e2 e3       	ldi	r30, 0x32	; 50
  62:	f5 e0       	ldi	r31, 0x05	; 5
  64:	02 c0       	rjmp	.+4      	; 0x6a <__do_copy_data+0x10>
  66:	05 90       	lpm	r0, Z+
  68:	0d 92       	st	X+, r0
  6a:	a6 31       	cpi	r26, 0x16	; 22
  6c:	b1 07       	cpc	r27, r17
  6e:	d9 f7       	brne	.-10     	; 0x66 <__do_copy_data+0xc>

00000070 <__do_clear_bss>:
  70:	22 e0       	ldi	r18, 0x02	; 2
  72:	a6 e1       	ldi	r26, 0x16	; 22
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a4 36       	cpi	r26, 0x64	; 100
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	ea d0       	rcall	.+468    	; 0x256 <main>
  82:	55 c2       	rjmp	.+1194   	; 0x52e <_exit>

00000084 <__bad_interrupt>:
  84:	bd cf       	rjmp	.-134    	; 0x0 <__vectors>

00000086 <bin2bcd>:
#include <avr/io.h>
#include "bin_utils.h"

uint8_t bin2bcd(uint8_t bin)
{
	return (bin%10)|(bin/10)<<4;
  86:	9d ec       	ldi	r25, 0xCD	; 205
  88:	89 9f       	mul	r24, r25
  8a:	91 2d       	mov	r25, r1
  8c:	11 24       	eor	r1, r1
  8e:	96 95       	lsr	r25
  90:	96 95       	lsr	r25
  92:	96 95       	lsr	r25
  94:	20 e1       	ldi	r18, 0x10	; 16
  96:	92 9f       	mul	r25, r18
  98:	a0 01       	movw	r20, r0
  9a:	11 24       	eor	r1, r1
  9c:	99 0f       	add	r25, r25
  9e:	29 2f       	mov	r18, r25
  a0:	22 0f       	add	r18, r18
  a2:	22 0f       	add	r18, r18
  a4:	92 0f       	add	r25, r18
  a6:	89 1b       	sub	r24, r25
  a8:	84 2b       	or	r24, r20
  aa:	08 95       	ret

000000ac <btn_read>:

uint8_t btn_mem[1]={0};

void btn_read()
{
	uint8_t btns=~PINB & 0b111;
  ac:	83 b1       	in	r24, 0x03	; 3
  ae:	80 95       	com	r24
  b0:	98 2f       	mov	r25, r24
  b2:	97 70       	andi	r25, 0x07	; 7
	uint8_t p=btns^btn_mem[0];
  b4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
  b8:	89 27       	eor	r24, r25
	if(p)
  ba:	09 f4       	brne	.+2      	; 0xbe <btn_read+0x12>
  bc:	67 c0       	rjmp	.+206    	; 0x18c <btn_read+0xe0>
	{
		uint8_t i;
		for(i=0;!(p&(1<<i));i++);
  be:	68 2f       	mov	r22, r24
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	80 fd       	sbrc	r24, 0
  c4:	0e c0       	rjmp	.+28     	; 0xe2 <btn_read+0x36>
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	48 2f       	mov	r20, r24
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	9b 01       	movw	r18, r22
  d0:	08 2e       	mov	r0, r24
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <btn_read+0x2c>
  d4:	35 95       	asr	r19
  d6:	27 95       	ror	r18
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <btn_read+0x28>
  dc:	20 ff       	sbrs	r18, 0
  de:	f4 cf       	rjmp	.-24     	; 0xc8 <btn_read+0x1c>
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <btn_read+0x3a>
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	50 e0       	ldi	r21, 0x00	; 0
		btn_mem[0]=btns;
  e6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <__data_end>
		
		
		if(btn_mem[0]&(1<<i))
  ea:	89 2f       	mov	r24, r25
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	04 2e       	mov	r0, r20
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <btn_read+0x4a>
  f2:	95 95       	asr	r25
  f4:	87 95       	ror	r24
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <btn_read+0x46>
  fa:	80 ff       	sbrs	r24, 0
  fc:	24 c0       	rjmp	.+72     	; 0x146 <btn_read+0x9a>
		{
			states[state].btn_down_fcn[i](states[state].btn_down_arg[i]);
  fe:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <state>
 102:	82 2f       	mov	r24, r18
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	da 01       	movw	r26, r20
 108:	34 e1       	ldi	r19, 0x14	; 20
 10a:	23 9f       	mul	r18, r19
 10c:	a0 0d       	add	r26, r0
 10e:	b1 1d       	adc	r27, r1
 110:	11 24       	eor	r1, r1
 112:	ac 5d       	subi	r26, 0xDC	; 220
 114:	be 4f       	sbci	r27, 0xFE	; 254
 116:	fc 01       	movw	r30, r24
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	e8 0f       	add	r30, r24
 12a:	f9 1f       	adc	r31, r25
 12c:	e4 0f       	add	r30, r20
 12e:	f5 1f       	adc	r31, r21
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	ea 5d       	subi	r30, 0xDA	; 218
 136:	fe 4f       	sbci	r31, 0xFE	; 254
 138:	01 90       	ld	r0, Z+
 13a:	f0 81       	ld	r31, Z
 13c:	e0 2d       	mov	r30, r0
 13e:	18 96       	adiw	r26, 0x08	; 8
 140:	8c 91       	ld	r24, X
 142:	09 95       	icall
 144:	08 95       	ret
		}
		else
		{
			states[state].btn_up_fcn[i](states[state].btn_up_arg[i]);
 146:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <state>
 14a:	82 2f       	mov	r24, r18
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	da 01       	movw	r26, r20
 150:	34 e1       	ldi	r19, 0x14	; 20
 152:	23 9f       	mul	r18, r19
 154:	a0 0d       	add	r26, r0
 156:	b1 1d       	adc	r27, r1
 158:	11 24       	eor	r1, r1
 15a:	ac 5d       	subi	r26, 0xDC	; 220
 15c:	be 4f       	sbci	r27, 0xFE	; 254
 15e:	fc 01       	movw	r30, r24
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	e8 0f       	add	r30, r24
 172:	f9 1f       	adc	r31, r25
 174:	e4 0f       	add	r30, r20
 176:	f5 1f       	adc	r31, r21
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	ec 5d       	subi	r30, 0xDC	; 220
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	03 84       	ldd	r0, Z+11	; 0x0b
 182:	f4 85       	ldd	r31, Z+12	; 0x0c
 184:	e0 2d       	mov	r30, r0
 186:	51 96       	adiw	r26, 0x11	; 17
 188:	8c 91       	ld	r24, X
 18a:	09 95       	icall
 18c:	08 95       	ret

0000018e <disp_clear>:
		if(mask&(1<<i)) disp_mem[i]=0xff;
	}
}

void disp_clear(uint8_t mask)
{
 18e:	e7 e1       	ldi	r30, 0x17	; 23
 190:	f1 e0       	ldi	r31, 0x01	; 1
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i=0;i<6;i++)
	{
		if(mask&(1<<i)) disp_mem[i]=0x00;
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	ac 01       	movw	r20, r24
 19a:	02 2e       	mov	r0, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <disp_clear+0x14>
 19e:	55 95       	asr	r21
 1a0:	47 95       	ror	r20
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <disp_clear+0x10>
 1a6:	40 fd       	sbrc	r20, 0
 1a8:	10 82       	st	Z, r1
 1aa:	2f 5f       	subi	r18, 0xFF	; 255
 1ac:	3f 4f       	sbci	r19, 0xFF	; 255
 1ae:	31 96       	adiw	r30, 0x01	; 1
	}
}

void disp_clear(uint8_t mask)
{
	for (uint8_t i=0;i<6;i++)
 1b0:	26 30       	cpi	r18, 0x06	; 6
 1b2:	31 05       	cpc	r19, r1
 1b4:	89 f7       	brne	.-30     	; 0x198 <disp_clear+0xa>
	{
		if(mask&(1<<i)) disp_mem[i]=0x00;
	}
}
 1b6:	08 95       	ret

000001b8 <disp_time>:

void disp_time(uint8_t mask)
{
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
	if(mask&(1<<0)) disp_mem[5]=bin2bcd(t_s);
 1bc:	80 ff       	sbrs	r24, 0
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <disp_time+0x12>
 1c0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <t_s>
 1c4:	60 df       	rcall	.-320    	; 0x86 <bin2bcd>
 1c6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <disp_mem+0x5>
	if(mask&(1<<1)) disp_mem[4]=bin2bcd(t_min);
 1ca:	c1 ff       	sbrs	r28, 1
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <disp_time+0x20>
 1ce:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <t_min>
 1d2:	59 df       	rcall	.-334    	; 0x86 <bin2bcd>
 1d4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <disp_mem+0x4>
	if(mask&(1<<2)) disp_mem[3]=bin2bcd(t_h);
 1d8:	c2 ff       	sbrs	r28, 2
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <disp_time+0x2e>
 1dc:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <t_h>
 1e0:	52 df       	rcall	.-348    	; 0x86 <bin2bcd>
 1e2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <disp_mem+0x3>
	if(mask&(1<<3)) disp_mem[2]=bin2bcd(t_d);
 1e6:	c3 ff       	sbrs	r28, 3
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <disp_time+0x3c>
 1ea:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <t_d>
 1ee:	4b df       	rcall	.-362    	; 0x86 <bin2bcd>
 1f0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <disp_mem+0x2>
	if(mask&(1<<4)) disp_mem[1]=bin2bcd(t_mth);
 1f4:	c4 ff       	sbrs	r28, 4
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <disp_time+0x4a>
 1f8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <t_mth>
 1fc:	44 df       	rcall	.-376    	; 0x86 <bin2bcd>
 1fe:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <disp_mem+0x1>
	if(mask&(1<<5)) disp_mem[0]=bin2bcd(t_y);
 202:	c5 ff       	sbrs	r28, 5
 204:	05 c0       	rjmp	.+10     	; 0x210 <disp_time+0x58>
 206:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <t_y>
 20a:	3d df       	rcall	.-390    	; 0x86 <bin2bcd>
 20c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <disp_mem>
}
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <disp_text>:

void disp_text(char str[])
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
	uint8_t len=strlen(str);
 218:	fc 01       	movw	r30, r24
 21a:	01 90       	ld	r0, Z+
 21c:	00 20       	and	r0, r0
 21e:	e9 f7       	brne	.-6      	; 0x21a <disp_text+0x6>
 220:	31 97       	sbiw	r30, 0x01	; 1
	len=len>6?6:len;
 222:	e8 1b       	sub	r30, r24
 224:	e7 30       	cpi	r30, 0x07	; 7
 226:	08 f0       	brcs	.+2      	; 0x22a <disp_text+0x16>
 228:	e6 e0       	ldi	r30, 0x06	; 6
	for(uint8_t c=0;c<len;c++)
 22a:	ee 23       	and	r30, r30
 22c:	89 f0       	breq	.+34     	; 0x250 <disp_text+0x3c>
 22e:	dc 01       	movw	r26, r24
 230:	c7 e1       	ldi	r28, 0x17	; 23
 232:	d1 e0       	ldi	r29, 0x01	; 1
 234:	e1 50       	subi	r30, 0x01	; 1
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	31 96       	adiw	r30, 0x01	; 1
 23a:	8e 0f       	add	r24, r30
 23c:	9f 1f       	adc	r25, r31
	{
		disp_mem[c]=pgm_read_byte(&alphabet[str[c]-'a']);
 23e:	ed 91       	ld	r30, X+
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	ed 52       	subi	r30, 0x2D	; 45
 244:	f0 40       	sbci	r31, 0x00	; 0
 246:	e4 91       	lpm	r30, Z
 248:	e9 93       	st	Y+, r30

void disp_text(char str[])
{
	uint8_t len=strlen(str);
	len=len>6?6:len;
	for(uint8_t c=0;c<len;c++)
 24a:	a8 17       	cp	r26, r24
 24c:	b9 07       	cpc	r27, r25
 24e:	b9 f7       	brne	.-18     	; 0x23e <disp_text+0x2a>
	{
		disp_mem[c]=pgm_read_byte(&alphabet[str[c]-'a']);
	}
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <main>:


int main(void)
{
	/* Initialise ports immediately (fixed in v0.4) */
	PORTC=0b00111111; /* Shut down displays...  */
 256:	8f e3       	ldi	r24, 0x3F	; 63
 258:	88 b9       	out	0x08, r24	; 8
	DDRC =0b00111111; /* ...before being output */
 25a:	87 b9       	out	0x07, r24	; 7
	
	
	PORTD=0b00000000;
 25c:	1b b8       	out	0x0b, r1	; 11
	DDRD =0b11111111;
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	8a b9       	out	0x0a, r24	; 10
	
	PORTB=0b11111111;
 262:	85 b9       	out	0x05, r24	; 5
	DDRB =0b11111111;
 264:	84 b9       	out	0x04, r24	; 4
	
	//Default display memory
	disp_clear(0b00111111);
 266:	8f e3       	ldi	r24, 0x3F	; 63
 268:	92 df       	rcall	.-220    	; 0x18e <disp_clear>
	
	//Default time
	t_y=17;
 26a:	81 e1       	ldi	r24, 0x11	; 17
 26c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <t_y>
	t_mth=9;
 270:	89 e0       	ldi	r24, 0x09	; 9
 272:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <t_mth>
	t_d=29;
 276:	8d e1       	ldi	r24, 0x1D	; 29
 278:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <t_d>
	t_h=2;
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <t_h>
	t_min=27;
 282:	8b e1       	ldi	r24, 0x1B	; 27
 284:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <t_min>
	t_s=24;
 288:	88 e1       	ldi	r24, 0x18	; 24
 28a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <t_s>
	
	SMCR=SMCR|1<<SE;
 28e:	83 b7       	in	r24, 0x33	; 51
 290:	81 60       	ori	r24, 0x01	; 1
 292:	83 bf       	out	0x33, r24	; 51
		TCCR2B=TCCR2B|1<<CS22|1<<CS21|1<<CS20;
		
	}
	else
	{
		OCR2A=220;
 294:	8c ed       	ldi	r24, 0xDC	; 220
 296:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__EEPROM_REGION_LENGTH__+0x7f00b3>
		TIMSK2=TIMSK2|1<<OCIE2A;
 29a:	e0 e7       	ldi	r30, 0x70	; 112
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	82 60       	ori	r24, 0x02	; 2
 2a2:	80 83       	st	Z, r24
		TCCR2A=TCCR2A|1<<WGM21;
 2a4:	e0 eb       	ldi	r30, 0xB0	; 176
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	82 60       	ori	r24, 0x02	; 2
 2ac:	80 83       	st	Z, r24
		TCCR2B=TCCR2B|1<<CS22|1<<CS21|1<<CS20;
 2ae:	e1 eb       	ldi	r30, 0xB1	; 177
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	87 60       	ori	r24, 0x07	; 7
 2b6:	80 83       	st	Z, r24
	}
	
	
	//All is ready, let's go!
	init_states();
 2b8:	af d0       	rcall	.+350    	; 0x418 <init_states>
	state_goto(1);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	6a d0       	rcall	.+212    	; 0x392 <state_goto>
	sei();
 2be:	78 94       	sei
    while (1) 
    {
		
		for(int c=0;c<6;c++)
		{
			PORTC=0b00111111&~(1<<c);
 2c0:	c1 e0       	ldi	r28, 0x01	; 1
 2c2:	d0 e0       	ldi	r29, 0x00	; 0
			PORTD=disp_mem[c];
			
			//PORTD=cntr&&0xff;
			for(uint16_t i=5*4;--i;);
			PORTD=0b00000000;
			PORTC=0b00111111;
 2c4:	1f e3       	ldi	r17, 0x3F	; 63
 2c6:	e7 e1       	ldi	r30, 0x17	; 23
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
	sei();
	
    while (1) 
    {
		
		for(int c=0;c<6;c++)
 2ca:	20 e0       	ldi	r18, 0x00	; 0
 2cc:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTC=0b00111111&~(1<<c);
 2ce:	ce 01       	movw	r24, r28
 2d0:	02 2e       	mov	r0, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <main+0x82>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <main+0x7e>
 2dc:	80 95       	com	r24
 2de:	8f 73       	andi	r24, 0x3F	; 63
 2e0:	88 b9       	out	0x08, r24	; 8
			//PORTD=(cntr>>(8*(5-c)))&0xff;
			PORTD=disp_mem[c];
 2e2:	81 91       	ld	r24, Z+
 2e4:	8b b9       	out	0x0b, r24	; 11
			
			//PORTD=cntr&&0xff;
			for(uint16_t i=5*4;--i;);
 2e6:	84 e1       	ldi	r24, 0x14	; 20
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x94>
			PORTD=0b00000000;
 2ee:	1b b8       	out	0x0b, r1	; 11
			PORTC=0b00111111;
 2f0:	18 b9       	out	0x08, r17	; 8
			for(uint16_t i=5*4*1;--i;);
 2f2:	84 e1       	ldi	r24, 0x14	; 20
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <main+0xa0>
	sei();
	
    while (1) 
    {
		
		for(int c=0;c<6;c++)
 2fa:	2f 5f       	subi	r18, 0xFF	; 255
 2fc:	3f 4f       	sbci	r19, 0xFF	; 255
 2fe:	26 30       	cpi	r18, 0x06	; 6
 300:	31 05       	cpc	r19, r1
 302:	29 f7       	brne	.-54     	; 0x2ce <main+0x78>
			PORTC=0b00111111;
			for(uint16_t i=5*4*1;--i;);
			
			
		}
		btn_read();
 304:	d3 de       	rcall	.-602    	; 0xac <btn_read>
		
		
		
		
/* main() must never end! */
    }
 306:	df cf       	rjmp	.-66     	; 0x2c6 <main+0x70>

00000308 <__vector_7>:




ISR(TIMER2_COMPA_vect)
{
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	2f 93       	push	r18
 314:	3f 93       	push	r19
 316:	4f 93       	push	r20
 318:	5f 93       	push	r21
 31a:	6f 93       	push	r22
 31c:	7f 93       	push	r23
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
 322:	af 93       	push	r26
 324:	bf 93       	push	r27
 326:	ef 93       	push	r30
 328:	ff 93       	push	r31
	if(++t_s==60)
 32a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <t_s>
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	8c 33       	cpi	r24, 0x3C	; 60
 332:	19 f0       	breq	.+6      	; 0x33a <__vector_7+0x32>
 334:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <t_s>
 338:	16 c0       	rjmp	.+44     	; 0x366 <__vector_7+0x5e>
	{
		t_s=0;
 33a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <t_s>
		if(++t_min==60)
 33e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <t_min>
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	8c 33       	cpi	r24, 0x3C	; 60
 346:	19 f0       	breq	.+6      	; 0x34e <__vector_7+0x46>
 348:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <t_min>
 34c:	0c c0       	rjmp	.+24     	; 0x366 <__vector_7+0x5e>
		{
			t_min=0;
 34e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <t_min>
			if(++t_h==24)
 352:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <t_h>
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	88 31       	cpi	r24, 0x18	; 24
 35a:	19 f0       	breq	.+6      	; 0x362 <__vector_7+0x5a>
 35c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <t_h>
 360:	02 c0       	rjmp	.+4      	; 0x366 <__vector_7+0x5e>
			{
				t_h=0;
 362:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <t_h>
				
			}
		}
	}

	disp_time(time_mask);
 366:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 36a:	26 df       	rcall	.-436    	; 0x1b8 <disp_time>
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	bf 91       	pop	r27
 372:	af 91       	pop	r26
 374:	9f 91       	pop	r25
 376:	8f 91       	pop	r24
 378:	7f 91       	pop	r23
 37a:	6f 91       	pop	r22
 37c:	5f 91       	pop	r21
 37e:	4f 91       	pop	r20
 380:	3f 91       	pop	r19
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <do_nothing>:
}



void do_nothing(uint8_t arg)
{
 38e:	08 95       	ret

00000390 <init_nothing>:
	
}

void init_nothing()
{
 390:	08 95       	ret

00000392 <state_goto>:
	
}

void state_goto(uint8_t arg)
{
	state=arg;
 392:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <state>
	states[state].init();
 396:	94 e1       	ldi	r25, 0x14	; 20
 398:	89 9f       	mul	r24, r25
 39a:	f0 01       	movw	r30, r0
 39c:	11 24       	eor	r1, r1
 39e:	ec 5d       	subi	r30, 0xDC	; 220
 3a0:	fe 4f       	sbci	r31, 0xFE	; 254
 3a2:	01 90       	ld	r0, Z+
 3a4:	f0 81       	ld	r31, Z
 3a6:	e0 2d       	mov	r30, r0
 3a8:	09 95       	icall
 3aa:	08 95       	ret

000003ac <init0>:


/* Init function for state 0 (power saver)*/
void init0()
{
	time_mask=0;
 3ac:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	disp_clear(0b00111111);
 3b0:	8f e3       	ldi	r24, 0x3F	; 63
 3b2:	ed de       	rcall	.-550    	; 0x18e <disp_clear>
	disp_time(time_mask);
 3b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3b8:	ff de       	rcall	.-514    	; 0x1b8 <disp_time>
 3ba:	08 95       	ret

000003bc <init1>:
}
void init1()
{
	time_mask=0b110;
 3bc:	86 e0       	ldi	r24, 0x06	; 6
 3be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	disp_clear(0b00111111);
 3c2:	8f e3       	ldi	r24, 0x3F	; 63
 3c4:	e4 de       	rcall	.-568    	; 0x18e <disp_clear>
	disp_time(time_mask);
 3c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3ca:	f6 de       	rcall	.-532    	; 0x1b8 <disp_time>
 3cc:	08 95       	ret

000003ce <init2>:
}
void init2()
{
	time_mask=0b111111;
 3ce:	8f e3       	ldi	r24, 0x3F	; 63
 3d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	disp_time(time_mask);
 3d4:	f1 de       	rcall	.-542    	; 0x1b8 <disp_time>
 3d6:	08 95       	ret

000003d8 <init3>:
}
void init3()
{
	time_mask=0b000000;
 3d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	disp_clear(0b00111111);
 3dc:	8f e3       	ldi	r24, 0x3F	; 63
 3de:	d7 de       	rcall	.-594    	; 0x18e <disp_clear>
	disp_text("fun");
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	17 df       	rcall	.-466    	; 0x214 <disp_text>
 3e6:	08 95       	ret

000003e8 <init4>:
}
void init4()
{
	time_mask=0b000000;
 3e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	disp_clear(0b00111111);
 3ec:	8f e3       	ldi	r24, 0x3F	; 63
 3ee:	cf de       	rcall	.-610    	; 0x18e <disp_clear>
	disp_text("set");
 3f0:	85 e0       	ldi	r24, 0x05	; 5
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0f df       	rcall	.-482    	; 0x214 <disp_text>
 3f6:	08 95       	ret

000003f8 <init5>:
}
void init5()
{
	time_mask=0b000000;
 3f8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	disp_clear(0b00111111);
 3fc:	8f e3       	ldi	r24, 0x3F	; 63
 3fe:	c7 de       	rcall	.-626    	; 0x18e <disp_clear>
	disp_text("snake");
 400:	89 e0       	ldi	r24, 0x09	; 9
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	07 df       	rcall	.-498    	; 0x214 <disp_text>
 406:	08 95       	ret

00000408 <init6>:
}
void init6()
{
	time_mask=0b000000;
 408:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	disp_clear(0b00111111);
 40c:	8f e3       	ldi	r24, 0x3F	; 63
 40e:	bf de       	rcall	.-642    	; 0x18e <disp_clear>
	disp_text("other");
 410:	8f e0       	ldi	r24, 0x0F	; 15
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	ff de       	rcall	.-514    	; 0x214 <disp_text>
 416:	08 95       	ret

00000418 <init_states>:
	state=arg;
	states[state].init();
}

void init_states()
{
 418:	e4 e2       	ldi	r30, 0x24	; 36
 41a:	f1 e0       	ldi	r31, 0x01	; 1
 41c:	44 e6       	ldi	r20, 0x64	; 100
 41e:	52 e0       	ldi	r21, 0x02	; 2
	/* First clear the whole array */
	for(uint8_t i=0;i<STATES_NUM;i++)
	{
		states[i].init=&init_nothing;
 420:	28 ec       	ldi	r18, 0xC8	; 200
 422:	31 e0       	ldi	r19, 0x01	; 1
		
		states[i].btn_down_fcn[0]=&do_nothing;
 424:	87 ec       	ldi	r24, 0xC7	; 199
 426:	91 e0       	ldi	r25, 0x01	; 1
void init_states()
{
	/* First clear the whole array */
	for(uint8_t i=0;i<STATES_NUM;i++)
	{
		states[i].init=&init_nothing;
 428:	31 83       	std	Z+1, r19	; 0x01
 42a:	20 83       	st	Z, r18
		
		states[i].btn_down_fcn[0]=&do_nothing;
 42c:	93 83       	std	Z+3, r25	; 0x03
 42e:	82 83       	std	Z+2, r24	; 0x02
		states[i].btn_down_fcn[1]=&do_nothing;
 430:	95 83       	std	Z+5, r25	; 0x05
 432:	84 83       	std	Z+4, r24	; 0x04
		states[i].btn_down_fcn[2]=&do_nothing;
 434:	97 83       	std	Z+7, r25	; 0x07
 436:	86 83       	std	Z+6, r24	; 0x06
		states[i].btn_down_arg[0]=0;
 438:	10 86       	std	Z+8, r1	; 0x08
		states[i].btn_down_arg[1]=0;
 43a:	11 86       	std	Z+9, r1	; 0x09
		states[i].btn_down_arg[2]=0;
 43c:	12 86       	std	Z+10, r1	; 0x0a
		
		states[i].btn_up_fcn[0]=&do_nothing;
 43e:	94 87       	std	Z+12, r25	; 0x0c
 440:	83 87       	std	Z+11, r24	; 0x0b
		states[i].btn_up_fcn[1]=&do_nothing;
 442:	96 87       	std	Z+14, r25	; 0x0e
 444:	85 87       	std	Z+13, r24	; 0x0d
		states[i].btn_up_fcn[2]=&do_nothing;
 446:	90 8b       	std	Z+16, r25	; 0x10
 448:	87 87       	std	Z+15, r24	; 0x0f
		states[i].btn_up_arg[0]=0;
 44a:	11 8a       	std	Z+17, r1	; 0x11
		states[i].btn_up_arg[1]=0;
 44c:	12 8a       	std	Z+18, r1	; 0x12
		states[i].btn_up_arg[2]=0;
 44e:	13 8a       	std	Z+19, r1	; 0x13
 450:	74 96       	adiw	r30, 0x14	; 20
}

void init_states()
{
	/* First clear the whole array */
	for(uint8_t i=0;i<STATES_NUM;i++)
 452:	e4 17       	cp	r30, r20
 454:	f5 07       	cpc	r31, r21
 456:	41 f7       	brne	.-48     	; 0x428 <init_states+0x10>
		states[i].btn_up_arg[0]=0;
		states[i].btn_up_arg[1]=0;
		states[i].btn_up_arg[2]=0;
	}
	/* State 0 */
	states[0].init=&init0;
 458:	e4 e2       	ldi	r30, 0x24	; 36
 45a:	f1 e0       	ldi	r31, 0x01	; 1
 45c:	86 ed       	ldi	r24, 0xD6	; 214
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	91 83       	std	Z+1, r25	; 0x01
 462:	80 83       	st	Z, r24
	
	states[0].btn_down_fcn[2]=&state_goto;
 464:	89 ec       	ldi	r24, 0xC9	; 201
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	97 83       	std	Z+7, r25	; 0x07
 46a:	86 83       	std	Z+6, r24	; 0x06
	states[0].btn_down_arg[2]=1;
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	22 87       	std	Z+10, r18	; 0x0a
	
	
	/* State 1 */
	states[1].init=&init1;
 470:	4e ed       	ldi	r20, 0xDE	; 222
 472:	51 e0       	ldi	r21, 0x01	; 1
 474:	55 8b       	std	Z+21, r21	; 0x15
 476:	44 8b       	std	Z+20, r20	; 0x14
	
	states[1].btn_down_fcn[0]=&state_goto;
 478:	97 8b       	std	Z+23, r25	; 0x17
 47a:	86 8b       	std	Z+22, r24	; 0x16
	states[1].btn_down_arg[0]=0;
 47c:	14 8e       	std	Z+28, r1	; 0x1c
	states[1].btn_down_fcn[2]=&state_goto;
 47e:	93 8f       	std	Z+27, r25	; 0x1b
 480:	82 8f       	std	Z+26, r24	; 0x1a
	states[1].btn_down_arg[2]=2;
 482:	32 e0       	ldi	r19, 0x02	; 2
 484:	36 8f       	std	Z+30, r19	; 0x1e
	
	
	/* State 2 */
	states[2].init=&init2;
 486:	47 ee       	ldi	r20, 0xE7	; 231
 488:	51 e0       	ldi	r21, 0x01	; 1
 48a:	51 a7       	std	Z+41, r21	; 0x29
 48c:	40 a7       	std	Z+40, r20	; 0x28
	
	states[2].btn_down_fcn[0]=&state_goto;
 48e:	93 a7       	std	Z+43, r25	; 0x2b
 490:	82 a7       	std	Z+42, r24	; 0x2a
	states[2].btn_down_arg[0]=1;
 492:	20 ab       	std	Z+48, r18	; 0x30
	states[2].btn_down_fcn[2]=&state_goto;
 494:	97 a7       	std	Z+47, r25	; 0x2f
 496:	86 a7       	std	Z+46, r24	; 0x2e
	states[2].btn_down_arg[2]=3;
 498:	23 e0       	ldi	r18, 0x03	; 3
 49a:	22 ab       	std	Z+50, r18	; 0x32
	
	
	/* State 3 */
	states[3].init=&init3;
 49c:	4c ee       	ldi	r20, 0xEC	; 236
 49e:	51 e0       	ldi	r21, 0x01	; 1
 4a0:	55 af       	std	Z+61, r21	; 0x3d
 4a2:	44 af       	std	Z+60, r20	; 0x3c
	
	states[3].btn_down_fcn[0]=&state_goto;
 4a4:	97 af       	std	Z+63, r25	; 0x3f
 4a6:	86 af       	std	Z+62, r24	; 0x3e
	states[3].btn_down_arg[0]=2;
 4a8:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <states+0x44>
	states[3].btn_down_fcn[1]=&state_goto;
 4ac:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <states+0x41>
 4b0:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <states+0x40>
	states[3].btn_down_arg[1]=5;
 4b4:	35 e0       	ldi	r19, 0x05	; 5
 4b6:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <states+0x45>
	states[3].btn_down_fcn[2]=&state_goto;
 4ba:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <states+0x43>
 4be:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <states+0x42>
	states[3].btn_down_arg[2]=4;
 4c2:	44 e0       	ldi	r20, 0x04	; 4
 4c4:	40 93 6a 01 	sts	0x016A, r20	; 0x80016a <states+0x46>
	
	
	/* State 4 */
	states[4].init=&init4;
 4c8:	44 ef       	ldi	r20, 0xF4	; 244
 4ca:	51 e0       	ldi	r21, 0x01	; 1
 4cc:	50 93 75 01 	sts	0x0175, r21	; 0x800175 <states+0x51>
 4d0:	40 93 74 01 	sts	0x0174, r20	; 0x800174 <states+0x50>
	
	states[4].btn_down_fcn[0]=&state_goto;
 4d4:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <states+0x53>
 4d8:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <states+0x52>
	states[4].btn_down_arg[0]=3;
 4dc:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <states+0x58>
	//states[4].btn_down_fcn[2]=&state_goto;
	//states[4].btn_down_arg[2]=4;
	
	
	/* State 5 */
	states[5].init=&init5;
 4e0:	4c ef       	ldi	r20, 0xFC	; 252
 4e2:	51 e0       	ldi	r21, 0x01	; 1
 4e4:	50 93 89 01 	sts	0x0189, r21	; 0x800189 <states+0x65>
 4e8:	40 93 88 01 	sts	0x0188, r20	; 0x800188 <states+0x64>
	
	states[5].btn_down_fcn[0]=&state_goto;
 4ec:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <states+0x67>
 4f0:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <states+0x66>
	states[5].btn_down_arg[0]=3;
 4f4:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <states+0x6c>
	states[5].btn_down_fcn[1]=&state_goto;
 4f8:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <states+0x69>
 4fc:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <states+0x68>
	states[5].btn_down_arg[1]=7;
 500:	27 e0       	ldi	r18, 0x07	; 7
 502:	20 93 91 01 	sts	0x0191, r18	; 0x800191 <states+0x6d>
	states[5].btn_down_fcn[2]=&state_goto;
 506:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <states+0x6b>
 50a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <states+0x6a>
	states[5].btn_down_arg[2]=6;
 50e:	26 e0       	ldi	r18, 0x06	; 6
 510:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <states+0x6e>
	
	/* State 6 */
	states[6].init=&init6;
 514:	44 e0       	ldi	r20, 0x04	; 4
 516:	52 e0       	ldi	r21, 0x02	; 2
 518:	50 93 9d 01 	sts	0x019D, r21	; 0x80019d <states+0x79>
 51c:	40 93 9c 01 	sts	0x019C, r20	; 0x80019c <states+0x78>
	
	states[6].btn_down_fcn[0]=&state_goto;
 520:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <states+0x7b>
 524:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <states+0x7a>
	states[6].btn_down_arg[0]=5;
 528:	30 93 a4 01 	sts	0x01A4, r19	; 0x8001a4 <states+0x80>
 52c:	08 95       	ret

0000052e <_exit>:
 52e:	f8 94       	cli

00000530 <__stop_program>:
 530:	ff cf       	rjmp	.-2      	; 0x530 <__stop_program>
