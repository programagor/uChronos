
uChronos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000004d8  0000056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000116  0080011a  0080011a  00000586  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001141  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aac  00000000  00000000  00001855  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1e  00000000  00000000  00002301  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dd  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000472  00000000  00000000  00003419  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000388b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	26 c0       	rjmp	.+76     	; 0x4e <__ctors_end>
   2:	40 c0       	rjmp	.+128    	; 0x84 <__bad_interrupt>
   4:	3f c0       	rjmp	.+126    	; 0x84 <__bad_interrupt>
   6:	3e c0       	rjmp	.+124    	; 0x84 <__bad_interrupt>
   8:	3d c0       	rjmp	.+122    	; 0x84 <__bad_interrupt>
   a:	3c c0       	rjmp	.+120    	; 0x84 <__bad_interrupt>
   c:	3b c0       	rjmp	.+118    	; 0x84 <__bad_interrupt>
   e:	4c c1       	rjmp	.+664    	; 0x2a8 <__vector_7>
  10:	39 c0       	rjmp	.+114    	; 0x84 <__bad_interrupt>
  12:	38 c0       	rjmp	.+112    	; 0x84 <__bad_interrupt>
  14:	37 c0       	rjmp	.+110    	; 0x84 <__bad_interrupt>
  16:	36 c0       	rjmp	.+108    	; 0x84 <__bad_interrupt>
  18:	35 c0       	rjmp	.+106    	; 0x84 <__bad_interrupt>
  1a:	34 c0       	rjmp	.+104    	; 0x84 <__bad_interrupt>
  1c:	33 c0       	rjmp	.+102    	; 0x84 <__bad_interrupt>
  1e:	32 c0       	rjmp	.+100    	; 0x84 <__bad_interrupt>
  20:	31 c0       	rjmp	.+98     	; 0x84 <__bad_interrupt>
  22:	30 c0       	rjmp	.+96     	; 0x84 <__bad_interrupt>
  24:	2f c0       	rjmp	.+94     	; 0x84 <__bad_interrupt>
  26:	2e c0       	rjmp	.+92     	; 0x84 <__bad_interrupt>
  28:	2d c0       	rjmp	.+90     	; 0x84 <__bad_interrupt>
  2a:	2c c0       	rjmp	.+88     	; 0x84 <__bad_interrupt>
  2c:	2b c0       	rjmp	.+86     	; 0x84 <__bad_interrupt>
  2e:	2a c0       	rjmp	.+84     	; 0x84 <__bad_interrupt>
  30:	29 c0       	rjmp	.+82     	; 0x84 <__bad_interrupt>
  32:	28 c0       	rjmp	.+80     	; 0x84 <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	80 c0       	rjmp	.+256    	; 0x136 <disp_clear+0x8>
  36:	88 8c       	ldd	r8, Y+24	; 0x18
  38:	84 c8       	rjmp	.-3832   	; 0xfffff142 <__eeprom_end+0xff7ef142>
  3a:	cc c4       	rjmp	.+2456   	; 0x9d4 <__data_load_end+0x4e2>
  3c:	48 4c       	sbci	r20, 0xC8	; 200
  3e:	a0 e0       	ldi	r26, 0x00	; 0
  40:	a8 ac       	ldd	r10, Y+56	; 0x38
  42:	a4 e8       	ldi	r26, 0x84	; 132
  44:	ec e4       	ldi	r30, 0x4C	; 76
  46:	68 6c       	ori	r22, 0xC8	; 200
  48:	a2 e2       	ldi	r26, 0x22	; 34
  4a:	4e aa       	std	Y+54, r4	; 0x36
  4c:	ae a6       	std	Y+46, r10	; 0x2e

0000004e <__ctors_end>:
  4e:	11 24       	eor	r1, r1
  50:	1f be       	out	0x3f, r1	; 63
  52:	cf ef       	ldi	r28, 0xFF	; 255
  54:	d2 e0       	ldi	r29, 0x02	; 2
  56:	de bf       	out	0x3e, r29	; 62
  58:	cd bf       	out	0x3d, r28	; 61

0000005a <__do_copy_data>:
  5a:	11 e0       	ldi	r17, 0x01	; 1
  5c:	a0 e0       	ldi	r26, 0x00	; 0
  5e:	b1 e0       	ldi	r27, 0x01	; 1
  60:	e8 ed       	ldi	r30, 0xD8	; 216
  62:	f4 e0       	ldi	r31, 0x04	; 4
  64:	02 c0       	rjmp	.+4      	; 0x6a <__do_copy_data+0x10>
  66:	05 90       	lpm	r0, Z+
  68:	0d 92       	st	X+, r0
  6a:	aa 31       	cpi	r26, 0x1A	; 26
  6c:	b1 07       	cpc	r27, r17
  6e:	d9 f7       	brne	.-10     	; 0x66 <__do_copy_data+0xc>

00000070 <__do_clear_bss>:
  70:	22 e0       	ldi	r18, 0x02	; 2
  72:	aa e1       	ldi	r26, 0x1A	; 26
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a0 33       	cpi	r26, 0x30	; 48
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	ba d0       	rcall	.+372    	; 0x1f6 <main>
  82:	28 c2       	rjmp	.+1104   	; 0x4d4 <_exit>

00000084 <__bad_interrupt>:
  84:	bd cf       	rjmp	.-134    	; 0x0 <__vectors>

00000086 <bin2bcd>:
#include <avr/io.h>
#include "bin_utils.h"

uint8_t bin2bcd(uint8_t bin)
{
	return (bin%10)|(bin/10)<<4;
  86:	9d ec       	ldi	r25, 0xCD	; 205
  88:	89 9f       	mul	r24, r25
  8a:	91 2d       	mov	r25, r1
  8c:	11 24       	eor	r1, r1
  8e:	96 95       	lsr	r25
  90:	96 95       	lsr	r25
  92:	96 95       	lsr	r25
  94:	20 e1       	ldi	r18, 0x10	; 16
  96:	92 9f       	mul	r25, r18
  98:	a0 01       	movw	r20, r0
  9a:	11 24       	eor	r1, r1
  9c:	99 0f       	add	r25, r25
  9e:	29 2f       	mov	r18, r25
  a0:	22 0f       	add	r18, r18
  a2:	22 0f       	add	r18, r18
  a4:	92 0f       	add	r25, r18
  a6:	89 1b       	sub	r24, r25
  a8:	84 2b       	or	r24, r20
  aa:	08 95       	ret

000000ac <btn_read>:

uint8_t btn_mem[1]={0};

void btn_read()
{
	uint8_t btns=~PINB & 0b111;
  ac:	83 b1       	in	r24, 0x03	; 3
  ae:	80 95       	com	r24
  b0:	98 2f       	mov	r25, r24
  b2:	97 70       	andi	r25, 0x07	; 7
	uint8_t p=btns^btn_mem[0];
  b4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
  b8:	89 27       	eor	r24, r25
	if(p)
  ba:	c1 f1       	breq	.+112    	; 0x12c <btn_read+0x80>
	{
		uint8_t i;
		for(i=0;!(p&(1<<i));i++); //Find the button that changed
  bc:	68 2f       	mov	r22, r24
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	80 fd       	sbrc	r24, 0
  c2:	0e c0       	rjmp	.+28     	; 0xe0 <btn_read+0x34>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	48 2f       	mov	r20, r24
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	9b 01       	movw	r18, r22
  ce:	08 2e       	mov	r0, r24
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <btn_read+0x2a>
  d2:	35 95       	asr	r19
  d4:	27 95       	ror	r18
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <btn_read+0x26>
  da:	20 ff       	sbrs	r18, 0
  dc:	f4 cf       	rjmp	.-24     	; 0xc6 <btn_read+0x1a>
  de:	02 c0       	rjmp	.+4      	; 0xe4 <btn_read+0x38>
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	50 e0       	ldi	r21, 0x00	; 0
		btn_mem[0]=btns;
  e4:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <__data_end>
		
		uint8_t next_state;
		if(btn_mem[0]&(1<<i))
  e8:	89 2f       	mov	r24, r25
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	04 2e       	mov	r0, r20
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <btn_read+0x48>
  f0:	95 95       	asr	r25
  f2:	87 95       	ror	r24
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <btn_read+0x44>
  f8:	80 ff       	sbrs	r24, 0
  fa:	0c c0       	rjmp	.+24     	; 0x114 <btn_read+0x68>
		{
			next_state=states[state].btn_down_next[i];
  fc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
 100:	9b e0       	ldi	r25, 0x0B	; 11
 102:	89 9f       	mul	r24, r25
 104:	40 0d       	add	r20, r0
 106:	51 1d       	adc	r21, r1
 108:	11 24       	eor	r1, r1
 10a:	fa 01       	movw	r30, r20
 10c:	e8 5d       	subi	r30, 0xD8	; 216
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	85 81       	ldd	r24, Z+5	; 0x05
 112:	0b c0       	rjmp	.+22     	; 0x12a <btn_read+0x7e>
		}
		else
		{
			
			next_state=states[state].btn_up_next[i];
 114:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
 118:	9b e0       	ldi	r25, 0x0B	; 11
 11a:	89 9f       	mul	r24, r25
 11c:	40 0d       	add	r20, r0
 11e:	51 1d       	adc	r21, r1
 120:	11 24       	eor	r1, r1
 122:	fa 01       	movw	r30, r20
 124:	e8 5d       	subi	r30, 0xD8	; 216
 126:	fe 4f       	sbci	r31, 0xFE	; 254
 128:	80 85       	ldd	r24, Z+8	; 0x08
		}
		
		state_goto(next_state);
 12a:	40 d1       	rcall	.+640    	; 0x3ac <state_goto>
 12c:	08 95       	ret

0000012e <disp_clear>:
		if(mask&(1<<i)) disp_mem[i]=0xff;
	}
}

void disp_clear(uint8_t mask)
{
 12e:	eb e1       	ldi	r30, 0x1B	; 27
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i=0;i<6;i++)
	{
		if(mask&(1<<i)) disp_mem[i]=0x00;
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	ac 01       	movw	r20, r24
 13a:	02 2e       	mov	r0, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <disp_clear+0x14>
 13e:	55 95       	asr	r21
 140:	47 95       	ror	r20
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <disp_clear+0x10>
 146:	40 fd       	sbrc	r20, 0
 148:	10 82       	st	Z, r1
 14a:	2f 5f       	subi	r18, 0xFF	; 255
 14c:	3f 4f       	sbci	r19, 0xFF	; 255
 14e:	31 96       	adiw	r30, 0x01	; 1
	}
}

void disp_clear(uint8_t mask)
{
	for (uint8_t i=0;i<6;i++)
 150:	26 30       	cpi	r18, 0x06	; 6
 152:	31 05       	cpc	r19, r1
 154:	89 f7       	brne	.-30     	; 0x138 <disp_clear+0xa>
	{
		if(mask&(1<<i)) disp_mem[i]=0x00;
	}
}
 156:	08 95       	ret

00000158 <disp_time>:

void disp_time(uint8_t mask)
{
 158:	cf 93       	push	r28
 15a:	c8 2f       	mov	r28, r24
	if(mask&(1<<0)) disp_mem[5]=bin2bcd(t_s);
 15c:	80 ff       	sbrs	r24, 0
 15e:	05 c0       	rjmp	.+10     	; 0x16a <disp_time+0x12>
 160:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <t_s>
 164:	90 df       	rcall	.-224    	; 0x86 <bin2bcd>
 166:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <disp_mem+0x5>
	if(mask&(1<<1)) disp_mem[4]=bin2bcd(t_min);
 16a:	c1 ff       	sbrs	r28, 1
 16c:	05 c0       	rjmp	.+10     	; 0x178 <disp_time+0x20>
 16e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <t_min>
 172:	89 df       	rcall	.-238    	; 0x86 <bin2bcd>
 174:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <disp_mem+0x4>
	if(mask&(1<<2)) disp_mem[3]=bin2bcd(t_h);
 178:	c2 ff       	sbrs	r28, 2
 17a:	05 c0       	rjmp	.+10     	; 0x186 <disp_time+0x2e>
 17c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <t_h>
 180:	82 df       	rcall	.-252    	; 0x86 <bin2bcd>
 182:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <disp_mem+0x3>
	if(mask&(1<<3)) disp_mem[2]=bin2bcd(t_d);
 186:	c3 ff       	sbrs	r28, 3
 188:	05 c0       	rjmp	.+10     	; 0x194 <disp_time+0x3c>
 18a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <t_d>
 18e:	7b df       	rcall	.-266    	; 0x86 <bin2bcd>
 190:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <disp_mem+0x2>
	if(mask&(1<<4)) disp_mem[1]=bin2bcd(t_mth);
 194:	c4 ff       	sbrs	r28, 4
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <disp_time+0x4a>
 198:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <t_mth>
 19c:	74 df       	rcall	.-280    	; 0x86 <bin2bcd>
 19e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <disp_mem+0x1>
	if(mask&(1<<5)) disp_mem[0]=bin2bcd(t_y);
 1a2:	c5 ff       	sbrs	r28, 5
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <disp_time+0x58>
 1a6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <t_y>
 1aa:	6d df       	rcall	.-294    	; 0x86 <bin2bcd>
 1ac:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <disp_mem>
}
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <disp_text>:

void disp_text(char str[])
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	uint8_t len=strlen(str);
 1b8:	fc 01       	movw	r30, r24
 1ba:	01 90       	ld	r0, Z+
 1bc:	00 20       	and	r0, r0
 1be:	e9 f7       	brne	.-6      	; 0x1ba <disp_text+0x6>
 1c0:	31 97       	sbiw	r30, 0x01	; 1
	len=len>6?6:len;
 1c2:	e8 1b       	sub	r30, r24
 1c4:	e7 30       	cpi	r30, 0x07	; 7
 1c6:	08 f0       	brcs	.+2      	; 0x1ca <disp_text+0x16>
 1c8:	e6 e0       	ldi	r30, 0x06	; 6
	for(uint8_t c=0;c<len;c++)
 1ca:	ee 23       	and	r30, r30
 1cc:	89 f0       	breq	.+34     	; 0x1f0 <disp_text+0x3c>
 1ce:	dc 01       	movw	r26, r24
 1d0:	cb e1       	ldi	r28, 0x1B	; 27
 1d2:	d1 e0       	ldi	r29, 0x01	; 1
 1d4:	e1 50       	subi	r30, 0x01	; 1
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	31 96       	adiw	r30, 0x01	; 1
 1da:	8e 0f       	add	r24, r30
 1dc:	9f 1f       	adc	r25, r31
	{
		disp_mem[c]=pgm_read_byte(&alphabet[str[c]-'a']);
 1de:	ed 91       	ld	r30, X+
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	ed 52       	subi	r30, 0x2D	; 45
 1e4:	f0 40       	sbci	r31, 0x00	; 0
 1e6:	e4 91       	lpm	r30, Z
 1e8:	e9 93       	st	Y+, r30

void disp_text(char str[])
{
	uint8_t len=strlen(str);
	len=len>6?6:len;
	for(uint8_t c=0;c<len;c++)
 1ea:	a8 17       	cp	r26, r24
 1ec:	b9 07       	cpc	r27, r25
 1ee:	b9 f7       	brne	.-18     	; 0x1de <disp_text+0x2a>
	{
		disp_mem[c]=pgm_read_byte(&alphabet[str[c]-'a']);
	}
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <main>:


int main(void)
{
	/* Initialise ports immediately (fixed in v0.4) */
	PORTC=0b00111111; /* Shut down displays...  */
 1f6:	8f e3       	ldi	r24, 0x3F	; 63
 1f8:	88 b9       	out	0x08, r24	; 8
	DDRC =0b00111111; /* ...before being output */
 1fa:	87 b9       	out	0x07, r24	; 7
	
	
	PORTD=0b00000000;
 1fc:	1b b8       	out	0x0b, r1	; 11
	DDRD =0b11111111;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	8a b9       	out	0x0a, r24	; 10
	
	PORTB=0b11111111;
 202:	85 b9       	out	0x05, r24	; 5
	DDRB =0b11111111;
 204:	84 b9       	out	0x04, r24	; 4
	
	//Default display memory
	disp_clear(0b00111111);
 206:	8f e3       	ldi	r24, 0x3F	; 63
 208:	92 df       	rcall	.-220    	; 0x12e <disp_clear>
	
	//Default time
	t_y=17;
 20a:	81 e1       	ldi	r24, 0x11	; 17
 20c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <t_y>
	t_mth=9;
 210:	89 e0       	ldi	r24, 0x09	; 9
 212:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <t_mth>
	t_d=29;
 216:	8d e1       	ldi	r24, 0x1D	; 29
 218:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <t_d>
	t_h=2;
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <t_h>
	t_min=27;
 222:	8b e1       	ldi	r24, 0x1B	; 27
 224:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <t_min>
	t_s=24;
 228:	88 e1       	ldi	r24, 0x18	; 24
 22a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <t_s>
	
	SMCR=SMCR|1<<SE;
 22e:	83 b7       	in	r24, 0x33	; 51
 230:	81 60       	ori	r24, 0x01	; 1
 232:	83 bf       	out	0x33, r24	; 51
		TCCR2B=TCCR2B|1<<CS22|1<<CS21|1<<CS20;
		
	}
	else
	{
		OCR2A=220;
 234:	8c ed       	ldi	r24, 0xDC	; 220
 236:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__EEPROM_REGION_LENGTH__+0x7f00b3>
		TIMSK2=TIMSK2|1<<OCIE2A;
 23a:	e0 e7       	ldi	r30, 0x70	; 112
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	82 60       	ori	r24, 0x02	; 2
 242:	80 83       	st	Z, r24
		TCCR2A=TCCR2A|1<<WGM21;
 244:	e0 eb       	ldi	r30, 0xB0	; 176
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	80 83       	st	Z, r24
		TCCR2B=TCCR2B|1<<CS22|1<<CS21|1<<CS20;
 24e:	e1 eb       	ldi	r30, 0xB1	; 177
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	87 60       	ori	r24, 0x07	; 7
 256:	80 83       	st	Z, r24
	}
	
	
	//All is ready, let's go!
	init_states();
 258:	b8 d0       	rcall	.+368    	; 0x3ca <init_states>
	state_goto(1);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	a7 d0       	rcall	.+334    	; 0x3ac <state_goto>
	sei();
 25e:	78 94       	sei
    while (1) 
    {
		
		for(int c=0;c<6;c++)
		{
			PORTC=0b00111111&~(1<<c);
 260:	c1 e0       	ldi	r28, 0x01	; 1
 262:	d0 e0       	ldi	r29, 0x00	; 0
			PORTD=disp_mem[c];
			
			//PORTD=cntr&&0xff;
			for(uint16_t i=5*4;--i;);
			PORTD=0b00000000;
			PORTC=0b00111111;
 264:	1f e3       	ldi	r17, 0x3F	; 63
 266:	eb e1       	ldi	r30, 0x1B	; 27
 268:	f1 e0       	ldi	r31, 0x01	; 1
	sei();
	
    while (1) 
    {
		
		for(int c=0;c<6;c++)
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTC=0b00111111&~(1<<c);
 26e:	ce 01       	movw	r24, r28
 270:	02 2e       	mov	r0, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <main+0x82>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	0a 94       	dec	r0
 27a:	e2 f7       	brpl	.-8      	; 0x274 <main+0x7e>
 27c:	80 95       	com	r24
 27e:	8f 73       	andi	r24, 0x3F	; 63
 280:	88 b9       	out	0x08, r24	; 8
			//PORTD=(cntr>>(8*(5-c)))&0xff;
			PORTD=disp_mem[c];
 282:	81 91       	ld	r24, Z+
 284:	8b b9       	out	0x0b, r24	; 11
			
			//PORTD=cntr&&0xff;
			for(uint16_t i=5*4;--i;);
 286:	84 e1       	ldi	r24, 0x14	; 20
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <main+0x94>
			PORTD=0b00000000;
 28e:	1b b8       	out	0x0b, r1	; 11
			PORTC=0b00111111;
 290:	18 b9       	out	0x08, r17	; 8
			for(uint16_t i=5*4*1;--i;);
 292:	84 e1       	ldi	r24, 0x14	; 20
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <main+0xa0>
	sei();
	
    while (1) 
    {
		
		for(int c=0;c<6;c++)
 29a:	2f 5f       	subi	r18, 0xFF	; 255
 29c:	3f 4f       	sbci	r19, 0xFF	; 255
 29e:	26 30       	cpi	r18, 0x06	; 6
 2a0:	31 05       	cpc	r19, r1
 2a2:	29 f7       	brne	.-54     	; 0x26e <main+0x78>
			PORTC=0b00111111;
			for(uint16_t i=5*4*1;--i;);
			
			
		}
		btn_read();
 2a4:	03 df       	rcall	.-506    	; 0xac <btn_read>
		
		
		
		
/* main() must never end! */
    }
 2a6:	df cf       	rjmp	.-66     	; 0x266 <main+0x70>

000002a8 <__vector_7>:




ISR(TIMER2_COMPA_vect)
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
	if(++t_s==60)
 2ca:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <t_s>
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	8c 33       	cpi	r24, 0x3C	; 60
 2d2:	19 f0       	breq	.+6      	; 0x2da <__vector_7+0x32>
 2d4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <t_s>
 2d8:	16 c0       	rjmp	.+44     	; 0x306 <__stack+0x7>
	{
		t_s=0;
 2da:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <t_s>
		if(++t_min==60)
 2de:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <t_min>
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	8c 33       	cpi	r24, 0x3C	; 60
 2e6:	19 f0       	breq	.+6      	; 0x2ee <__vector_7+0x46>
 2e8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <t_min>
 2ec:	0c c0       	rjmp	.+24     	; 0x306 <__stack+0x7>
		{
			t_min=0;
 2ee:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <t_min>
			if(++t_h==24)
 2f2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <t_h>
 2f6:	8f 5f       	subi	r24, 0xFF	; 255
 2f8:	88 31       	cpi	r24, 0x18	; 24
 2fa:	19 f0       	breq	.+6      	; 0x302 <__stack+0x3>
 2fc:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <t_h>
 300:	02 c0       	rjmp	.+4      	; 0x306 <__stack+0x7>
			{
				t_h=0;
 302:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <t_h>
				
			}
		}
	}

	disp_time(time_mask);
 306:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 30a:	26 df       	rcall	.-436    	; 0x158 <disp_time>
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <init_nothing>:
}



void do_nothing(uint8_t arg)
{
 32e:	08 95       	ret

00000330 <init0>:
 330:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 334:	8f e3       	ldi	r24, 0x3F	; 63
 336:	fb de       	rcall	.-522    	; 0x12e <disp_clear>
 338:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 33c:	0d df       	rcall	.-486    	; 0x158 <disp_time>
 33e:	08 95       	ret

00000340 <init1>:
 340:	86 e0       	ldi	r24, 0x06	; 6
 342:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 346:	8f e3       	ldi	r24, 0x3F	; 63
 348:	f2 de       	rcall	.-540    	; 0x12e <disp_clear>
 34a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 34e:	04 df       	rcall	.-504    	; 0x158 <disp_time>
 350:	08 95       	ret

00000352 <init2>:
 352:	8f e3       	ldi	r24, 0x3F	; 63
 354:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 358:	ff de       	rcall	.-514    	; 0x158 <disp_time>
 35a:	08 95       	ret

0000035c <init3>:
 35c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 360:	8f e3       	ldi	r24, 0x3F	; 63
 362:	e5 de       	rcall	.-566    	; 0x12e <disp_clear>
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	25 df       	rcall	.-438    	; 0x1b4 <disp_text>
 36a:	08 95       	ret

0000036c <init4>:
 36c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 370:	8f e3       	ldi	r24, 0x3F	; 63
 372:	dd de       	rcall	.-582    	; 0x12e <disp_clear>
 374:	85 e0       	ldi	r24, 0x05	; 5
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	1d df       	rcall	.-454    	; 0x1b4 <disp_text>
 37a:	08 95       	ret

0000037c <init5>:
 37c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 380:	8f e3       	ldi	r24, 0x3F	; 63
 382:	d5 de       	rcall	.-598    	; 0x12e <disp_clear>
 384:	89 e0       	ldi	r24, 0x09	; 9
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	15 df       	rcall	.-470    	; 0x1b4 <disp_text>
 38a:	08 95       	ret

0000038c <init6>:
 38c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 390:	8f e3       	ldi	r24, 0x3F	; 63
 392:	cd de       	rcall	.-614    	; 0x12e <disp_clear>
 394:	8f e0       	ldi	r24, 0x0F	; 15
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0d df       	rcall	.-486    	; 0x1b4 <disp_text>
 39a:	08 95       	ret

0000039c <init7>:
 39c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 3a0:	8f e3       	ldi	r24, 0x3F	; 63
 3a2:	c5 de       	rcall	.-630    	; 0x12e <disp_clear>
 3a4:	85 e1       	ldi	r24, 0x15	; 21
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	05 df       	rcall	.-502    	; 0x1b4 <disp_text>
 3aa:	08 95       	ret

000003ac <state_goto>:
	
}

void state_goto(uint8_t arg)
{
	if(arg!=0xff)
 3ac:	8f 3f       	cpi	r24, 0xFF	; 255
 3ae:	61 f0       	breq	.+24     	; 0x3c8 <state_goto+0x1c>
	{
		state=arg;
 3b0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
		states[state].init();
 3b4:	9b e0       	ldi	r25, 0x0B	; 11
 3b6:	89 9f       	mul	r24, r25
 3b8:	f0 01       	movw	r30, r0
 3ba:	11 24       	eor	r1, r1
 3bc:	e8 5d       	subi	r30, 0xD8	; 216
 3be:	fe 4f       	sbci	r31, 0xFE	; 254
 3c0:	01 90       	ld	r0, Z+
 3c2:	f0 81       	ld	r31, Z
 3c4:	e0 2d       	mov	r30, r0
 3c6:	09 95       	icall
 3c8:	08 95       	ret

000003ca <init_states>:
	}
}

void init_states()
{
 3ca:	e8 e2       	ldi	r30, 0x28	; 40
 3cc:	f1 e0       	ldi	r31, 0x01	; 1
 3ce:	40 e3       	ldi	r20, 0x30	; 48
 3d0:	52 e0       	ldi	r21, 0x02	; 2
	/* First clear the whole array */
	for(uint8_t i=0;i<STATES_NUM;i++)
	{
		states[i].init=&init_nothing;
 3d2:	27 e9       	ldi	r18, 0x97	; 151
 3d4:	31 e0       	ldi	r19, 0x01	; 1
		
		states[i].btn_down_next[0]=0xff;
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
void init_states()
{
	/* First clear the whole array */
	for(uint8_t i=0;i<STATES_NUM;i++)
	{
		states[i].init=&init_nothing;
 3d8:	31 83       	std	Z+1, r19	; 0x01
 3da:	20 83       	st	Z, r18
		
		states[i].btn_down_next[0]=0xff;
 3dc:	85 83       	std	Z+5, r24	; 0x05
		states[i].btn_down_next[1]=0xff;
 3de:	86 83       	std	Z+6, r24	; 0x06
		states[i].btn_down_next[2]=0xff;
 3e0:	87 83       	std	Z+7, r24	; 0x07
		
		states[i].btn_up_next[0]=0xff;
 3e2:	80 87       	std	Z+8, r24	; 0x08
		states[i].btn_up_next[1]=0xff;
 3e4:	81 87       	std	Z+9, r24	; 0x09
		states[i].btn_up_next[2]=0xff;
 3e6:	82 87       	std	Z+10, r24	; 0x0a
 3e8:	3b 96       	adiw	r30, 0x0b	; 11
}

void init_states()
{
	/* First clear the whole array */
	for(uint8_t i=0;i<STATES_NUM;i++)
 3ea:	e4 17       	cp	r30, r20
 3ec:	f5 07       	cpc	r31, r21
 3ee:	a1 f7       	brne	.-24     	; 0x3d8 <init_states+0xe>
		states[i].btn_up_next[0]=0xff;
		states[i].btn_up_next[1]=0xff;
		states[i].btn_up_next[2]=0xff;
	}
	/* State 0 - power saver */
	states[0].init=&init0;
 3f0:	e8 e2       	ldi	r30, 0x28	; 40
 3f2:	f1 e0       	ldi	r31, 0x01	; 1
 3f4:	88 e9       	ldi	r24, 0x98	; 152
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	91 83       	std	Z+1, r25	; 0x01
 3fa:	80 83       	st	Z, r24
	
	states[0].btn_down_next[2]=1;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	87 83       	std	Z+7, r24	; 0x07
	
	
	/* State 1 - minimal mode */
	states[1].init=&init1;
 400:	20 ea       	ldi	r18, 0xA0	; 160
 402:	31 e0       	ldi	r19, 0x01	; 1
 404:	34 87       	std	Z+12, r19	; 0x0c
 406:	23 87       	std	Z+11, r18	; 0x0b
	
	states[1].btn_down_next[0]=0;
 408:	10 8a       	std	Z+16, r1	; 0x10
	states[1].btn_down_next[2]=2;
 40a:	92 e0       	ldi	r25, 0x02	; 2
 40c:	92 8b       	std	Z+18, r25	; 0x12
	
	
	/* State 2 - full mode */
	states[2].init=&init2;
 40e:	29 ea       	ldi	r18, 0xA9	; 169
 410:	31 e0       	ldi	r19, 0x01	; 1
 412:	37 8b       	std	Z+23, r19	; 0x17
 414:	26 8b       	std	Z+22, r18	; 0x16
	
	states[2].btn_down_next[0]=1;
 416:	83 8f       	std	Z+27, r24	; 0x1b
	states[2].btn_down_next[2]=3;
 418:	83 e0       	ldi	r24, 0x03	; 3
 41a:	85 8f       	std	Z+29, r24	; 0x1d
	
	
	/* State 3 - Fun menu */
	states[3].init=&init3;
 41c:	2e ea       	ldi	r18, 0xAE	; 174
 41e:	31 e0       	ldi	r19, 0x01	; 1
 420:	32 a3       	std	Z+34, r19	; 0x22
 422:	21 a3       	std	Z+33, r18	; 0x21
	
	states[3].btn_down_next[0]=2;
 424:	96 a3       	std	Z+38, r25	; 0x26
	states[3].btn_down_next[1]=5;
 426:	95 e0       	ldi	r25, 0x05	; 5
 428:	97 a3       	std	Z+39, r25	; 0x27
	states[3].btn_down_next[2]=4;
 42a:	24 e0       	ldi	r18, 0x04	; 4
 42c:	20 a7       	std	Z+40, r18	; 0x28
	
	
	/* State 4 - Settings menu*/
	states[4].init=&init4;
 42e:	26 eb       	ldi	r18, 0xB6	; 182
 430:	31 e0       	ldi	r19, 0x01	; 1
 432:	35 a7       	std	Z+45, r19	; 0x2d
 434:	24 a7       	std	Z+44, r18	; 0x2c
	
	states[4].btn_down_next[0]=3;
 436:	81 ab       	std	Z+49, r24	; 0x31
	states[4].btn_down_next[1]=7;
 438:	27 e0       	ldi	r18, 0x07	; 7
 43a:	22 ab       	std	Z+50, r18	; 0x32
	//states[4].btn_down_next[2]=4;
	
	
	/* State 5 - Snake menu*/
	states[5].init=&init5;
 43c:	4e eb       	ldi	r20, 0xBE	; 190
 43e:	51 e0       	ldi	r21, 0x01	; 1
 440:	50 af       	std	Z+56, r21	; 0x38
 442:	47 ab       	std	Z+55, r20	; 0x37
	
	states[5].btn_down_next[0]=3;
 444:	84 af       	std	Z+60, r24	; 0x3c
	states[5].btn_down_next[1]=7;
 446:	25 af       	std	Z+61, r18	; 0x3d
	states[5].btn_down_next[2]=6;
 448:	86 e0       	ldi	r24, 0x06	; 6
 44a:	86 af       	std	Z+62, r24	; 0x3e
	
	/* State 6 - Other game menu */
	states[6].init=&init6;
 44c:	46 ec       	ldi	r20, 0xC6	; 198
 44e:	51 e0       	ldi	r21, 0x01	; 1
 450:	50 93 6b 01 	sts	0x016B, r21	; 0x80016b <states+0x43>
 454:	40 93 6a 01 	sts	0x016A, r20	; 0x80016a <states+0x42>
	
	states[6].btn_down_next[0]=5;
 458:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <states+0x47>
	//states[6].btn_down_arg[1]=6;
	//states[6].btn_down_arg[2]=6;		
	
	
	/* State 7 - Time menu */
	states[7].init=&init7;
 45c:	8e ec       	ldi	r24, 0xCE	; 206
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <states+0x4e>
 464:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <states+0x4d>
	states[7].btn_down_next[1]=9;
 468:	39 e0       	ldi	r19, 0x09	; 9
 46a:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <states+0x53>
	states[7].btn_down_next[2]=9;
 46e:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <states+0x54>
	
	/* State 8 - Other setting */
	states[8].init=&init_nothing;
 472:	87 e9       	ldi	r24, 0x97	; 151
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <states+0x59>
 47a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <states+0x58>
	states[8].btn_down_next[0]=7;
 47e:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <states+0x5d>
	
	/* State 9 - Set Year */
	states[9].init=&init_nothing;
 482:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <states+0x64>
 486:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <states+0x63>
	states[9].btn_down_next[1]=9;
 48a:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <states+0x69>
	
	/* State 10 - Set Month */
	states[10].init=&init_nothing;
 48e:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <states+0x6f>
 492:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <states+0x6e>
	states[10].btn_down_next[1]=11;
 496:	3b e0       	ldi	r19, 0x0B	; 11
 498:	30 93 9c 01 	sts	0x019C, r19	; 0x80019c <states+0x74>
	
	/* State 11 - Set Day */
	states[11].init=&init_nothing;
 49c:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <states+0x7a>
 4a0:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <states+0x79>
	states[11].btn_down_next[1]=12;
 4a4:	3c e0       	ldi	r19, 0x0C	; 12
 4a6:	30 93 a7 01 	sts	0x01A7, r19	; 0x8001a7 <states+0x7f>
	
	/* State 12 - Set Hour */
	states[12].init=&init_nothing;
 4aa:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <states+0x85>
 4ae:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <states+0x84>
	states[12].btn_down_next[1]=13;
 4b2:	3d e0       	ldi	r19, 0x0D	; 13
 4b4:	30 93 b2 01 	sts	0x01B2, r19	; 0x8001b2 <states+0x8a>
	
	/* State 13 - Set minute */
	states[13].init=&init_nothing;
 4b8:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <states+0x90>
 4bc:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <states+0x8f>
	states[13].btn_down_next[1]=14;
 4c0:	3e e0       	ldi	r19, 0x0E	; 14
 4c2:	30 93 bd 01 	sts	0x01BD, r19	; 0x8001bd <states+0x95>
	
	/* State 14 - Set seconds */
	states[14].init=&init_nothing;
 4c6:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <states+0x9b>
 4ca:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <states+0x9a>
	states[14].btn_down_next[1]=7; /* Back to time menu */
 4ce:	20 93 c8 01 	sts	0x01C8, r18	; 0x8001c8 <states+0xa0>
 4d2:	08 95       	ret

000004d4 <_exit>:
 4d4:	f8 94       	cli

000004d6 <__stop_program>:
 4d6:	ff cf       	rjmp	.-2      	; 0x4d6 <__stop_program>
