
uChronos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000055a  000005ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000118  00800120  00800120  0000060e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001246  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b86  00000000  00000000  00001a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b08  00000000  00000000  00002590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00003098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000515  00000000  00000000  000032e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000452  00000000  00000000  000037fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003c4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	26 c0       	rjmp	.+76     	; 0x4e <__ctors_end>
   2:	40 c0       	rjmp	.+128    	; 0x84 <__bad_interrupt>
   4:	3f c0       	rjmp	.+126    	; 0x84 <__bad_interrupt>
   6:	3e c0       	rjmp	.+124    	; 0x84 <__bad_interrupt>
   8:	3d c0       	rjmp	.+122    	; 0x84 <__bad_interrupt>
   a:	3c c0       	rjmp	.+120    	; 0x84 <__bad_interrupt>
   c:	3b c0       	rjmp	.+118    	; 0x84 <__bad_interrupt>
   e:	50 c1       	rjmp	.+672    	; 0x2b0 <__vector_7>
  10:	39 c0       	rjmp	.+114    	; 0x84 <__bad_interrupt>
  12:	38 c0       	rjmp	.+112    	; 0x84 <__bad_interrupt>
  14:	37 c0       	rjmp	.+110    	; 0x84 <__bad_interrupt>
  16:	36 c0       	rjmp	.+108    	; 0x84 <__bad_interrupt>
  18:	35 c0       	rjmp	.+106    	; 0x84 <__bad_interrupt>
  1a:	34 c0       	rjmp	.+104    	; 0x84 <__bad_interrupt>
  1c:	33 c0       	rjmp	.+102    	; 0x84 <__bad_interrupt>
  1e:	32 c0       	rjmp	.+100    	; 0x84 <__bad_interrupt>
  20:	31 c0       	rjmp	.+98     	; 0x84 <__bad_interrupt>
  22:	30 c0       	rjmp	.+96     	; 0x84 <__bad_interrupt>
  24:	2f c0       	rjmp	.+94     	; 0x84 <__bad_interrupt>
  26:	2e c0       	rjmp	.+92     	; 0x84 <__bad_interrupt>
  28:	2d c0       	rjmp	.+90     	; 0x84 <__bad_interrupt>
  2a:	2c c0       	rjmp	.+88     	; 0x84 <__bad_interrupt>
  2c:	2b c0       	rjmp	.+86     	; 0x84 <__bad_interrupt>
  2e:	2a c0       	rjmp	.+84     	; 0x84 <__bad_interrupt>
  30:	29 c0       	rjmp	.+82     	; 0x84 <__bad_interrupt>
  32:	28 c0       	rjmp	.+80     	; 0x84 <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	80 c0       	rjmp	.+256    	; 0x136 <disp_refresh+0x8>
  36:	88 8c       	ldd	r8, Y+24	; 0x18
  38:	84 c8       	rjmp	.-3832   	; 0xfffff142 <__eeprom_end+0xff7ef142>
  3a:	cc c4       	rjmp	.+2456   	; 0x9d4 <__data_load_end+0x45a>
  3c:	48 4c       	sbci	r20, 0xC8	; 200
  3e:	a0 e0       	ldi	r26, 0x00	; 0
  40:	a8 ac       	ldd	r10, Y+56	; 0x38
  42:	a4 e8       	ldi	r26, 0x84	; 132
  44:	ec e4       	ldi	r30, 0x4C	; 76
  46:	68 6c       	ori	r22, 0xC8	; 200
  48:	a2 e2       	ldi	r26, 0x22	; 34
  4a:	4e aa       	std	Y+54, r4	; 0x36
  4c:	ae a6       	std	Y+46, r10	; 0x2e

0000004e <__ctors_end>:
  4e:	11 24       	eor	r1, r1
  50:	1f be       	out	0x3f, r1	; 63
  52:	cf ef       	ldi	r28, 0xFF	; 255
  54:	d2 e0       	ldi	r29, 0x02	; 2
  56:	de bf       	out	0x3e, r29	; 62
  58:	cd bf       	out	0x3d, r28	; 61

0000005a <__do_copy_data>:
  5a:	11 e0       	ldi	r17, 0x01	; 1
  5c:	a0 e0       	ldi	r26, 0x00	; 0
  5e:	b1 e0       	ldi	r27, 0x01	; 1
  60:	ea e5       	ldi	r30, 0x5A	; 90
  62:	f5 e0       	ldi	r31, 0x05	; 5
  64:	02 c0       	rjmp	.+4      	; 0x6a <__do_copy_data+0x10>
  66:	05 90       	lpm	r0, Z+
  68:	0d 92       	st	X+, r0
  6a:	a0 32       	cpi	r26, 0x20	; 32
  6c:	b1 07       	cpc	r27, r17
  6e:	d9 f7       	brne	.-10     	; 0x66 <__do_copy_data+0xc>

00000070 <__do_clear_bss>:
  70:	22 e0       	ldi	r18, 0x02	; 2
  72:	a0 e2       	ldi	r26, 0x20	; 32
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a8 33       	cpi	r26, 0x38	; 56
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	d9 d0       	rcall	.+434    	; 0x234 <main>
  82:	69 c2       	rjmp	.+1234   	; 0x556 <_exit>

00000084 <__bad_interrupt>:
  84:	bd cf       	rjmp	.-134    	; 0x0 <__vectors>

00000086 <bin2bcd>:
#include <avr/io.h>
#include "bin_utils.h"

uint8_t bin2bcd(uint8_t bin)
{
	return (bin%10)|(bin/10)<<4;
  86:	9d ec       	ldi	r25, 0xCD	; 205
  88:	89 9f       	mul	r24, r25
  8a:	91 2d       	mov	r25, r1
  8c:	11 24       	eor	r1, r1
  8e:	96 95       	lsr	r25
  90:	96 95       	lsr	r25
  92:	96 95       	lsr	r25
  94:	20 e1       	ldi	r18, 0x10	; 16
  96:	92 9f       	mul	r25, r18
  98:	a0 01       	movw	r20, r0
  9a:	11 24       	eor	r1, r1
  9c:	99 0f       	add	r25, r25
  9e:	29 2f       	mov	r18, r25
  a0:	22 0f       	add	r18, r18
  a2:	22 0f       	add	r18, r18
  a4:	92 0f       	add	r25, r18
  a6:	89 1b       	sub	r24, r25
  a8:	84 2b       	or	r24, r20
  aa:	08 95       	ret

000000ac <btn_read>:

uint8_t btn_mem[1]={0};

void btn_read()
{
	uint8_t btns=~PINB & 0b111;
  ac:	83 b1       	in	r24, 0x03	; 3
  ae:	80 95       	com	r24
  b0:	98 2f       	mov	r25, r24
  b2:	97 70       	andi	r25, 0x07	; 7
	uint8_t p=btns^btn_mem[0];
  b4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
  b8:	89 27       	eor	r24, r25
	if(p)
  ba:	c1 f1       	breq	.+112    	; 0x12c <btn_read+0x80>
	{
		uint8_t i;
		for(i=0;!(p&(1<<i));i++); //Find the button that changed
  bc:	68 2f       	mov	r22, r24
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	80 fd       	sbrc	r24, 0
  c2:	0e c0       	rjmp	.+28     	; 0xe0 <btn_read+0x34>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	48 2f       	mov	r20, r24
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	9b 01       	movw	r18, r22
  ce:	08 2e       	mov	r0, r24
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <btn_read+0x2a>
  d2:	35 95       	asr	r19
  d4:	27 95       	ror	r18
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <btn_read+0x26>
  da:	20 ff       	sbrs	r18, 0
  dc:	f4 cf       	rjmp	.-24     	; 0xc6 <btn_read+0x1a>
  de:	02 c0       	rjmp	.+4      	; 0xe4 <btn_read+0x38>
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	50 e0       	ldi	r21, 0x00	; 0
		btn_mem[0]=btns;
  e4:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <__data_end>
		
		uint8_t next_state;
		if(btn_mem[0]&(1<<i))
  e8:	89 2f       	mov	r24, r25
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	04 2e       	mov	r0, r20
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <btn_read+0x48>
  f0:	95 95       	asr	r25
  f2:	87 95       	ror	r24
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <btn_read+0x44>
  f8:	80 ff       	sbrs	r24, 0
  fa:	0c c0       	rjmp	.+24     	; 0x114 <btn_read+0x68>
		{
			next_state=states[state].btn_down_next[i];
  fc:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <state>
 100:	9b e0       	ldi	r25, 0x0B	; 11
 102:	89 9f       	mul	r24, r25
 104:	40 0d       	add	r20, r0
 106:	51 1d       	adc	r21, r1
 108:	11 24       	eor	r1, r1
 10a:	fa 01       	movw	r30, r20
 10c:	e6 5d       	subi	r30, 0xD6	; 214
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	85 81       	ldd	r24, Z+5	; 0x05
 112:	0b c0       	rjmp	.+22     	; 0x12a <btn_read+0x7e>
		}
		else
		{
			
			next_state=states[state].btn_up_next[i];
 114:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <state>
 118:	9b e0       	ldi	r25, 0x0B	; 11
 11a:	89 9f       	mul	r24, r25
 11c:	40 0d       	add	r20, r0
 11e:	51 1d       	adc	r21, r1
 120:	11 24       	eor	r1, r1
 122:	fa 01       	movw	r30, r20
 124:	e6 5d       	subi	r30, 0xD6	; 214
 126:	fe 4f       	sbci	r31, 0xFE	; 254
 128:	80 85       	ldd	r24, Z+8	; 0x08
		}
		
		state_goto(next_state);
 12a:	29 d1       	rcall	.+594    	; 0x37e <state_goto>
 12c:	08 95       	ret

0000012e <disp_refresh>:
{
	for (uint8_t i=0;i<6;i++)
	{
		if(mask&(1<<i)) disp_mem[i]=0xff;
	}
}
 12e:	1b b8       	out	0x0b, r1	; 11
 130:	8f e3       	ldi	r24, 0x3F	; 63
 132:	88 b9       	out	0x08, r24	; 8
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	00 90 21 01 	lds	r0, 0x0121	; 0x800121 <disp_ctr>
 13c:	02 c0       	rjmp	.+4      	; 0x142 <disp_refresh+0x14>
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <disp_refresh+0x10>
 146:	82 27       	eor	r24, r18
 148:	88 b9       	out	0x08, r24	; 8
 14a:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <disp_ctr>
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ee 5d       	subi	r30, 0xDE	; 222
 152:	fe 4f       	sbci	r31, 0xFE	; 254
 154:	80 81       	ld	r24, Z
 156:	8b b9       	out	0x0b, r24	; 11
 158:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <disp_ctr>
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	66 e0       	ldi	r22, 0x06	; 6
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	d1 d1       	rcall	.+930    	; 0x508 <__divmodhi4>
 166:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <disp_ctr>
 16a:	08 95       	ret

0000016c <disp_clear>:

void disp_clear(uint8_t mask)
{
 16c:	e2 e2       	ldi	r30, 0x22	; 34
 16e:	f1 e0       	ldi	r31, 0x01	; 1
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i=0;i<6;i++)
	{
		if(mask&(1<<i)) disp_mem[i]=0x00;
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	ac 01       	movw	r20, r24
 178:	02 2e       	mov	r0, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <disp_clear+0x14>
 17c:	55 95       	asr	r21
 17e:	47 95       	ror	r20
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <disp_clear+0x10>
 184:	40 fd       	sbrc	r20, 0
 186:	10 82       	st	Z, r1
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	31 96       	adiw	r30, 0x01	; 1
	}
}

void disp_clear(uint8_t mask)
{
	for (uint8_t i=0;i<6;i++)
 18e:	26 30       	cpi	r18, 0x06	; 6
 190:	31 05       	cpc	r19, r1
 192:	89 f7       	brne	.-30     	; 0x176 <disp_clear+0xa>
	{
		if(mask&(1<<i)) disp_mem[i]=0x00;
	}
}
 194:	08 95       	ret

00000196 <disp_time>:

void disp_time(uint8_t mask)
{
 196:	cf 93       	push	r28
 198:	c8 2f       	mov	r28, r24
	if(mask&(1<<0)) disp_mem[5]=bin2bcd(t_s);
 19a:	80 ff       	sbrs	r24, 0
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <disp_time+0x12>
 19e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <t_s>
 1a2:	71 df       	rcall	.-286    	; 0x86 <bin2bcd>
 1a4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <disp_mem+0x5>
	if(mask&(1<<1)) disp_mem[4]=bin2bcd(t_min);
 1a8:	c1 ff       	sbrs	r28, 1
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <disp_time+0x20>
 1ac:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <t_min>
 1b0:	6a df       	rcall	.-300    	; 0x86 <bin2bcd>
 1b2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <disp_mem+0x4>
	if(mask&(1<<2)) disp_mem[3]=bin2bcd(t_h);
 1b6:	c2 ff       	sbrs	r28, 2
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <disp_time+0x2e>
 1ba:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <t_h>
 1be:	63 df       	rcall	.-314    	; 0x86 <bin2bcd>
 1c0:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <disp_mem+0x3>
	if(mask&(1<<3)) disp_mem[2]=bin2bcd(t_d);
 1c4:	c3 ff       	sbrs	r28, 3
 1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <disp_time+0x3c>
 1c8:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <t_d>
 1cc:	5c df       	rcall	.-328    	; 0x86 <bin2bcd>
 1ce:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <disp_mem+0x2>
	if(mask&(1<<4)) disp_mem[1]=bin2bcd(t_mth);
 1d2:	c4 ff       	sbrs	r28, 4
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <disp_time+0x4a>
 1d6:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <t_mth>
 1da:	55 df       	rcall	.-342    	; 0x86 <bin2bcd>
 1dc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <disp_mem+0x1>
	if(mask&(1<<5)) disp_mem[0]=bin2bcd(t_y);
 1e0:	c5 ff       	sbrs	r28, 5
 1e2:	05 c0       	rjmp	.+10     	; 0x1ee <disp_time+0x58>
 1e4:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <t_y>
 1e8:	4e df       	rcall	.-356    	; 0x86 <bin2bcd>
 1ea:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <disp_mem>
}
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <disp_text>:

void disp_text(char str[])
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
	uint8_t len=strlen(str);
 1f6:	fc 01       	movw	r30, r24
 1f8:	01 90       	ld	r0, Z+
 1fa:	00 20       	and	r0, r0
 1fc:	e9 f7       	brne	.-6      	; 0x1f8 <disp_text+0x6>
 1fe:	31 97       	sbiw	r30, 0x01	; 1
	len=len>6?6:len;
 200:	e8 1b       	sub	r30, r24
 202:	e7 30       	cpi	r30, 0x07	; 7
 204:	08 f0       	brcs	.+2      	; 0x208 <disp_text+0x16>
 206:	e6 e0       	ldi	r30, 0x06	; 6
	for(uint8_t c=0;c<len;c++)
 208:	ee 23       	and	r30, r30
 20a:	89 f0       	breq	.+34     	; 0x22e <disp_text+0x3c>
 20c:	dc 01       	movw	r26, r24
 20e:	c2 e2       	ldi	r28, 0x22	; 34
 210:	d1 e0       	ldi	r29, 0x01	; 1
 212:	e1 50       	subi	r30, 0x01	; 1
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	31 96       	adiw	r30, 0x01	; 1
 218:	8e 0f       	add	r24, r30
 21a:	9f 1f       	adc	r25, r31
	{
		disp_mem[c]=pgm_read_byte(&alphabet[str[c]-'a']);
 21c:	ed 91       	ld	r30, X+
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ed 52       	subi	r30, 0x2D	; 45
 222:	f0 40       	sbci	r31, 0x00	; 0
 224:	e4 91       	lpm	r30, Z
 226:	e9 93       	st	Y+, r30

void disp_text(char str[])
{
	uint8_t len=strlen(str);
	len=len>6?6:len;
	for(uint8_t c=0;c<len;c++)
 228:	a8 17       	cp	r26, r24
 22a:	b9 07       	cpc	r27, r25
 22c:	b9 f7       	brne	.-18     	; 0x21c <disp_text+0x2a>
	{
		disp_mem[c]=pgm_read_byte(&alphabet[str[c]-'a']);
	}
}
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <main>:


int main(void)
{
	/* Initialise ports immediately (fixed in v0.4) */
	PORTC=0b00111111; /* Shut down displays...  */
 234:	8f e3       	ldi	r24, 0x3F	; 63
 236:	88 b9       	out	0x08, r24	; 8
	DDRC =0b00111111; /* ...before being output */
 238:	87 b9       	out	0x07, r24	; 7
	
	
	PORTD=0b00000000;
 23a:	1b b8       	out	0x0b, r1	; 11
	DDRD =0b11111111;
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	8a b9       	out	0x0a, r24	; 10
	
	PORTB=0b11111111;
 240:	85 b9       	out	0x05, r24	; 5
	DDRB =0b11111111;
 242:	84 b9       	out	0x04, r24	; 4
	
	//Default display memory
	disp_clear(0b00111111);
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	92 df       	rcall	.-220    	; 0x16c <disp_clear>
	
	//Default time
	t_y=17;
 248:	81 e1       	ldi	r24, 0x11	; 17
 24a:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <t_y>
	t_mth=11;
 24e:	8b e0       	ldi	r24, 0x0B	; 11
 250:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <t_mth>
	t_d=21;
 254:	85 e1       	ldi	r24, 0x15	; 21
 256:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <t_d>
	t_h=02;
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <t_h>
	t_min=03;
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <t_min>
	t_s=00;
 266:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <t_s>
	
	SMCR=SMCR|1<<SE;
 26a:	83 b7       	in	r24, 0x33	; 51
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	83 bf       	out	0x33, r24	; 51
		TCCR2B=TCCR2B|1<<CS22|1<<CS21|1<<CS20;
		
	}
	else
	{
		OCR2A=155;
 270:	8b e9       	ldi	r24, 0x9B	; 155
 272:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__EEPROM_REGION_LENGTH__+0x7f00b3>
		TIMSK2=TIMSK2|1<<OCIE2A;
 276:	e0 e7       	ldi	r30, 0x70	; 112
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	82 60       	ori	r24, 0x02	; 2
 27e:	80 83       	st	Z, r24
		TCCR2A=TCCR2A|1<<WGM21;
 280:	e0 eb       	ldi	r30, 0xB0	; 176
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	82 60       	ori	r24, 0x02	; 2
 288:	80 83       	st	Z, r24
		TCCR2B=TCCR2B|1<<CS22;
 28a:	e1 eb       	ldi	r30, 0xB1	; 177
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	84 60       	ori	r24, 0x04	; 4
 292:	80 83       	st	Z, r24
	}
	
	
	//All is ready, let's go!
	init_states();
 294:	83 d0       	rcall	.+262    	; 0x39c <init_states>
	state_goto(3);
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	72 d0       	rcall	.+228    	; 0x37e <state_goto>
	sei();
 29a:	78 94       	sei




int main(void)
{
 29c:	c6 e0       	ldi	r28, 0x06	; 6
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	84 e1       	ldi	r24, 0x14	; 20
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	01 97       	sbiw	r24, 0x01	; 1
    while (1) 
    {
		
		for(int c=0;c<6;c++)
		{
			for(uint16_t i=5*4;--i;);
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <main+0x70>
			disp_refresh();
 2a8:	42 df       	rcall	.-380    	; 0x12e <disp_refresh>
 2aa:	21 97       	sbiw	r28, 0x01	; 1
	sei();
	
    while (1) 
    {
		
		for(int c=0;c<6;c++)
 2ac:	c9 f7       	brne	.-14     	; 0x2a0 <main+0x6c>
 2ae:	f6 cf       	rjmp	.-20     	; 0x29c <main+0x68>

000002b0 <__vector_7>:




ISR(TIMER2_COMPA_vect)
{
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	2f 93       	push	r18
 2bc:	3f 93       	push	r19
 2be:	4f 93       	push	r20
 2c0:	5f 93       	push	r21
 2c2:	6f 93       	push	r22
 2c4:	7f 93       	push	r23
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
 2ca:	af 93       	push	r26
 2cc:	bf 93       	push	r27
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
	tick10ms();
 2d2:	ee d0       	rcall	.+476    	; 0x4b0 <tick10ms>
	btn_read();
 2d4:	eb de       	rcall	.-554    	; 0xac <btn_read>
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	7f 91       	pop	r23
 2e4:	6f 91       	pop	r22
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <init_nothing>:
}



void do_nothing(uint8_t arg)
{
 2f8:	08 95       	ret

000002fa <init0>:
 2fa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 2fe:	8f e3       	ldi	r24, 0x3F	; 63
 300:	35 df       	rcall	.-406    	; 0x16c <disp_clear>
 302:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 306:	47 df       	rcall	.-370    	; 0x196 <disp_time>
 308:	08 95       	ret

0000030a <init1>:
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 310:	8f e3       	ldi	r24, 0x3F	; 63
 312:	2c df       	rcall	.-424    	; 0x16c <disp_clear>
 314:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 318:	3e df       	rcall	.-388    	; 0x196 <disp_time>
 31a:	08 95       	ret

0000031c <init2>:
 31c:	8f e3       	ldi	r24, 0x3F	; 63
 31e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 322:	39 df       	rcall	.-398    	; 0x196 <disp_time>
 324:	08 95       	ret

00000326 <init4>:
 326:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 32a:	8f e3       	ldi	r24, 0x3F	; 63
 32c:	1f df       	rcall	.-450    	; 0x16c <disp_clear>
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	5f df       	rcall	.-322    	; 0x1f2 <disp_text>
 334:	08 95       	ret

00000336 <init5>:
 336:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 33a:	8f e3       	ldi	r24, 0x3F	; 63
 33c:	17 df       	rcall	.-466    	; 0x16c <disp_clear>
 33e:	85 e0       	ldi	r24, 0x05	; 5
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	57 df       	rcall	.-338    	; 0x1f2 <disp_text>
 344:	08 95       	ret

00000346 <init6>:
 346:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 34a:	8f e3       	ldi	r24, 0x3F	; 63
 34c:	0f df       	rcall	.-482    	; 0x16c <disp_clear>
 34e:	8b e0       	ldi	r24, 0x0B	; 11
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	4f df       	rcall	.-354    	; 0x1f2 <disp_text>
 354:	08 95       	ret

00000356 <init7>:
 356:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 35a:	8f e3       	ldi	r24, 0x3F	; 63
 35c:	07 df       	rcall	.-498    	; 0x16c <disp_clear>
 35e:	81 e1       	ldi	r24, 0x11	; 17
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	47 df       	rcall	.-370    	; 0x1f2 <disp_text>
 364:	08 95       	ret

00000366 <init_text>:
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	ec 01       	movw	r28, r24
 36c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 370:	8f e3       	ldi	r24, 0x3F	; 63
 372:	fc de       	rcall	.-520    	; 0x16c <disp_clear>
 374:	ce 01       	movw	r24, r28
 376:	3d df       	rcall	.-390    	; 0x1f2 <disp_text>
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <state_goto>:
	
}

void state_goto(uint8_t arg)
{
	if(arg!=0xff)
 37e:	8f 3f       	cpi	r24, 0xFF	; 255
 380:	61 f0       	breq	.+24     	; 0x39a <state_goto+0x1c>
	{
		state=arg;
 382:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <state>
		states[state].init();
 386:	9b e0       	ldi	r25, 0x0B	; 11
 388:	89 9f       	mul	r24, r25
 38a:	f0 01       	movw	r30, r0
 38c:	11 24       	eor	r1, r1
 38e:	e6 5d       	subi	r30, 0xD6	; 214
 390:	fe 4f       	sbci	r31, 0xFE	; 254
 392:	01 90       	ld	r0, Z+
 394:	f0 81       	ld	r31, Z
 396:	e0 2d       	mov	r30, r0
 398:	09 95       	icall
 39a:	08 95       	ret

0000039c <init_states>:
	}
}

void init_states()
{
 39c:	ea e2       	ldi	r30, 0x2A	; 42
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	42 e3       	ldi	r20, 0x32	; 50
 3a2:	52 e0       	ldi	r21, 0x02	; 2
	/* First clear the whole array */
	for(uint8_t i=0;i<STATES_NUM;i++)
	{
		states[i].init=&init_nothing;
 3a4:	2c e7       	ldi	r18, 0x7C	; 124
 3a6:	31 e0       	ldi	r19, 0x01	; 1
		
		states[i].btn_down_next[0]=0xff;
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
void init_states()
{
	/* First clear the whole array */
	for(uint8_t i=0;i<STATES_NUM;i++)
	{
		states[i].init=&init_nothing;
 3aa:	31 83       	std	Z+1, r19	; 0x01
 3ac:	20 83       	st	Z, r18
		
		states[i].btn_down_next[0]=0xff;
 3ae:	85 83       	std	Z+5, r24	; 0x05
		states[i].btn_down_next[1]=0xff;
 3b0:	86 83       	std	Z+6, r24	; 0x06
		states[i].btn_down_next[2]=0xff;
 3b2:	87 83       	std	Z+7, r24	; 0x07
		
		states[i].btn_up_next[0]=0xff;
 3b4:	80 87       	std	Z+8, r24	; 0x08
		states[i].btn_up_next[1]=0xff;
 3b6:	81 87       	std	Z+9, r24	; 0x09
		states[i].btn_up_next[2]=0xff;
 3b8:	82 87       	std	Z+10, r24	; 0x0a
 3ba:	3b 96       	adiw	r30, 0x0b	; 11
}

void init_states()
{
	/* First clear the whole array */
	for(uint8_t i=0;i<STATES_NUM;i++)
 3bc:	e4 17       	cp	r30, r20
 3be:	f5 07       	cpc	r31, r21
 3c0:	a1 f7       	brne	.-24     	; 0x3aa <init_states+0xe>
		states[i].btn_up_next[0]=0xff;
		states[i].btn_up_next[1]=0xff;
		states[i].btn_up_next[2]=0xff;
	}
	/* State 0 - power saver */
	states[0].init=&init0;
 3c2:	ea e2       	ldi	r30, 0x2A	; 42
 3c4:	f1 e0       	ldi	r31, 0x01	; 1
 3c6:	8d e7       	ldi	r24, 0x7D	; 125
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	91 83       	std	Z+1, r25	; 0x01
 3cc:	80 83       	st	Z, r24
	
	states[0].btn_down_next[2]=1;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	87 83       	std	Z+7, r24	; 0x07
	
	
	/* State 1 - minimal mode */
	states[1].init=&init1;
 3d2:	25 e8       	ldi	r18, 0x85	; 133
 3d4:	31 e0       	ldi	r19, 0x01	; 1
 3d6:	34 87       	std	Z+12, r19	; 0x0c
 3d8:	23 87       	std	Z+11, r18	; 0x0b
	
	states[1].btn_down_next[0]=0;
 3da:	10 8a       	std	Z+16, r1	; 0x10
	states[1].btn_down_next[2]=2;
 3dc:	92 e0       	ldi	r25, 0x02	; 2
 3de:	92 8b       	std	Z+18, r25	; 0x12
	
	
	/* State 2 - full mode */
	states[2].init=&init2;
 3e0:	2e e8       	ldi	r18, 0x8E	; 142
 3e2:	31 e0       	ldi	r19, 0x01	; 1
 3e4:	37 8b       	std	Z+23, r19	; 0x17
 3e6:	26 8b       	std	Z+22, r18	; 0x16
	
	states[2].btn_down_next[0]=1;
 3e8:	83 8f       	std	Z+27, r24	; 0x1b
	states[2].btn_down_next[2]=3;
 3ea:	83 e0       	ldi	r24, 0x03	; 3
 3ec:	85 8f       	std	Z+29, r24	; 0x1d
	
	
	/* State 3 - Fun menu */
	//states[3].init=&init3;
	states[3].init=&init_text;
 3ee:	23 eb       	ldi	r18, 0xB3	; 179
 3f0:	31 e0       	ldi	r19, 0x01	; 1
 3f2:	32 a3       	std	Z+34, r19	; 0x22
 3f4:	21 a3       	std	Z+33, r18	; 0x21
	states[3].init_arg_str="aaaaa";
 3f6:	2a e1       	ldi	r18, 0x1A	; 26
 3f8:	31 e0       	ldi	r19, 0x01	; 1
 3fa:	34 a3       	std	Z+36, r19	; 0x24
 3fc:	23 a3       	std	Z+35, r18	; 0x23
	states[3].btn_down_next[0]=2;
 3fe:	96 a3       	std	Z+38, r25	; 0x26
	states[3].btn_down_next[1]=5;
 400:	35 e0       	ldi	r19, 0x05	; 5
 402:	37 a3       	std	Z+39, r19	; 0x27
	states[3].btn_down_next[2]=4;
 404:	94 e0       	ldi	r25, 0x04	; 4
 406:	90 a7       	std	Z+40, r25	; 0x28
	
	
	/* State 4 - Settings menu*/
	states[4].init=&init4;
 408:	43 e9       	ldi	r20, 0x93	; 147
 40a:	51 e0       	ldi	r21, 0x01	; 1
 40c:	55 a7       	std	Z+45, r21	; 0x2d
 40e:	44 a7       	std	Z+44, r20	; 0x2c
	
	states[4].btn_down_next[0]=3;
 410:	81 ab       	std	Z+49, r24	; 0x31
	states[4].btn_down_next[1]=7;
 412:	27 e0       	ldi	r18, 0x07	; 7
 414:	22 ab       	std	Z+50, r18	; 0x32
	//states[4].btn_down_next[2]=4;
	
	
	/* State 5 - Snake menu*/
	states[5].init=&init5;
 416:	4b e9       	ldi	r20, 0x9B	; 155
 418:	51 e0       	ldi	r21, 0x01	; 1
 41a:	50 af       	std	Z+56, r21	; 0x38
 41c:	47 ab       	std	Z+55, r20	; 0x37
	states[5].btn_down_next[0]=3;
 41e:	84 af       	std	Z+60, r24	; 0x3c
	states[5].btn_down_next[1]=7;
 420:	25 af       	std	Z+61, r18	; 0x3d
	states[5].btn_down_next[2]=6;
 422:	86 e0       	ldi	r24, 0x06	; 6
 424:	86 af       	std	Z+62, r24	; 0x3e
	
	/* State 6 - Other game menu */
	states[6].init=&init6;
 426:	43 ea       	ldi	r20, 0xA3	; 163
 428:	51 e0       	ldi	r21, 0x01	; 1
 42a:	50 93 6d 01 	sts	0x016D, r21	; 0x80016d <states+0x43>
 42e:	40 93 6c 01 	sts	0x016C, r20	; 0x80016c <states+0x42>
	
	states[6].btn_down_next[0]=5;
 432:	30 93 71 01 	sts	0x0171, r19	; 0x800171 <states+0x47>
	//states[6].btn_down_arg[1]=6;
	//states[6].btn_down_arg[2]=6;		
	
	
	/* State 7 - Time menu */
	states[7].init=&init7;
 436:	4b ea       	ldi	r20, 0xAB	; 171
 438:	51 e0       	ldi	r21, 0x01	; 1
 43a:	50 93 78 01 	sts	0x0178, r21	; 0x800178 <states+0x4e>
 43e:	40 93 77 01 	sts	0x0177, r20	; 0x800177 <states+0x4d>
	states[7].btn_down_next[0]=4;
 442:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <states+0x52>
	states[7].btn_down_next[1]=9;
 446:	89 e0       	ldi	r24, 0x09	; 9
 448:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <states+0x53>
	
	/* State 8 - Other setting */
	states[8].init=&init_nothing;
 44c:	8c e7       	ldi	r24, 0x7C	; 124
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <states+0x59>
 454:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <states+0x58>
	states[8].btn_down_next[0]=7;
 458:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <states+0x5d>
	
	/* State 9 - Set Year */
	states[9].init=&init_nothing;
 45c:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <states+0x64>
 460:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <states+0x63>
	states[9].btn_down_next[1]=10;
 464:	3a e0       	ldi	r19, 0x0A	; 10
 466:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <states+0x69>
	
	/* State 10 - Set Month */
	states[10].init=&init_nothing;
 46a:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <states+0x6f>
 46e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <states+0x6e>
	states[10].btn_down_next[1]=11;
 472:	3b e0       	ldi	r19, 0x0B	; 11
 474:	30 93 9e 01 	sts	0x019E, r19	; 0x80019e <states+0x74>
	
	/* State 11 - Set Day */
	states[11].init=&init_nothing;
 478:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <states+0x7a>
 47c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <states+0x79>
	states[11].btn_down_next[1]=12;
 480:	3c e0       	ldi	r19, 0x0C	; 12
 482:	30 93 a9 01 	sts	0x01A9, r19	; 0x8001a9 <states+0x7f>
	
	/* State 12 - Set Hour */
	states[12].init=&init_nothing;
 486:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <states+0x85>
 48a:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <states+0x84>
	states[12].btn_down_next[1]=13;
 48e:	3d e0       	ldi	r19, 0x0D	; 13
 490:	30 93 b4 01 	sts	0x01B4, r19	; 0x8001b4 <states+0x8a>
	
	/* State 13 - Set minute */
	states[13].init=&init_nothing;
 494:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <states+0x90>
 498:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <states+0x8f>
	states[13].btn_down_next[1]=14;
 49c:	3e e0       	ldi	r19, 0x0E	; 14
 49e:	30 93 bf 01 	sts	0x01BF, r19	; 0x8001bf <states+0x95>
	
	/* State 14 - Set seconds */
	states[14].init=&init_nothing;
 4a2:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <states+0x9b>
 4a6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <states+0x9a>
	states[14].btn_down_next[1]=7; /* Back to time menu */
 4aa:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <states+0xa0>
 4ae:	08 95       	ret

000004b0 <tick10ms>:

static uint8_t t_10ms=0;

void tick10ms(){
	
	if(++t_10ms==100)
 4b0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <t_10ms>
 4b4:	8f 5f       	subi	r24, 0xFF	; 255
 4b6:	84 36       	cpi	r24, 0x64	; 100
 4b8:	19 f0       	breq	.+6      	; 0x4c0 <tick10ms+0x10>
 4ba:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <t_10ms>
 4be:	08 95       	ret
	{
		t_10ms=0;
 4c0:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <t_10ms>
		if(++t_s==60)
 4c4:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <t_s>
 4c8:	8f 5f       	subi	r24, 0xFF	; 255
 4ca:	8c 33       	cpi	r24, 0x3C	; 60
 4cc:	19 f0       	breq	.+6      	; 0x4d4 <tick10ms+0x24>
 4ce:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <t_s>
 4d2:	16 c0       	rjmp	.+44     	; 0x500 <tick10ms+0x50>
		{
			t_s=0;
 4d4:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <t_s>
			if(++t_min==60)
 4d8:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <t_min>
 4dc:	8f 5f       	subi	r24, 0xFF	; 255
 4de:	8c 33       	cpi	r24, 0x3C	; 60
 4e0:	19 f0       	breq	.+6      	; 0x4e8 <tick10ms+0x38>
 4e2:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <t_min>
 4e6:	0c c0       	rjmp	.+24     	; 0x500 <tick10ms+0x50>
			{
				t_min=0;
 4e8:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <t_min>
				if(++t_h==24)
 4ec:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <t_h>
 4f0:	8f 5f       	subi	r24, 0xFF	; 255
 4f2:	88 31       	cpi	r24, 0x18	; 24
 4f4:	19 f0       	breq	.+6      	; 0x4fc <tick10ms+0x4c>
 4f6:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <t_h>
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <tick10ms+0x50>
				{
					t_h=0;
 4fc:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <t_h>
			
				}
			}
		}
		
		disp_time(time_mask); /* Displayed time needs to be refreshed every second */
 500:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 504:	48 de       	rcall	.-880    	; 0x196 <disp_time>
 506:	08 95       	ret

00000508 <__divmodhi4>:
 508:	97 fb       	bst	r25, 7
 50a:	07 2e       	mov	r0, r23
 50c:	16 f4       	brtc	.+4      	; 0x512 <__divmodhi4+0xa>
 50e:	00 94       	com	r0
 510:	06 d0       	rcall	.+12     	; 0x51e <__divmodhi4_neg1>
 512:	77 fd       	sbrc	r23, 7
 514:	08 d0       	rcall	.+16     	; 0x526 <__divmodhi4_neg2>
 516:	0b d0       	rcall	.+22     	; 0x52e <__udivmodhi4>
 518:	07 fc       	sbrc	r0, 7
 51a:	05 d0       	rcall	.+10     	; 0x526 <__divmodhi4_neg2>
 51c:	3e f4       	brtc	.+14     	; 0x52c <__divmodhi4_exit>

0000051e <__divmodhi4_neg1>:
 51e:	90 95       	com	r25
 520:	81 95       	neg	r24
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	08 95       	ret

00000526 <__divmodhi4_neg2>:
 526:	70 95       	com	r23
 528:	61 95       	neg	r22
 52a:	7f 4f       	sbci	r23, 0xFF	; 255

0000052c <__divmodhi4_exit>:
 52c:	08 95       	ret

0000052e <__udivmodhi4>:
 52e:	aa 1b       	sub	r26, r26
 530:	bb 1b       	sub	r27, r27
 532:	51 e1       	ldi	r21, 0x11	; 17
 534:	07 c0       	rjmp	.+14     	; 0x544 <__udivmodhi4_ep>

00000536 <__udivmodhi4_loop>:
 536:	aa 1f       	adc	r26, r26
 538:	bb 1f       	adc	r27, r27
 53a:	a6 17       	cp	r26, r22
 53c:	b7 07       	cpc	r27, r23
 53e:	10 f0       	brcs	.+4      	; 0x544 <__udivmodhi4_ep>
 540:	a6 1b       	sub	r26, r22
 542:	b7 0b       	sbc	r27, r23

00000544 <__udivmodhi4_ep>:
 544:	88 1f       	adc	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	5a 95       	dec	r21
 54a:	a9 f7       	brne	.-22     	; 0x536 <__udivmodhi4_loop>
 54c:	80 95       	com	r24
 54e:	90 95       	com	r25
 550:	bc 01       	movw	r22, r24
 552:	cd 01       	movw	r24, r26
 554:	08 95       	ret

00000556 <_exit>:
 556:	f8 94       	cli

00000558 <__stop_program>:
 558:	ff cf       	rjmp	.-2      	; 0x558 <__stop_program>
