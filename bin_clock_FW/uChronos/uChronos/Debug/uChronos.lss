
uChronos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000482  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fe  00800116  00800116  0000052c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010df  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aac  00000000  00000000  0000178f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098f  00000000  00000000  0000223b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00002bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c6  00000000  00000000  00002dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000481  00000000  00000000  0000329e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000371f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	26 c0       	rjmp	.+76     	; 0x4e <__ctors_end>
   2:	40 c0       	rjmp	.+128    	; 0x84 <__bad_interrupt>
   4:	3f c0       	rjmp	.+126    	; 0x84 <__bad_interrupt>
   6:	3e c0       	rjmp	.+124    	; 0x84 <__bad_interrupt>
   8:	3d c0       	rjmp	.+122    	; 0x84 <__bad_interrupt>
   a:	3c c0       	rjmp	.+120    	; 0x84 <__bad_interrupt>
   c:	3b c0       	rjmp	.+118    	; 0x84 <__bad_interrupt>
   e:	5f c1       	rjmp	.+702    	; 0x2ce <__vector_7>
  10:	39 c0       	rjmp	.+114    	; 0x84 <__bad_interrupt>
  12:	38 c0       	rjmp	.+112    	; 0x84 <__bad_interrupt>
  14:	37 c0       	rjmp	.+110    	; 0x84 <__bad_interrupt>
  16:	36 c0       	rjmp	.+108    	; 0x84 <__bad_interrupt>
  18:	35 c0       	rjmp	.+106    	; 0x84 <__bad_interrupt>
  1a:	34 c0       	rjmp	.+104    	; 0x84 <__bad_interrupt>
  1c:	33 c0       	rjmp	.+102    	; 0x84 <__bad_interrupt>
  1e:	32 c0       	rjmp	.+100    	; 0x84 <__bad_interrupt>
  20:	31 c0       	rjmp	.+98     	; 0x84 <__bad_interrupt>
  22:	30 c0       	rjmp	.+96     	; 0x84 <__bad_interrupt>
  24:	2f c0       	rjmp	.+94     	; 0x84 <__bad_interrupt>
  26:	2e c0       	rjmp	.+92     	; 0x84 <__bad_interrupt>
  28:	2d c0       	rjmp	.+90     	; 0x84 <__bad_interrupt>
  2a:	2c c0       	rjmp	.+88     	; 0x84 <__bad_interrupt>
  2c:	2b c0       	rjmp	.+86     	; 0x84 <__bad_interrupt>
  2e:	2a c0       	rjmp	.+84     	; 0x84 <__bad_interrupt>
  30:	29 c0       	rjmp	.+82     	; 0x84 <__bad_interrupt>
  32:	28 c0       	rjmp	.+80     	; 0x84 <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	80 c0       	rjmp	.+256    	; 0x136 <btn_read+0x8a>
  36:	88 8c       	ldd	r8, Y+24	; 0x18
  38:	84 c8       	rjmp	.-3832   	; 0xfffff142 <__eeprom_end+0xff7ef142>
  3a:	cc c4       	rjmp	.+2456   	; 0x9d4 <__data_load_end+0x53c>
  3c:	48 4c       	sbci	r20, 0xC8	; 200
  3e:	a0 e0       	ldi	r26, 0x00	; 0
  40:	a8 ac       	ldd	r10, Y+56	; 0x38
  42:	a4 e8       	ldi	r26, 0x84	; 132
  44:	ec e4       	ldi	r30, 0x4C	; 76
  46:	68 6c       	ori	r22, 0xC8	; 200
  48:	a2 e2       	ldi	r26, 0x22	; 34
  4a:	4e aa       	std	Y+54, r4	; 0x36
  4c:	ae a6       	std	Y+46, r10	; 0x2e

0000004e <__ctors_end>:
  4e:	11 24       	eor	r1, r1
  50:	1f be       	out	0x3f, r1	; 63
  52:	cf ef       	ldi	r28, 0xFF	; 255
  54:	d2 e0       	ldi	r29, 0x02	; 2
  56:	de bf       	out	0x3e, r29	; 62
  58:	cd bf       	out	0x3d, r28	; 61

0000005a <__do_copy_data>:
  5a:	11 e0       	ldi	r17, 0x01	; 1
  5c:	a0 e0       	ldi	r26, 0x00	; 0
  5e:	b1 e0       	ldi	r27, 0x01	; 1
  60:	e2 e8       	ldi	r30, 0x82	; 130
  62:	f4 e0       	ldi	r31, 0x04	; 4
  64:	02 c0       	rjmp	.+4      	; 0x6a <__do_copy_data+0x10>
  66:	05 90       	lpm	r0, Z+
  68:	0d 92       	st	X+, r0
  6a:	a6 31       	cpi	r26, 0x16	; 22
  6c:	b1 07       	cpc	r27, r17
  6e:	d9 f7       	brne	.-10     	; 0x66 <__do_copy_data+0xc>

00000070 <__do_clear_bss>:
  70:	22 e0       	ldi	r18, 0x02	; 2
  72:	a6 e1       	ldi	r26, 0x16	; 22
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a4 31       	cpi	r26, 0x14	; 20
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	cd d0       	rcall	.+410    	; 0x21c <main>
  82:	fd c1       	rjmp	.+1018   	; 0x47e <_exit>

00000084 <__bad_interrupt>:
  84:	bd cf       	rjmp	.-134    	; 0x0 <__vectors>

00000086 <bin2bcd>:
#include <avr/io.h>
#include "bin_utils.h"

uint8_t bin2bcd(uint8_t bin)
{
	return (bin%10)|(bin/10)<<4;
  86:	9d ec       	ldi	r25, 0xCD	; 205
  88:	89 9f       	mul	r24, r25
  8a:	91 2d       	mov	r25, r1
  8c:	11 24       	eor	r1, r1
  8e:	96 95       	lsr	r25
  90:	96 95       	lsr	r25
  92:	96 95       	lsr	r25
  94:	20 e1       	ldi	r18, 0x10	; 16
  96:	92 9f       	mul	r25, r18
  98:	a0 01       	movw	r20, r0
  9a:	11 24       	eor	r1, r1
  9c:	99 0f       	add	r25, r25
  9e:	29 2f       	mov	r18, r25
  a0:	22 0f       	add	r18, r18
  a2:	22 0f       	add	r18, r18
  a4:	92 0f       	add	r25, r18
  a6:	89 1b       	sub	r24, r25
  a8:	84 2b       	or	r24, r20
  aa:	08 95       	ret

000000ac <btn_read>:

uint8_t btn_mem[1]={0};

void btn_read()
{
	uint8_t btns=~PINB & 0b111;
  ac:	83 b1       	in	r24, 0x03	; 3
  ae:	80 95       	com	r24
  b0:	98 2f       	mov	r25, r24
  b2:	97 70       	andi	r25, 0x07	; 7
	uint8_t p=btns^btn_mem[0];
  b4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
  b8:	89 27       	eor	r24, r25
	if(p)
  ba:	09 f4       	brne	.+2      	; 0xbe <btn_read+0x12>
  bc:	4a c0       	rjmp	.+148    	; 0x152 <btn_read+0xa6>
	{
		uint8_t i;
		for(i=0;!(p&(1<<i));i++); //Find the button that changed
  be:	68 2f       	mov	r22, r24
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	80 fd       	sbrc	r24, 0
  c4:	0e c0       	rjmp	.+28     	; 0xe2 <btn_read+0x36>
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	48 2f       	mov	r20, r24
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	9b 01       	movw	r18, r22
  d0:	08 2e       	mov	r0, r24
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <btn_read+0x2c>
  d4:	35 95       	asr	r19
  d6:	27 95       	ror	r18
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <btn_read+0x28>
  dc:	20 ff       	sbrs	r18, 0
  de:	f4 cf       	rjmp	.-24     	; 0xc8 <btn_read+0x1c>
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <btn_read+0x3a>
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	50 e0       	ldi	r21, 0x00	; 0
		btn_mem[0]=btns;
  e6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <__data_end>
		
		uint8_t next_state;
		if(btn_mem[0]&(1<<i))
  ea:	89 2f       	mov	r24, r25
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	04 2e       	mov	r0, r20
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <btn_read+0x4a>
  f2:	95 95       	asr	r25
  f4:	87 95       	ror	r24
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <btn_read+0x46>
  fa:	80 ff       	sbrs	r24, 0
  fc:	15 c0       	rjmp	.+42     	; 0x128 <btn_read+0x7c>
		{
			next_state=states[state].btn_down_next[i];
  fe:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <state>
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	9c 01       	movw	r18, r24
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	82 0f       	add	r24, r18
 118:	93 1f       	adc	r25, r19
 11a:	8c 5d       	subi	r24, 0xDC	; 220
 11c:	9e 4f       	sbci	r25, 0xFE	; 254
 11e:	fc 01       	movw	r30, r24
 120:	e4 0f       	add	r30, r20
 122:	f5 1f       	adc	r31, r21
 124:	84 81       	ldd	r24, Z+4	; 0x04
 126:	14 c0       	rjmp	.+40     	; 0x150 <btn_read+0xa4>
		}
		else
		{
			
			next_state=states[state].btn_up_next[i];
 128:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <state>
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	9c 01       	movw	r18, r24
 130:	22 0f       	add	r18, r18
 132:	33 1f       	adc	r19, r19
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	82 0f       	add	r24, r18
 142:	93 1f       	adc	r25, r19
 144:	8c 5d       	subi	r24, 0xDC	; 220
 146:	9e 4f       	sbci	r25, 0xFE	; 254
 148:	fc 01       	movw	r30, r24
 14a:	e4 0f       	add	r30, r20
 14c:	f5 1f       	adc	r31, r21
 14e:	87 81       	ldd	r24, Z+7	; 0x07
		}
		
		state_goto(next_state);
 150:	38 d1       	rcall	.+624    	; 0x3c2 <state_goto>
 152:	08 95       	ret

00000154 <disp_clear>:
		if(mask&(1<<i)) disp_mem[i]=0xff;
	}
}

void disp_clear(uint8_t mask)
{
 154:	e7 e1       	ldi	r30, 0x17	; 23
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i=0;i<6;i++)
	{
		if(mask&(1<<i)) disp_mem[i]=0x00;
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	ac 01       	movw	r20, r24
 160:	02 2e       	mov	r0, r18
 162:	02 c0       	rjmp	.+4      	; 0x168 <disp_clear+0x14>
 164:	55 95       	asr	r21
 166:	47 95       	ror	r20
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <disp_clear+0x10>
 16c:	40 fd       	sbrc	r20, 0
 16e:	10 82       	st	Z, r1
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	31 96       	adiw	r30, 0x01	; 1
	}
}

void disp_clear(uint8_t mask)
{
	for (uint8_t i=0;i<6;i++)
 176:	26 30       	cpi	r18, 0x06	; 6
 178:	31 05       	cpc	r19, r1
 17a:	89 f7       	brne	.-30     	; 0x15e <disp_clear+0xa>
	{
		if(mask&(1<<i)) disp_mem[i]=0x00;
	}
}
 17c:	08 95       	ret

0000017e <disp_time>:

void disp_time(uint8_t mask)
{
 17e:	cf 93       	push	r28
 180:	c8 2f       	mov	r28, r24
	if(mask&(1<<0)) disp_mem[5]=bin2bcd(t_s);
 182:	80 ff       	sbrs	r24, 0
 184:	05 c0       	rjmp	.+10     	; 0x190 <disp_time+0x12>
 186:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <t_s>
 18a:	7d df       	rcall	.-262    	; 0x86 <bin2bcd>
 18c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <disp_mem+0x5>
	if(mask&(1<<1)) disp_mem[4]=bin2bcd(t_min);
 190:	c1 ff       	sbrs	r28, 1
 192:	05 c0       	rjmp	.+10     	; 0x19e <disp_time+0x20>
 194:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <t_min>
 198:	76 df       	rcall	.-276    	; 0x86 <bin2bcd>
 19a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <disp_mem+0x4>
	if(mask&(1<<2)) disp_mem[3]=bin2bcd(t_h);
 19e:	c2 ff       	sbrs	r28, 2
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <disp_time+0x2e>
 1a2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <t_h>
 1a6:	6f df       	rcall	.-290    	; 0x86 <bin2bcd>
 1a8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <disp_mem+0x3>
	if(mask&(1<<3)) disp_mem[2]=bin2bcd(t_d);
 1ac:	c3 ff       	sbrs	r28, 3
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <disp_time+0x3c>
 1b0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <t_d>
 1b4:	68 df       	rcall	.-304    	; 0x86 <bin2bcd>
 1b6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <disp_mem+0x2>
	if(mask&(1<<4)) disp_mem[1]=bin2bcd(t_mth);
 1ba:	c4 ff       	sbrs	r28, 4
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <disp_time+0x4a>
 1be:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <t_mth>
 1c2:	61 df       	rcall	.-318    	; 0x86 <bin2bcd>
 1c4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <disp_mem+0x1>
	if(mask&(1<<5)) disp_mem[0]=bin2bcd(t_y);
 1c8:	c5 ff       	sbrs	r28, 5
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <disp_time+0x58>
 1cc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <t_y>
 1d0:	5a df       	rcall	.-332    	; 0x86 <bin2bcd>
 1d2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <disp_mem>
}
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <disp_text>:

void disp_text(char str[])
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
	uint8_t len=strlen(str);
 1de:	fc 01       	movw	r30, r24
 1e0:	01 90       	ld	r0, Z+
 1e2:	00 20       	and	r0, r0
 1e4:	e9 f7       	brne	.-6      	; 0x1e0 <disp_text+0x6>
 1e6:	31 97       	sbiw	r30, 0x01	; 1
	len=len>6?6:len;
 1e8:	e8 1b       	sub	r30, r24
 1ea:	e7 30       	cpi	r30, 0x07	; 7
 1ec:	08 f0       	brcs	.+2      	; 0x1f0 <disp_text+0x16>
 1ee:	e6 e0       	ldi	r30, 0x06	; 6
	for(uint8_t c=0;c<len;c++)
 1f0:	ee 23       	and	r30, r30
 1f2:	89 f0       	breq	.+34     	; 0x216 <disp_text+0x3c>
 1f4:	dc 01       	movw	r26, r24
 1f6:	c7 e1       	ldi	r28, 0x17	; 23
 1f8:	d1 e0       	ldi	r29, 0x01	; 1
 1fa:	e1 50       	subi	r30, 0x01	; 1
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	31 96       	adiw	r30, 0x01	; 1
 200:	8e 0f       	add	r24, r30
 202:	9f 1f       	adc	r25, r31
	{
		disp_mem[c]=pgm_read_byte(&alphabet[str[c]-'a']);
 204:	ed 91       	ld	r30, X+
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	ed 52       	subi	r30, 0x2D	; 45
 20a:	f0 40       	sbci	r31, 0x00	; 0
 20c:	e4 91       	lpm	r30, Z
 20e:	e9 93       	st	Y+, r30

void disp_text(char str[])
{
	uint8_t len=strlen(str);
	len=len>6?6:len;
	for(uint8_t c=0;c<len;c++)
 210:	a8 17       	cp	r26, r24
 212:	b9 07       	cpc	r27, r25
 214:	b9 f7       	brne	.-18     	; 0x204 <disp_text+0x2a>
	{
		disp_mem[c]=pgm_read_byte(&alphabet[str[c]-'a']);
	}
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <main>:


int main(void)
{
	/* Initialise ports immediately (fixed in v0.4) */
	PORTC=0b00111111; /* Shut down displays...  */
 21c:	8f e3       	ldi	r24, 0x3F	; 63
 21e:	88 b9       	out	0x08, r24	; 8
	DDRC =0b00111111; /* ...before being output */
 220:	87 b9       	out	0x07, r24	; 7
	
	
	PORTD=0b00000000;
 222:	1b b8       	out	0x0b, r1	; 11
	DDRD =0b11111111;
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	8a b9       	out	0x0a, r24	; 10
	
	PORTB=0b11111111;
 228:	85 b9       	out	0x05, r24	; 5
	DDRB =0b11111111;
 22a:	84 b9       	out	0x04, r24	; 4
	
	//Default display memory
	disp_clear(0b00111111);
 22c:	8f e3       	ldi	r24, 0x3F	; 63
 22e:	92 df       	rcall	.-220    	; 0x154 <disp_clear>
	
	//Default time
	t_y=17;
 230:	81 e1       	ldi	r24, 0x11	; 17
 232:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <t_y>
	t_mth=9;
 236:	89 e0       	ldi	r24, 0x09	; 9
 238:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <t_mth>
	t_d=29;
 23c:	8d e1       	ldi	r24, 0x1D	; 29
 23e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <t_d>
	t_h=2;
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <t_h>
	t_min=27;
 248:	8b e1       	ldi	r24, 0x1B	; 27
 24a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <t_min>
	t_s=24;
 24e:	88 e1       	ldi	r24, 0x18	; 24
 250:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <t_s>
	
	SMCR=SMCR|1<<SE;
 254:	83 b7       	in	r24, 0x33	; 51
 256:	81 60       	ori	r24, 0x01	; 1
 258:	83 bf       	out	0x33, r24	; 51
		TCCR2B=TCCR2B|1<<CS22|1<<CS21|1<<CS20;
		
	}
	else
	{
		OCR2A=220;
 25a:	8c ed       	ldi	r24, 0xDC	; 220
 25c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__EEPROM_REGION_LENGTH__+0x7f00b3>
		TIMSK2=TIMSK2|1<<OCIE2A;
 260:	e0 e7       	ldi	r30, 0x70	; 112
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
		TCCR2A=TCCR2A|1<<WGM21;
 26a:	e0 eb       	ldi	r30, 0xB0	; 176
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	82 60       	ori	r24, 0x02	; 2
 272:	80 83       	st	Z, r24
		TCCR2B=TCCR2B|1<<CS22|1<<CS21|1<<CS20;
 274:	e1 eb       	ldi	r30, 0xB1	; 177
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	87 60       	ori	r24, 0x07	; 7
 27c:	80 83       	st	Z, r24
	}
	
	
	//All is ready, let's go!
	init_states();
 27e:	b8 d0       	rcall	.+368    	; 0x3f0 <init_states>
	state_goto(1);
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	9f d0       	rcall	.+318    	; 0x3c2 <state_goto>
	sei();
 284:	78 94       	sei
    while (1) 
    {
		
		for(int c=0;c<6;c++)
		{
			PORTC=0b00111111&~(1<<c);
 286:	c1 e0       	ldi	r28, 0x01	; 1
 288:	d0 e0       	ldi	r29, 0x00	; 0
			PORTD=disp_mem[c];
			
			//PORTD=cntr&&0xff;
			for(uint16_t i=5*4;--i;);
			PORTD=0b00000000;
			PORTC=0b00111111;
 28a:	1f e3       	ldi	r17, 0x3F	; 63
 28c:	e7 e1       	ldi	r30, 0x17	; 23
 28e:	f1 e0       	ldi	r31, 0x01	; 1
	sei();
	
    while (1) 
    {
		
		for(int c=0;c<6;c++)
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTC=0b00111111&~(1<<c);
 294:	ce 01       	movw	r24, r28
 296:	02 2e       	mov	r0, r18
 298:	02 c0       	rjmp	.+4      	; 0x29e <main+0x82>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <main+0x7e>
 2a2:	80 95       	com	r24
 2a4:	8f 73       	andi	r24, 0x3F	; 63
 2a6:	88 b9       	out	0x08, r24	; 8
			//PORTD=(cntr>>(8*(5-c)))&0xff;
			PORTD=disp_mem[c];
 2a8:	81 91       	ld	r24, Z+
 2aa:	8b b9       	out	0x0b, r24	; 11
			
			//PORTD=cntr&&0xff;
			for(uint16_t i=5*4;--i;);
 2ac:	84 e1       	ldi	r24, 0x14	; 20
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <main+0x94>
			PORTD=0b00000000;
 2b4:	1b b8       	out	0x0b, r1	; 11
			PORTC=0b00111111;
 2b6:	18 b9       	out	0x08, r17	; 8
			for(uint16_t i=5*4*1;--i;);
 2b8:	84 e1       	ldi	r24, 0x14	; 20
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0xa0>
	sei();
	
    while (1) 
    {
		
		for(int c=0;c<6;c++)
 2c0:	2f 5f       	subi	r18, 0xFF	; 255
 2c2:	3f 4f       	sbci	r19, 0xFF	; 255
 2c4:	26 30       	cpi	r18, 0x06	; 6
 2c6:	31 05       	cpc	r19, r1
 2c8:	29 f7       	brne	.-54     	; 0x294 <main+0x78>
			PORTC=0b00111111;
			for(uint16_t i=5*4*1;--i;);
			
			
		}
		btn_read();
 2ca:	f0 de       	rcall	.-544    	; 0xac <btn_read>
		
		
		
		
/* main() must never end! */
    }
 2cc:	df cf       	rjmp	.-66     	; 0x28c <main+0x70>

000002ce <__vector_7>:




ISR(TIMER2_COMPA_vect)
{
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	4f 93       	push	r20
 2de:	5f 93       	push	r21
 2e0:	6f 93       	push	r22
 2e2:	7f 93       	push	r23
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	af 93       	push	r26
 2ea:	bf 93       	push	r27
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
	if(++t_s==60)
 2f0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <t_s>
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	8c 33       	cpi	r24, 0x3C	; 60
 2f8:	19 f0       	breq	.+6      	; 0x300 <__stack+0x1>
 2fa:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <t_s>
 2fe:	16 c0       	rjmp	.+44     	; 0x32c <__stack+0x2d>
	{
		t_s=0;
 300:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <t_s>
		if(++t_min==60)
 304:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <t_min>
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	8c 33       	cpi	r24, 0x3C	; 60
 30c:	19 f0       	breq	.+6      	; 0x314 <__stack+0x15>
 30e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <t_min>
 312:	0c c0       	rjmp	.+24     	; 0x32c <__stack+0x2d>
		{
			t_min=0;
 314:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <t_min>
			if(++t_h==24)
 318:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <t_h>
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	88 31       	cpi	r24, 0x18	; 24
 320:	19 f0       	breq	.+6      	; 0x328 <__stack+0x29>
 322:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <t_h>
 326:	02 c0       	rjmp	.+4      	; 0x32c <__stack+0x2d>
			{
				t_h=0;
 328:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <t_h>
				
			}
		}
	}

	disp_time(time_mask);
 32c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 330:	26 df       	rcall	.-436    	; 0x17e <disp_time>
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <init_nothing>:
}



void do_nothing(uint8_t arg)
{
 354:	08 95       	ret

00000356 <init0>:
 356:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 35a:	8f e3       	ldi	r24, 0x3F	; 63
 35c:	fb de       	rcall	.-522    	; 0x154 <disp_clear>
 35e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 362:	0d df       	rcall	.-486    	; 0x17e <disp_time>
 364:	08 95       	ret

00000366 <init1>:
 366:	86 e0       	ldi	r24, 0x06	; 6
 368:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 36c:	8f e3       	ldi	r24, 0x3F	; 63
 36e:	f2 de       	rcall	.-540    	; 0x154 <disp_clear>
 370:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 374:	04 df       	rcall	.-504    	; 0x17e <disp_time>
 376:	08 95       	ret

00000378 <init2>:
 378:	8f e3       	ldi	r24, 0x3F	; 63
 37a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 37e:	ff de       	rcall	.-514    	; 0x17e <disp_time>
 380:	08 95       	ret

00000382 <init3>:
 382:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 386:	8f e3       	ldi	r24, 0x3F	; 63
 388:	e5 de       	rcall	.-566    	; 0x154 <disp_clear>
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	25 df       	rcall	.-438    	; 0x1da <disp_text>
 390:	08 95       	ret

00000392 <init4>:
 392:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 396:	8f e3       	ldi	r24, 0x3F	; 63
 398:	dd de       	rcall	.-582    	; 0x154 <disp_clear>
 39a:	85 e0       	ldi	r24, 0x05	; 5
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	1d df       	rcall	.-454    	; 0x1da <disp_text>
 3a0:	08 95       	ret

000003a2 <init5>:
 3a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 3a6:	8f e3       	ldi	r24, 0x3F	; 63
 3a8:	d5 de       	rcall	.-598    	; 0x154 <disp_clear>
 3aa:	89 e0       	ldi	r24, 0x09	; 9
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	15 df       	rcall	.-470    	; 0x1da <disp_text>
 3b0:	08 95       	ret

000003b2 <init6>:
 3b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 3b6:	8f e3       	ldi	r24, 0x3F	; 63
 3b8:	cd de       	rcall	.-614    	; 0x154 <disp_clear>
 3ba:	8f e0       	ldi	r24, 0x0F	; 15
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0d df       	rcall	.-486    	; 0x1da <disp_text>
 3c0:	08 95       	ret

000003c2 <state_goto>:
	
}

void state_goto(uint8_t arg)
{
	if(arg!=0xff)
 3c2:	8f 3f       	cpi	r24, 0xFF	; 255
 3c4:	a1 f0       	breq	.+40     	; 0x3ee <state_goto+0x2c>
	{
		state=arg;
 3c6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <state>
		states[state].init();
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	fc 01       	movw	r30, r24
 3ce:	ee 0f       	add	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	e8 0f       	add	r30, r24
 3e0:	f9 1f       	adc	r31, r25
 3e2:	ec 5d       	subi	r30, 0xDC	; 220
 3e4:	fe 4f       	sbci	r31, 0xFE	; 254
 3e6:	01 90       	ld	r0, Z+
 3e8:	f0 81       	ld	r31, Z
 3ea:	e0 2d       	mov	r30, r0
 3ec:	09 95       	icall
 3ee:	08 95       	ret

000003f0 <init_states>:
	}
}

void init_states()
{
 3f0:	e4 e2       	ldi	r30, 0x24	; 36
 3f2:	f1 e0       	ldi	r31, 0x01	; 1
 3f4:	44 e1       	ldi	r20, 0x14	; 20
 3f6:	52 e0       	ldi	r21, 0x02	; 2
	/* First clear the whole array */
	for(uint8_t i=0;i<STATES_NUM;i++)
	{
		states[i].init=&init_nothing;
 3f8:	2a ea       	ldi	r18, 0xAA	; 170
 3fa:	31 e0       	ldi	r19, 0x01	; 1
		
		states[i].btn_down_next[0]=0xff;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
void init_states()
{
	/* First clear the whole array */
	for(uint8_t i=0;i<STATES_NUM;i++)
	{
		states[i].init=&init_nothing;
 3fe:	31 83       	std	Z+1, r19	; 0x01
 400:	20 83       	st	Z, r18
		
		states[i].btn_down_next[0]=0xff;
 402:	84 83       	std	Z+4, r24	; 0x04
		states[i].btn_down_next[1]=0xff;
 404:	85 83       	std	Z+5, r24	; 0x05
		states[i].btn_down_next[2]=0xff;
 406:	86 83       	std	Z+6, r24	; 0x06
		
		states[i].btn_up_next[0]=0xff;
 408:	87 83       	std	Z+7, r24	; 0x07
		states[i].btn_up_next[1]=0xff;
 40a:	80 87       	std	Z+8, r24	; 0x08
		states[i].btn_up_next[2]=0xff;
 40c:	81 87       	std	Z+9, r24	; 0x09
 40e:	3a 96       	adiw	r30, 0x0a	; 10
}

void init_states()
{
	/* First clear the whole array */
	for(uint8_t i=0;i<STATES_NUM;i++)
 410:	e4 17       	cp	r30, r20
 412:	f5 07       	cpc	r31, r21
 414:	a1 f7       	brne	.-24     	; 0x3fe <init_states+0xe>
		states[i].btn_up_next[0]=0xff;
		states[i].btn_up_next[1]=0xff;
		states[i].btn_up_next[2]=0xff;
	}
	/* State 0 */
	states[0].init=&init0;
 416:	e4 e2       	ldi	r30, 0x24	; 36
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	8b ea       	ldi	r24, 0xAB	; 171
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	91 83       	std	Z+1, r25	; 0x01
 420:	80 83       	st	Z, r24
	
	states[0].btn_down_next[2]=1;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	86 83       	std	Z+6, r24	; 0x06
	
	
	/* State 1 */
	states[1].init=&init1;
 426:	23 eb       	ldi	r18, 0xB3	; 179
 428:	31 e0       	ldi	r19, 0x01	; 1
 42a:	33 87       	std	Z+11, r19	; 0x0b
 42c:	22 87       	std	Z+10, r18	; 0x0a
	
	states[1].btn_down_next[0]=0;
 42e:	16 86       	std	Z+14, r1	; 0x0e
	states[1].btn_down_next[2]=2;
 430:	92 e0       	ldi	r25, 0x02	; 2
 432:	90 8b       	std	Z+16, r25	; 0x10
	
	
	/* State 2 */
	states[2].init=&init2;
 434:	2c eb       	ldi	r18, 0xBC	; 188
 436:	31 e0       	ldi	r19, 0x01	; 1
 438:	35 8b       	std	Z+21, r19	; 0x15
 43a:	24 8b       	std	Z+20, r18	; 0x14
	
	states[2].btn_down_next[0]=1;
 43c:	80 8f       	std	Z+24, r24	; 0x18
	states[2].btn_down_next[2]=3;
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	82 8f       	std	Z+26, r24	; 0x1a
	
	
	/* State 3 */
	states[3].init=&init3;
 442:	21 ec       	ldi	r18, 0xC1	; 193
 444:	31 e0       	ldi	r19, 0x01	; 1
 446:	37 8f       	std	Z+31, r19	; 0x1f
 448:	26 8f       	std	Z+30, r18	; 0x1e
	
	states[3].btn_down_next[0]=2;
 44a:	92 a3       	std	Z+34, r25	; 0x22
	states[3].btn_down_next[1]=5;
 44c:	95 e0       	ldi	r25, 0x05	; 5
 44e:	93 a3       	std	Z+35, r25	; 0x23
	states[3].btn_down_next[2]=4;
 450:	24 e0       	ldi	r18, 0x04	; 4
 452:	24 a3       	std	Z+36, r18	; 0x24
	
	
	/* State 4 */
	states[4].init=&init4;
 454:	29 ec       	ldi	r18, 0xC9	; 201
 456:	31 e0       	ldi	r19, 0x01	; 1
 458:	31 a7       	std	Z+41, r19	; 0x29
 45a:	20 a7       	std	Z+40, r18	; 0x28
	
	states[4].btn_down_next[0]=3;
 45c:	84 a7       	std	Z+44, r24	; 0x2c
	//states[4].btn_down_arg[1]=4;
	//states[4].btn_down_arg[2]=4;
	
	
	/* State 5 */
	states[5].init=&init5;
 45e:	21 ed       	ldi	r18, 0xD1	; 209
 460:	31 e0       	ldi	r19, 0x01	; 1
 462:	33 ab       	std	Z+51, r19	; 0x33
 464:	22 ab       	std	Z+50, r18	; 0x32
	
	states[5].btn_down_next[0]=3;
 466:	86 ab       	std	Z+54, r24	; 0x36
	states[5].btn_down_next[1]=7;
 468:	87 e0       	ldi	r24, 0x07	; 7
 46a:	87 ab       	std	Z+55, r24	; 0x37
	states[5].btn_down_next[2]=6;
 46c:	86 e0       	ldi	r24, 0x06	; 6
 46e:	80 af       	std	Z+56, r24	; 0x38
	
	/* State 6 */
	states[6].init=&init6;
 470:	29 ed       	ldi	r18, 0xD9	; 217
 472:	31 e0       	ldi	r19, 0x01	; 1
 474:	35 af       	std	Z+61, r19	; 0x3d
 476:	24 af       	std	Z+60, r18	; 0x3c
	
	states[6].btn_down_next[0]=5;
 478:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <states+0x40>
 47c:	08 95       	ret

0000047e <_exit>:
 47e:	f8 94       	cli

00000480 <__stop_program>:
 480:	ff cf       	rjmp	.-2      	; 0x480 <__stop_program>
